
//----------------------------------------------------------------------
//Symbol 128 MovieClip [deathRay] Frame 1
//----------------------------------------------------------------------
    function hitCheck(mc, point) {
        localToGlobal(point);
        if (mc.hitTest(point.x, point.y, true)) {
            return(true);
        }
        return(false);
    }
    var collisionPoints = new Array();
    var rayThickness = 0;
    var ballSize = 0;
    var ball = this.createEmptyMovieClip("ball", this.getNextHighestDepth());
    var particleCounter = 0;
    var colors = new Array(0, 7733387, 0, 7733387, 0, 7733387, 0, 7733387, 0, 7733387);
    var alphas = new Array(100, 100, 100, 100, 100, 100, 100, 100, 100, 100);
    var fractions = new Array(0, 25, 50, 75, 100, 125, 150, 175, 200, 225);
    var nextColor = 0;
    var lengthCounter = 0;
    onEnterFrame = function () {
        if (_root.frozen) {
            _root.soundDeathRayCharge.stop("soundDeathRayCharge");
            _root.soundDeathRayFire.stop("soundDeathRayFire");
            return(undefined);
        }
        if (!owner.alive) {
            _root.soundDeathRayCharge.stop("soundDeathRayCharge");
            _root.soundDeathRayFire.stop("soundDeathRayFire");
            this.removeMovieClip();
        }
        if (warmup > 0) {
            ballSize = ballSize + 0.75;
            warmup--;
        }
        if (warmup > 8) {
            this.createEmptyMovieClip("particle" + particleCounter, this.getNextHighestDepth());
            p = this["particle" + particleCounter];
            ball.swapDepths(p);
            particleCounter++;
            var _local8 = ((owner._rotation - 90) + (Math.random() * 180)) - 90;
            var _local11 = (12 + (Math.random() * 12)) * (_root.SCALE / 50);
            p.x = Math.cos((_local8 * Math.PI) / 180) * _local11;
            p.y = Math.sin((_local8 * Math.PI) / 180) * _local11;
            p.signX = ((p.x > 0) ? 1 : -1);
            p.endX = p.x;
            p.endY = p.y;
            p.xspeed = 0;
            p.yspeed = 0;
            p.color = ((Math.random() > 0.5) ? 0 : 7733387);
            p.onEnterFrame = function () {
                if (_root.frozen) {
                    return(undefined);
                }
                if ((this.x * this.signX) > 0) {
                    this.xspeed = this.xspeed + (((-this.x) * 0.05) * (_root.SCALE / 50));
                    this.yspeed = this.yspeed + (((-this.y) * 0.05) * (_root.SCALE / 50));
                    this.x = this.x + this.xspeed;
                    this.y = this.y + this.yspeed;
                    if ((this.x * this.signX) < 0) {
                        this.x = 0;
                        this.y = 0;
                    }
                } else if ((this.endX * this.signX) > 0) {
                    this.endX = this.endX + this.xspeed;
                    this.endY = this.endY + this.yspeed;
                    if ((this.endX * this.signX) < 0) {
                        this.endX = 0;
                        this.endY = 0;
                    }
                } else {
                    this.removeMovieClip();
                }
                this.clear();
                this.lineStyle(2 * (_root.SCALE / 50), this.color);
                this.moveTo(this.x, this.y);
                this.lineTo(this.endX, this.endY);
            };
            this.createEmptyMovieClip("particle" + particleCounter, this.getNextHighestDepth());
            p = this["particle" + particleCounter];
            ball.swapDepths(p);
            particleCounter++;
            _local8 = ((owner._rotation - 90) + (Math.random() * 180)) - 90;
            _local11 = (12 + (Math.random() * 12)) * (_root.SCALE / 50);
            p.x = Math.cos((_local8 * Math.PI) / 180) * _local11;
            p.y = Math.sin((_local8 * Math.PI) / 180) * _local11;
            p.signX = ((p.x > 0) ? 1 : -1);
            p.xspeed = 0;
            p.yspeed = 0;
            p.color = ((Math.random() > 0.5) ? 0 : 7733387);
            p.onEnterFrame = function () {
                if (_root.frozen) {
                    return(undefined);
                }
                if ((this.x * this.signX) > 0) {
                    this.xspeed = this.xspeed + (((-this.x) * 0.05) * (_root.SCALE / 50));
                    this.yspeed = this.yspeed + (((-this.y) * 0.05) * (_root.SCALE / 50));
                    this.x = this.x + this.xspeed;
                    this.y = this.y + this.yspeed;
                    if ((this.x * this.signX) < 0) {
                        this.x = 0;
                        this.y = 0;
                    }
                } else {
                    this.removeMovieClip();
                }
                this.clear();
                this.lineStyle(2 * (_root.SCALE / 50), this.color);
                this.moveTo(this.x, this.y);
                this.lineTo(this.x + 1, this.y);
            };
        }
        if (warmup == 0) {
            if (_root.soundOn) {
                _root.soundDeathRayFire.start();
            }
            x = 0;
            y = 0;
            while (hitCheck(_root.game.mazebg, {x:x, y:y})) {
                x = x + xSpeed;
                y = y + ySpeed;
                lengthCounter++;
                if (hitCheck(_root.game.mazemc, {x:x, y:y})) {
                    var _local6 = {x:x, y:y};
                    localToGlobal(_local6);
                    _root.game.mazebg.globalToLocal(_local6);
                    collisionPoints.push(_local6);
                }
            }
            while ((((!hitCheck(_root.game.mazebg, {x:x + (4 * (_root.SCALE / 50)), y:y})) || (!hitCheck(_root.game.mazebg, {x:x - (4 * (_root.SCALE / 50)), y:y}))) || (!hitCheck(_root.game.mazebg, {x:x, y:y + (4 * (_root.SCALE / 50))}))) || (!hitCheck(_root.game.mazebg, {x:x, y:y - (4 * (_root.SCALE / 50))}))) {
                x = x - xSpeed;
                y = y - ySpeed;
                lengthCounter--;
            }
            active = true;
            warmup--;
        }
        if (active) {
            ballSize = Math.max(0, ballSize - 5);
            rayThickness = Math.min(8, rayThickness + 1);
            var _local5 = 0;
            while (_local5 < collisionPoints.length) {
                if (Math.random() > 0.5) {
                } else {
                    _root.game.mazebg.createEmptyMovieClip("particle" + particleCounter, _root.game.mazebg.getNextHighestDepth());
                    p = _root.game.mazebg["particle" + particleCounter];
                    this.swapDepths(p);
                    particleCounter++;
                    var _local8 = Math.random() * 360;
                    var _local7 = (0.5 + (2 * Math.random())) * (_root.SCALE / 50);
                    p.x = collisionPoints[_local5].x;
                    p.y = collisionPoints[_local5].y;
                    p._x = p.x;
                    p._y = p.y;
                    p.lineStyle(2 * (_root.SCALE / 50), ((Math.random() > 0.5) ? 0 : 7733387));
                    p.moveTo(0, 0);
                    var _local4 = 0;
                    var _local3 = 0;
                    var _local9 = 0;
                    while (_local9 < 8) {
                        _local4 = _local4 + ((Math.random() * 10) - 5);
                        _local3 = _local3 + ((Math.random() * 10) - 5);
                        p.lineTo(_local4 * (_root.SCALE / 50), _local3 * (_root.SCALE / 50));
                        _local9++;
                    }
                    p.onEnterFrame = function () {
                        if (_root.frozen) {
                            return(undefined);
                        }
                        this.removeMovieClip();
                    };
                }
                _local5++;
            }
            _local5 = 0;
            while (_local5 < collisionPoints.length) {
                if (Math.random() > 0.5) {
                } else {
                    _root.game.mazebg.createEmptyMovieClip("particle" + particleCounter, _root.game.mazebg.getNextHighestDepth());
                    p = _root.game.mazebg["particle" + particleCounter];
                    this.swapDepths(p);
                    particleCounter++;
                    var _local8 = Math.random() * 360;
                    var _local7 = (0.5 + (2 * Math.random())) * (_root.SCALE / 50);
                    p.x = collisionPoints[_local5].x;
                    p.y = collisionPoints[_local5].y;
                    p._x = p.x;
                    p._y = p.y;
                    p.lineStyle(2 * (_root.SCALE / 50), ((Math.random() > 0.5) ? 0 : 7733387));
                    p.moveTo(0, 0);
                    p.lineTo(1, 0);
                    p.xspeed = Math.cos(_local8) * _local7;
                    p.yspeed = Math.sin(_local8) * _local7;
                    p.lifetime = 12;
                    p.alpha = 100;
                    p.onEnterFrame = function () {
                        if (_root.frozen) {
                            return(undefined);
                        }
                        this.x = this.x + this.xspeed;
                        this.y = this.y + this.yspeed;
                        this._x = this.x;
                        this._y = this.y;
                        this._alpha = this.alpha;
                        this.xspeed = this.xspeed * 0.95;
                        this.yspeed = this.yspeed * 0.95;
                        this.lifetime--;
                        if (this.lifetime <= 0) {
                            this.alpha = this.alpha - 25;
                        }
                        if (this.alpha <= 0) {
                            this.removeMovieClip();
                        }
                    };
                }
                _local5++;
            }
            x = 0;
            y = 0;
            var _local10 = _root.DEATHRAYDEADLY;
            var _local9 = 0;
            while (_local9 < (lengthCounter / 2)) {
                x = x + (2 * xSpeed);
                y = y + (2 * ySpeed);
                if (_local10 > 0) {
                    _local10--;
                }
                if (_local10 == 0) {
                    _local5 = 0;
                    while (_local5 < _root.TANKS) {
                        if (_root.game["tank" + _local5].alive && (hitCheck(_root.game["tank" + _local5], {x:x, y:y}))) {
                            _root.registerHit(owner, _root.game["tank" + _local5]);
                            _root.destroyTank(_local5);
                        }
                        _local5++;
                    }
                }
                _local9++;
            }
            if ((lengthCounter % 2) == 1) {
                x = x - xSpeed;
                y = y - ySpeed;
            }
        }
        if ((!active) && (warmup < 0)) {
            rayThickness = rayThickness - 3;
            if (rayThickness <= 0) {
                this.removeMovieClip();
            }
        }
        if (fractions[0] <= 0) {
            fractions.shift();
            fractions.push(250);
            colors.shift();
            colors.push(nextColor);
            nextColor = 7733387 - nextColor;
        }
        var _local5 = 0;
        while (_local5 < fractions.length) {
            fractions[_local5] = fractions[_local5] - 5;
            _local5++;
        }
        ball.clear();
        ball.lineStyle(ballSize * (_root.SCALE / 50));
        ball.lineGradientStyle("radial", colors, alphas, fractions, {matrixType:"box", x:-50 * (_root.SCALE / 50), y:-50 * (_root.SCALE / 50), w:100 * (_root.SCALE / 50), h:100 * (_root.SCALE / 50), r:0});
        ball.moveTo(0, 0);
        ball.lineTo(1, 0);
        clear();
        lineStyle(rayThickness * (_root.SCALE / 50));
        lineGradientStyle("linear", colors, alphas, fractions, {matrixType:"box", x:-750 * (_root.SCALE / 50), y:-750 * (_root.SCALE / 50), w:1500 * (_root.SCALE / 50), h:1500 * (_root.SCALE / 50), r:((owner._rotation + 90) / 180) * Math.PI});
        moveTo(0, 0);
        lineTo(x, y);
        if (active) {
            lifetime--;
        }
        if (lifetime == 0) {
            owner.deathRayReady = true;
            active = false;
        }
    };
﻿
//----------------------------------------------------------------------
//Frame 25
//----------------------------------------------------------------------
    _root.loadVariables("includes/updateGameStatistics.php?q=" + Base64.Encode(shuffleMessage((("gameStarted=3&a=" + Math.random()) + "&b=") + Math.random())), "POST");
    gotoAndPlay ("game");
﻿
//----------------------------------------------------------------------
//Instance of Symbol 222 MovieClip "player1Controls" in Frame 19
//----------------------------------------------------------------------
onClipEvent (load) {
    gotoAndStop (1);
    playerName.text = "Player 1";
    activateText.text = "Press Q";
}
﻿
//----------------------------------------------------------------------
//Symbol 134 MovieClip [homingbullet] Frame 1
//----------------------------------------------------------------------
    function hitCheck(mc, point) {
        localToGlobal(point);
        if (mc.hitTest(point.x, point.y, true)) {
            return(true);
        }
        return(false);
    }
    stop();
    onEnterFrame = function () {
        if (_root.frozen) {
            return(undefined);
        }
        if (homing) {
            var _local11 = Math.floor(x / _root.SCALE);
            var _local12 = Math.floor(y / _root.SCALE);
            var _local10 = 1000;
            var _local16;
            var _local15;
            var _local3 = 0;
            while (_local3 < _root.TANKS) {
                var _local9 = Math.floor(_root.game["tank" + _local3].x / _root.SCALE);
                var _local7 = Math.floor(_root.game["tank" + _local3].y / _root.SCALE);
                if (!_root.game["tank" + _local3].alive) {
                } else {
                    var _local5 = _root.distancesForMaze[_local11][_local12][_local9][_local7];
                    if ((_local5 < _local10) || ((_local5 == _local10) && (_root.game["tank" + _local3] != owner))) {
                        _local10 = _local5;
                        _local16 = _local9;
                        _local15 = _local7;
                        target = _root.game["tank" + _local3];
                        targetColor = (((16711680 * target.baseColor.r) / 255) + ((65280 * target.baseColor.g) / 255)) + ((255 * target.baseColor.b) / 255);
                    }
                }
                _local3++;
            }
            if (!target.alive) {
                homing = false;
            } else {
                if (target != oldTarget) {
                    if (_root.soundOn) {
                        _root.soundHoming.start();
                    }
                }
                oldTarget = target;
                var _local17 = _root.getShortestPathWithDistances(_root.maze, _root.distancesForMaze[_local11][_local12], _local11, _local12, _local16, _local15);
                var _local14;
                var _local13;
                if (_local17.length == 1) {
                    _local14 = target.x;
                    _local13 = target.y;
                } else {
                    _local14 = (_local17[0].x + 0.5) * _root.SCALE;
                    _local13 = (_local17[0].y + 0.5) * _root.SCALE;
                }
                soundCounter++;
                if (_root.soundOn) {
                    if (soundCounter > (_local17.length * 4)) {
                        soundCounter = 0;
                        _root.soundHoming2.start();
                    }
                }
                _local3 = 0;
                while (_local3 < _root.HOMINGHITCHECKINTERVALS) {
                    previousX = x;
                    previousY = y;
                    x = x + xSpeed;
                    y = y + ySpeed;
                    _x  = x;
                    _y  = y;
                    if (hitCheck(_root.game.mazemc, {x:0, y:0})) {
                        if (_root.soundOn) {
                            _root["soundBounce" + random(2)].start();
                        }
                        x = previousX;
                        y = previousY;
                        x = x - xSpeed;
                        y = y + ySpeed;
                        _x  = x;
                        _y  = y;
                        if (hitCheck(_root.game.mazemc, {x:0, y:0})) {
                            hitOnXInvert = true;
                        } else {
                            hitOnXInvert = false;
                        }
                        x = previousX;
                        y = previousY;
                        x = x + xSpeed;
                        y = y - ySpeed;
                        _x  = x;
                        _y  = y;
                        if (hitCheck(_root.game.mazemc, {x:0, y:0})) {
                            hitOnYInvert = true;
                        } else {
                            hitOnYInvert = false;
                        }
                        if (hitOnXInvert && (!hitOnYInvert)) {
                            ySpeed = -ySpeed;
                        } else if (hitOnYInvert && (!hitOnXInvert)) {
                            xSpeed = -xSpeed;
                        } else {
                            xSpeed = -xSpeed;
                            ySpeed = -ySpeed;
                        }
                        x = previousX;
                        y = previousY;
                        x = x + xSpeed;
                        y = y + ySpeed;
                    }
                    if ((_local14 - x) < 0) {
                        xSpeed = xSpeed - (0.12 / _root.HOMINGHITCHECKINTERVALS);
                    } else {
                        xSpeed = xSpeed + (0.12 / _root.HOMINGHITCHECKINTERVALS);
                    }
                    if ((_local13 - y) < 0) {
                        ySpeed = ySpeed - (0.12 / _root.HOMINGHITCHECKINTERVALS);
                    } else {
                        ySpeed = ySpeed + (0.12 / _root.HOMINGHITCHECKINTERVALS);
                    }
                    var _local4 = Math.sqrt((xSpeed * xSpeed) + (ySpeed * ySpeed));
                    if (_local4 > ((_root.HOMINGSPEED / _root.HOMINGHITCHECKINTERVALS) * (_root.SCALE / 50))) {
                        xSpeed = (((xSpeed / _local4) * _root.HOMINGSPEED) / _root.HOMINGHITCHECKINTERVALS) * (_root.SCALE / 50);
                        ySpeed = (((ySpeed / _local4) * _root.HOMINGSPEED) / _root.HOMINGHITCHECKINTERVALS) * (_root.SCALE / 50);
                    }
                    _local3++;
                }
            }
        } else {
            var _local3 = 0;
            while (_local3 < _root.HOMINGHITCHECKINTERVALS) {
                previousX = x;
                previousY = y;
                x = x + xSpeed;
                y = y + ySpeed;
                _x  = x;
                _y  = y;
                if (hitCheck(_root.game.mazemc, {x:0, y:0})) {
                    if (_root.soundOn) {
                        _root["soundBounce" + random(2)].start();
                    }
                    x = previousX;
                    y = previousY;
                    x = x - xSpeed;
                    y = y + ySpeed;
                    _x  = x;
                    _y  = y;
                    if (hitCheck(_root.game.mazemc, {x:0, y:0})) {
                        hitOnXInvert = true;
                    } else {
                        hitOnXInvert = false;
                    }
                    x = previousX;
                    y = previousY;
                    x = x + xSpeed;
                    y = y - ySpeed;
                    _x  = x;
                    _y  = y;
                    if (hitCheck(_root.game.mazemc, {x:0, y:0})) {
                        hitOnYInvert = true;
                    } else {
                        hitOnYInvert = false;
                    }
                    if (hitOnXInvert && (!hitOnYInvert)) {
                        ySpeed = -ySpeed;
                    } else if (hitOnYInvert && (!hitOnXInvert)) {
                        xSpeed = -xSpeed;
                    } else {
                        xSpeed = -xSpeed;
                        ySpeed = -ySpeed;
                    }
                    x = previousX;
                    y = previousY;
                    x = x + xSpeed;
                    y = y + ySpeed;
                }
                _local3++;
            }
        }
        _x  = x;
        _y  = y;
        if (xSpeed < 0) {
            if (ySpeed < 0) {
                aimAngle = -3.14159265358979 + Math.atan(ySpeed / xSpeed);
            } else {
                aimAngle = Math.PI + Math.atan(ySpeed / xSpeed);
            }
        } else if (xSpeed > 0) {
            aimAngle = Math.atan(ySpeed / xSpeed);
        } else if (ySpeed < 0) {
            aimAngle = -1.5707963267949;
        } else {
            aimAngle = 1.5707963267949 /* Math.PI/2 */;
        }
        _rotation  = (((aimAngle + 1.5707963267949 /* Math.PI/2 */) * 180) / Math.PI);
        var _local3 = 0;
        while (_local3 < _root.HOMINGSMOKECLOUDS) {
            var _local6 = _root.game.getNextHighestDepth();
            _root.game.createEmptyMovieClip("homingSmoke-" + _local6, _root.game.getNextHighestDepth());
            s = _root.game["homingSmoke-" + _local6];
            if (homing && (Math.random() > 0.5)) {
                s.lineStyle(4 * (_root.SCALE / 50), targetColor, 20);
            } else {
                s.lineStyle(4 * (_root.SCALE / 50), Math.round(random(4) + 6) * 1118481, 20);
            }
            s.moveTo(0, 0);
            s.lineTo(0, 1);
            s.xspeed = (-this.xSpeed) + ((Math.random() - 0.5) * (_root.SCALE / 50));
            s.yspeed = (-this.ySpeed) + ((Math.random() - 0.5) * (_root.SCALE / 50));
            var _local4 = Math.sqrt((xSpeed * xSpeed) + (ySpeed * ySpeed));
            if (isNaN(_local4)) {
                _local4 = 1;
            }
            s.x = this._x + ((((-8 * this.xSpeed) / _local4) + ((5 * Math.random()) - 2.5)) * (_root.SCALE / 50));
            s.y = this._y + ((((-8 * this.ySpeed) / _local4) + ((5 * Math.random()) - 2.5)) * (_root.SCALE / 50));
            s._x = s.x;
            s._y = s.y;
            s.onEnterFrame = function () {
                if (_root.frozen) {
                    return(undefined);
                }
                this._xscale = this._xscale + 2;
                this._yscale = this._yscale + 2;
                this._alpha = this._alpha - (4 - (Math.random() * 4));
                this.xspeed = this.xspeed * 0.95;
                this.yspeed = this.yspeed * 0.95;
                this.x = this.x + this.xspeed;
                this.y = this.y + this.yspeed;
                this._x = this.x;
                this._y = this.y;
                if (this._alpha <= 0) {
                    this.removeMovieClip();
                }
            };
            _local3++;
        }
        if (deadly == 0) {
            _local3 = 0;
            while (_local3 < _root.TANKS) {
                if (_root.game["tank" + _local3].alive && (hitCheck(_root.game["tank" + _local3], {x:0, y:0}))) {
                    _root.registerHit(owner, _root.game["tank" + _local3]);
                    owner.homingReady = true;
                    _root.setWeapon(owner, "bullet");
                    _root.destroyTank(_local3);
                    this.removeMovieClip();
                }
                _local3++;
            }
        }
        if (startuptime >= 0) {
            startuptime--;
        }
        if (startuptime == 0) {
            homing = true;
        }
        if (deadly > 0) {
            deadly--;
        }
        lifetime--;
        if (lifetime <= 0) {
            owner.homingReady = true;
            _root.setWeapon(owner, "bullet");
            if (_root.soundOn) {
                _root.soundPoof.start();
            }
            var _local8 = 0;
            while (_local8 < (_root.NUMBEROFSMOKECLOUDS * 2)) {
                s = _root.game.createEmptyMovieClip("smokebullet" + _root.game.getNextHighestDepth(), _root.game.getNextHighestDepth());
                s.lineStyle(5 * (_root.SCALE / 50), Math.round(random(4)) * 1118481, 10 + random(20));
                s.moveTo(0, 0);
                s.lineTo(0, 1);
                s.xspeed = (xSpeed * _root.HOMINGHITCHECKINTERVALS) + ((0.5 * ((Math.random() * 8) - 4)) * (_root.SCALE / 50));
                s.yspeed = (ySpeed * _root.HOMINGHITCHECKINTERVALS) + ((0.5 * ((Math.random() * 8) - 4)) * (_root.SCALE / 50));
                s.x = _x;
                s.y = _y;
                s._x = s.x;
                s._y = s.y;
                s.hitCheck = function (mc, point) {
                    this.localToGlobal(point);
                    if (mc.hitTest(point.x, point.y, true)) {
                        return(true);
                    }
                    return(false);
                };
                s.onEnterFrame = function () {
                    if (_root.frozen) {
                        return(undefined);
                    }
                    this._xscale = this._xscale + 2;
                    this._yscale = this._yscale + 2;
                    this._alpha = this._alpha - (15 - (Math.random() * 2));
                    this.xspeed = this.xspeed * 0.93;
                    this.yspeed = this.yspeed * 0.93;
                    this.x = this.x + this.xspeed;
                    this.y = this.y + this.yspeed;
                    this._x = this.x;
                    this._y = this.y;
                    if (this.hitCheck(_root.game.mazemc, {x:0, y:0})) {
                        this.xspeed = this.xspeed * 0.25;
                        this.yspeed = this.yspeed * 0.25;
                    }
                    if (this._alpha <= 0) {
                        this.removeMovieClip();
                    }
                };
                _local8++;
            }
            this.removeMovieClip();
        }
    };

﻿
//----------------------------------------------------------------------
//Symbol 123 MovieClip [scopeCircle] Frame 1
//----------------------------------------------------------------------
    stop();

﻿
//----------------------------------------------------------------------
//Symbol 102 MovieClip Frame 1
//----------------------------------------------------------------------
    stop();

﻿
//----------------------------------------------------------------------
//Symbol 36 MovieClip [crate] Frame 1
//----------------------------------------------------------------------
    function hitCheck(mc, point) {
        localToGlobal(point);
        if (mc.hitTest(point.x, point.y, false)) {
            return(true);
        }
        return(false);
    }
    onEnterFrame = function () {
        if (_root.frozen) {
            return(undefined);
        }
        var _local3 = 0;
        while (_local3 < _root.TANKS) {
            if (_root.game["tank" + _local3].alive && (((hitCheck(_root.game["tank" + _local3], {x:-10, y:-10}) || (hitCheck(_root.game["tank" + _local3], {x:-10, y:10}))) || (hitCheck(_root.game["tank" + _local3], {x:10, y:10}))) || (hitCheck(_root.game["tank" + _local3], {x:10, y:-10})))) {
                if (_root.game["tank" + _local3].currentWeapon != "bullet") {
                } else {
                    if (_root.soundOn) {
                        _root.soundClick.start();
                    }
                    _root.setWeapon(_root.game["tank" + _local3], weapon);
                    _root.numberOfCrates--;
                    _root.reachable[pos].used = false;
                    this.removeMovieClip();
                }
            }
            _local3++;
        }
        _xscale  = (_xscale + scaleSpeed);
        _yscale  = (_yscale + scaleSpeed);
        if (_xscale > targetScale) {
            scaleSpeed = scaleSpeed - scaleSpeedDiff;
        }
        if ((((_xscale - targetScale) < 0) && (scaleSpeed < 0)) && (!landed)) {
            if (_root.soundOn) {
                _root.soundCrateLand.start();
            }
            rotSpeed = 0;
            scaleSpeed = 0;
            _xscale  = targetScale;
            _yscale  = targetScale;
            landed = true;
            var _local4 = 0;
            while (_local4 < _root.NUMBEROFDUSTCLOUDS) {
                _root.game.mazebg.createEmptyMovieClip((("dust" + _root.numberOfCrates) + "-") + _local4, _root.game.mazebg.getNextHighestDepth());
                s = _root.game.mazebg[(("dust" + _root.numberOfCrates) + "-") + _local4];
                this.swapDepths(s);
                s.lineStyle(10 * (_root.SCALE / 50), 11184810, 40 + random(20));
                s.moveTo(0, 0);
                s.lineTo(0, 1);
                s.xspeed = ((Math.random() * 2) - 1) * (_root.SCALE / 50);
                s.yspeed = ((Math.random() * 2) - 1) * (_root.SCALE / 50);
                s.x = (_x + (s.xspeed * ((Math.random() * 3) + 1))) + (((Math.random() * 2) - 1) * (_root.SCALE / 50));
                s.y = (_y + (s.yspeed * ((Math.random() * 3) + 1))) + (((Math.random() * 2) - 1) * (_root.SCALE / 50));
                s._x = s.x;
                s._y = s.y;
                s.onEnterFrame = function () {
                    if (_root.frozen) {
                        return(undefined);
                    }
                    this._xscale = this._xscale + 2;
                    this._yscale = this._yscale + 2;
                    this._alpha = this._alpha - (4 - (Math.random() * 2));
                    this.xspeed = this.xspeed * 0.85;
                    this.yspeed = this.yspeed * 0.85;
                    this.x = this.x + this.xspeed;
                    this.y = this.y + this.yspeed;
                    this._x = this.x;
                    this._y = this.y;
                    if (this._alpha <= 0) {
                        this.removeMovieClip();
                    }
                };
                _local4++;
            }
        }
    };

﻿
//----------------------------------------------------------------------
//Instance of Symbol 187 MovieClip "sound" in Frame 41
//----------------------------------------------------------------------
onClipEvent (load) {
    function toggleSound() {
        _root.soundOn = !_root.soundOn;
        this.gotoAndStop(1 + (_root.soundOn == true));
    }
    this.soundButton.tabEnabled = false;
    _root.soundOn = !_root.soundOn;
    toggleSound();
    onMouseDown = function () {
        if (this.hitTest(_root._xmouse, _root._ymouse, true)) {
            this.toggleSound();
        }
    };
}
﻿
//----------------------------------------------------------------------
//Symbol 138 MovieClip [gatling] Frame 1
//----------------------------------------------------------------------
    onEnterFrame = function () {
        if (_root.frozen) {
            _root.soundGatlingMotorStart.stop("soundGatlingMotorStart");
            _root.soundGatlingMotor.stop("soundGatlingMotor");
            _root.soundGatlingMotorStop.stop("soundGatlingMotorStop");
            return(undefined);
        }
        if (!owner.alive) {
            _root.soundGatlingMotorStart.stop("soundGatlingMotorStart");
            _root.soundGatlingMotor.stop("soundGatlingMotor");
            _root.soundGatlingMotorStop.stop("soundGatlingMotorStop");
            this.removeMovieClip();
        }
        if (owner.turret._currentframe == 16) {
            owner.turret.gotoAndPlay(13);
        }
        if (active && (owner.triggerReleased)) {
            active = false;
            _root.soundGatlingMotorStart.stop("soundGatlingMotorStart");
            _root.soundGatlingMotor.stop("soundGatlingMotor");
            if (_root.soundOn) {
                _root.soundGatlingMotorStop.start(2.1 - (2.1 * (Math.pow(spinSpeed, 0.3) / Math.pow(_root.GATLINGSPINSPEED, 0.3))));
            }
            spinSpeed = spinSpeed + 35;
        }
        if (active) {
            if (spinSpeed < _root.GATLINGSPINSPEED) {
                spinSpeed++;
            }
            if (spinSpeed == (_root.GATLINGSPINSPEED - 1)) {
                _root.sounGatlingMotorStart.stop("soundGatlingMotorStart");
                if (_root.soundOn) {
                    _root.soundGatlingMotor.start(0, 999);
                }
            }
            if (spinSpeed == _root.GATLINGSPINSPEED) {
                fireCounter++;
                if ((fireCounter % 3) == 0) {
                    if (bulletsLeft > 0) {
                        bulletsLeft--;
                        if (_root.soundOn) {
                            _root.soundGatlingShot.start();
                        }
                        gatlingBulletDepth = _root.game.getNextHighestDepth();
                        gatlingBulletName = "gatlingBullet" + gatlingBulletDepth;
                        gatlingBullet = _root.game.attachMovie("gatlingBullet", gatlingBulletName, gatlingBulletDepth);
                        owner.swapDepths(gatlingBullet);
                        gatlingBullet.x = owner._x + (((Math.cos(((owner._rotation - 90) * Math.PI) / 180) * _root.SCALE) * 4.5) / 16);
                        gatlingBullet.y = owner._y + (((Math.sin(((owner._rotation - 90) * Math.PI) / 180) * _root.SCALE) * 4.5) / 16);
                        gatlingBullet._x = gatlingBullet.x;
                        gatlingBullet._y = gatlingBullet.y;
                        gatlingBullet._xscale = 100 * (_root.SCALE / 50);
                        gatlingBullet._yscale = 100 * (_root.SCALE / 50);
                        var _local3 = ((owner._rotation - 90) + (Math.random() * 11)) - 5.5;
                        gatlingBullet.xSpeed = ((Math.cos((_local3 * Math.PI) / 180) * _root.GATLINGSPEED) / _root.GATLINGHITCHECKINTERVALS) * (_root.SCALE / 50);
                        gatlingBullet.ySpeed = ((Math.sin((_local3 * Math.PI) / 180) * _root.GATLINGSPEED) / _root.GATLINGHITCHECKINTERVALS) * (_root.SCALE / 50);
                        gatlingBullet.lifetime = _root.GATLINGLIFETIME;
                        gatlingBullet.deadly = _root.GATLINGDEADLY;
                        gatlingBullet.owner = owner;
                    } else if (_root.soundOn) {
                        _root.soundExposion.start();
                    }
                }
            }
        }
        if (!active) {
            if (spinSpeed > 0) {
                spinSpeed--;
            }
            if ((spinSpeed == 0) && (owner.gatlingReady)) {
                this.removeMovieClip();
            }
            if (spinSpeed == 0) {
                owner.gatlingReady = true;
                _root.setWeapon(owner, "bullet");
            }
        }
    };
﻿
//----------------------------------------------------------------------
//Symbol 89 MovieClip Frame 4
//----------------------------------------------------------------------
    gotoAndStop (1);
﻿
//----------------------------------------------------------------------
//Frame 7
//----------------------------------------------------------------------
    stop();
    player1Joined = false;
    player2Joined = false;
    onKeyDown = function () {
        if (Key.getCode() == 81) {
            if (!player1Joined) {
                if (_root.soundOn) {
                    _root.soundClick.start();
                }
            }
            var _local2 = new Color(player1Controls.background);
            _local2.setRGB(16711680);
            player1Controls.fireButton.gotoAndStop(1);
            _local2 = new Color(player1Controls.fireButton.background);
            _local2.setRGB(16711680);
            player1Controls.activateText.text = "";
            player1Joined = true;
        }
        if (Key.getCode() == 77) {
            if (!player2Joined) {
                if (_root.soundOn) {
                    _root.soundClick.start();
                }
            }
            var _local2 = new Color(player2Controls.background);
            _local2.setRGB(65280);
            player2Controls.fireButton.gotoAndStop(1);
            _local2 = new Color(player2Controls.fireButton.background);
            _local2.setRGB(65280);
            player2Controls.activateText.text = "";
            player2Joined = true;
        }
    };
    Key.addListener(this);
    onEnterFrame = function () {
        if (player1Joined && (player2Joined)) {
            Key.removeListener(this);
            play();
            _root.TANKS = 2;
            _root.onEnterFrame = undefined;
        }
    };

﻿
//----------------------------------------------------------------------
//Symbol 89 MovieClip Frame 12
//----------------------------------------------------------------------
    gotoAndStop (7);
﻿
//----------------------------------------------------------------------
//Symbol 143 MovieClip [optionWindow] Frame 1
//----------------------------------------------------------------------
    var i = 0;
    while (i < _root.settingsActiveWeapons.length) {
        var weapon = _root.settingsActiveWeapons[i];
        trace(this[weapon + "CheckBox"]);
        this[weapon + "CheckBox"].selected = true;
        i++;
    }
    var window = this;
    okButton.onRelease = function () {
        var _local2 = new Array();
        if (laserCheckBox.selected) {
            _local2.push("laser");
        }
        if (fragCheckBox.selected) {
            _local2.push("frag");
        }
        if (gatlingCheckBox.selected) {
            _local2.push("gatling");
        }
        if (homingCheckBox.selected) {
            _local2.push("homing");
        }
        _root.settingsActiveWeapons = _local2;
        _root.optionsOpen = !_root.optionsOpen;
        _root.frozen = false;
        window.removeMovieClip();
    };

﻿
//----------------------------------------------------------------------
//Frame 37
//----------------------------------------------------------------------
    _root.loadVariables("includes/updateGameStatistics.php?q=" + Base64.Encode(shuffleMessage((((((("gameStarted=" + _root.loginInfo.numUsers) + "&x=") + _root.loginInfo.x) + "&a=") + Math.random()) + "&b=") + Math.random())), "POST");
    gotoAndPlay ("game");
﻿
//----------------------------------------------------------------------
//Symbol 139 MovieClip [tankTroubleAI] Frame 1
//----------------------------------------------------------------------
    function updateGoal(temp) {
        if (myGoal.priority < temp.priority) {
            myGoal = temp;
        }
    }
    function dodgeTrajectories(fieldx, fieldy, bullets, maxTimeToDodge, maxDistToDodge, maxCellDistToDodge, hitCheckInterval, checkBounce) {
        var _local39 = maxTimeToDodge;
        var _local8 = maxDistToDodge;
        var _local23 = {priority:0};
        var _local18 = 0;
        while (_local18 < bullets.length) {
            var _local2 = bullets[_local18];
            var _local4 = _local2.x;
            var _local3 = _local2.y;
            var _local20 = Math.floor(_local4 / _root.SCALE);
            var _local21 = Math.floor(_local3 / _root.SCALE);
            if (_root.distancesForMaze[fieldx][fieldy][_local20][_local21] <= maxCellDistToDodge) {
                var _local10 = _local2.x + (_local2.xSpeed * hitCheckInterval);
                var _local9 = _local2.y + (_local2.ySpeed * hitCheckInterval);
                var _local11 = myTank.x;
                var _local15 = myTank.y;
                var _local22 = ((_local10 - _local4) * (_local10 - _local4)) + ((_local9 - _local3) * (_local9 - _local3));
                var _local26 = (((_local11 - _local4) * (_local10 - _local4)) + ((_local15 - _local3) * (_local9 - _local3))) / _local22;
                if ((_local26 > -1) && (_local26 < _local39)) {
                    var _local14 = _local4 + (_local26 * (_local10 - _local4));
                    var _local13 = _local3 + (_local26 * (_local9 - _local3));
                    var _local7 = _local11 - _local14;
                    var _local6 = _local15 - _local13;
                    var _local36 = Math.sqrt((_local7 * _local7) + (_local6 * _local6));
                    var _local17 = checkPathForCollision(_local14, _local13, _local7 / _local36, _local6 / _local36, 1, Math.ceil(_local36), Math.ceil(_local36));
                    if ((_local17 == undefined) && (_local36 < _local8)) {
                        _local7 = _local10 - _local14;
                        _local6 = _local9 - _local13;
                        var _local12 = Math.sqrt((_local7 * _local7) + (_local6 * _local6));
                        _local17 = checkPathForCollision(_local14, _local13, _local7 / _local12, _local6 / _local12, 1, Math.ceil(_local12), Math.ceil(_local12));
                        if (_local17 == undefined) {
                            _local8 = Math.min(_local8, _local36);
                            _local23 = {goal:"dodgeBullet", x:_local2.x, y:_local2.y, closest:{x:_local14, y:_local13}, dist:_local36, t:_local26, dir:{x:_local10 - _local4, y:_local9 - _local3}, maxTime:maxTimeToDodge, maxDist:maxDistToDodge, period:10, priority:1, updateContinuously:false, id:goalId++};
                        }
                    }
                }
                if ((_local8 > (_root.SCALE / 4)) && (checkBounce)) {
                    var _local5 = checkPathForCollision(_local4, _local3, _local2.xSpeed, _local2.ySpeed, hitCheckInterval, 12, _local2.lifetime);
                    if (_local5 != undefined) {
                        _local4 = _local5.x;
                        _local3 = _local5.y;
                        _local10 = _local5.x + (_local5.xSpeed * hitCheckInterval);
                        _local9 = _local5.y + (_local5.ySpeed * hitCheckInterval);
                        _local22 = ((_local10 - _local4) * (_local10 - _local4)) + ((_local9 - _local3) * (_local9 - _local3));
                        _local26 = (((_local11 - _local4) * (_local10 - _local4)) + ((_local15 - _local3) * (_local9 - _local3))) / _local22;
                        if ((_local26 > 0) && (_local26 < (maxTimeToDodge - _local5.t))) {
                            var _local14 = _local4 + (_local26 * (_local10 - _local4));
                            var _local13 = _local3 + (_local26 * (_local9 - _local3));
                            var _local7 = _local11 - _local14;
                            var _local6 = _local15 - _local13;
                            var _local36 = Math.sqrt((_local7 * _local7) + (_local6 * _local6));
                            var _local17 = checkPathForCollision(_local14, _local13, _local7 / _local36, _local6 / _local36, 1, Math.ceil(_local36), Math.ceil(_local36));
                            if ((_local17 == undefined) && (_local36 < _local8)) {
                                _local7 = _local14 - _local4;
                                _local6 = _local13 - _local3;
                                var _local12 = Math.sqrt((_local7 * _local7) + (_local6 * _local6));
                                _local17 = checkPathForCollision(_local4, _local3, _local7 / _local12, _local6 / _local12, 1, Math.ceil(_local12), Math.ceil(_local12));
                                if (_local17 == undefined) {
                                    _local8 = Math.min(_local8, _local36);
                                    _local23 = {goal:"dodgeBullet", x:_local2.x, y:_local2.y, closest:{x:_local14, y:_local13}, dist:_local36, t:_local26 + _local5.t, dir:{x:_local10 - _local4, y:_local9 - _local3}, maxTime:maxTimeToDodge, maxDist:maxDistToDodge, period:10, priority:1, updateContinuously:false, id:goalId++};
                                }
                            }
                        }
                    }
                }
            }
            _local18++;
        }
        return(_local23);
    }
    function tryToRetaliate() {
        if (currentAggresiveness < (AGGRESIVENESS / 2)) {
            return(undefined);
        }
        switch (myTank.currentWeapon) {
            case "bullet" : 
            case "laser" : 
                if (myTank.bulletsFired < _root.settingsMaxBullets) {
                    var _local14 = myTank._rotation;
                    var _local12 = false;
                    var _local13 = _root.BULLETLIFETIME;
                    var _local11 = _root.MOVIEWIDTH + _root.MOVIEHEIGHT;
                    var _local10 = checkBulletPath(_local14);
                    if (_local10.result == "HIT") {
                        _local12 = true;
                        if (_local10.time < _local13) {
                            _local13 = _local10.time;
                            _local11 = 0;
                        }
                    } else if ((_local10.result == "NOTHING") && (!_local12)) {
                        if (_local10.closest < _local11) {
                            _local11 = _local10.closest;
                        }
                    }
                    if (_local12 || (_local11 < (MAXCLOSESTDISTANCE / 2))) {
                        trace("Retaliate!");
                        myActionsForGoal.push({action:"fireWeapon", delay:1});
                        currentAggresiveness = Math.max(0, currentAggresiveness - 0.2);
                    }
                }
                break;
            case "frag" : 
                if (myTank.fragFired) {
                    var _local4 = myTank.lastFrag;
                    var _local6 = myTank.x - _local4.x;
                    var _local5 = myTank.y - _local4.y;
                    var _local3 = Math.sqrt((_local6 * _local6) + (_local5 * _local5));
                    var _local7 = checkPathForCollision(_local4.x, _local4.y, _local6 / _local3, _local5 / _local3, 1, Math.ceil(_local3), Math.ceil(_local3));
                    if ((_local7 != undefined) || (_local3 >= FRAGBOMBSAFETYDIST)) {
                        var _local2 = 0;
                        while (_local2 < _root.TANKS) {
                            if (_root.game["tank" + _local2].alive && (_root.game["tank" + _local2] != myTank)) {
                                _local6 = _root.game["tank" + _local2].x - _local4.x;
                                _local5 = _root.game["tank" + _local2].y - _local4.y;
                                _local3 = Math.sqrt((_local6 * _local6) + (_local5 * _local5));
                                if (_local3 <= FRAGBOMBDETONATEDIST) {
                                    _local7 = checkPathForCollision(_local4.x, _local4.y, _local6 / _local3, _local5 / _local3, 1, Math.ceil(_local3), Math.ceil(_local3));
                                    if (_local7 == undefined) {
                                        myActionsForGoal.push({action:"fireWeapon", delay:1});
                                    }
                                }
                            }
                            _local2++;
                        }
                    }
                }
                break;
            case "gatling" : 
        }
    }
    function checkPathForCollision(x, y, xSpeed, ySpeed, hitCheckInterval, maxtime, lifetime) {
        lifetime = Math.min(maxtime, lifetime);
        t = 0;
        while (lifetime > 0) {
            i = 0;
            while (i < hitCheckInterval) {
                previousX = x;
                previousY = y;
                x = x + xSpeed;
                y = y + ySpeed;
                if (_root.game.mazemc.hitTest(_root.game._x + x, _root.game._y + y, true)) {
                    x = previousX;
                    y = previousY;
                    x = x - xSpeed;
                    y = y + ySpeed;
                    if (_root.game.mazemc.hitTest(_root.game._x + x, _root.game._y + y, true)) {
                        hitOnXInvert = true;
                    } else {
                        hitOnXInvert = false;
                    }
                    x = previousX;
                    y = previousY;
                    x = x + xSpeed;
                    y = y - ySpeed;
                    if (_root.game.mazemc.hitTest(_root.game._x + x, _root.game._y + y, true)) {
                        hitOnYInvert = true;
                    } else {
                        hitOnYInvert = false;
                    }
                    if (hitOnXInvert && (!hitOnYInvert)) {
                        ySpeed = -ySpeed;
                    } else if (hitOnYInvert && (!hitOnXInvert)) {
                        xSpeed = -xSpeed;
                    } else {
                        xSpeed = -xSpeed;
                        ySpeed = -ySpeed;
                    }
                    x = previousX;
                    y = previousY;
                    x = x + xSpeed;
                    y = y + ySpeed;
                    return({x:x, y:y, xSpeed:xSpeed, ySpeed:ySpeed, t:t});
                }
                i++;
            }
            lifetime--;
            t++;
        }
        return(undefined);
    }
    function checkBulletPath(angle) {
        var _local3 = myTank._x + (((Math.cos(((angle - 90) * Math.PI) / 180) * _root.SCALE) * 4.5) / 16);
        var _local2 = myTank._y + (((Math.sin(((angle - 90) * Math.PI) / 180) * _root.SCALE) * 4.5) / 16);
        var _local5 = (Math.cos(((angle - 90) * Math.PI) / 180) * _root.BULLETSPEED) * (_root.SCALE / 50);
        var _local4 = (Math.sin(((angle - 90) * Math.PI) / 180) * _root.BULLETSPEED) * (_root.SCALE / 50);
        var _local7 = _root.BULLETLIFETIME / 3;
        var _local11 = _root.BULLETDEADLY;
        var _local10 = _root.MOVIEWIDTH + _root.MOVIEHEIGHT;
        while (_local7 > 0) {
            i = 0;
            while (i < 1) {
                previousX = _local3;
                previousY = _local2;
                _local3 = _local3 + _local5;
                _local2 = _local2 + _local4;
                if (_root.game.mazemc.hitTest(_root.game._x + _local3, _root.game._y + _local2, true)) {
                    _local3 = previousX;
                    _local2 = previousY;
                    _local3 = _local3 - _local5;
                    _local2 = _local2 + _local4;
                    if (_root.game.mazemc.hitTest(_root.game._x + _local3, _root.game._y + _local2, true)) {
                        hitOnXInvert = true;
                    } else {
                        hitOnXInvert = false;
                    }
                    _local3 = previousX;
                    _local2 = previousY;
                    _local3 = _local3 + _local5;
                    _local2 = _local2 - _local4;
                    if (_root.game.mazemc.hitTest(_root.game._x + _local3, _root.game._y + _local2, true)) {
                        hitOnYInvert = true;
                    } else {
                        hitOnYInvert = false;
                    }
                    if (hitOnXInvert && (!hitOnYInvert)) {
                        _local4 = -_local4;
                    } else if (hitOnYInvert && (!hitOnXInvert)) {
                        _local5 = -_local5;
                    } else {
                        _local5 = -_local5;
                        _local4 = -_local4;
                    }
                    _local3 = previousX;
                    _local2 = previousY;
                    _local3 = _local3 + _local5;
                    _local2 = _local2 + _local4;
                }
                i++;
            }
            if (_local11 == 0) {
                var i = 0;
                while (i < _root.TANKS) {
                    if (_root.game["tank" + i].alive && (_root.game["tank" + i].hitTest(_root.game._x + _local3, _root.game._y + _local2, false))) {
                        if (_root.game["tank" + i].hitTest(_root.game._x + _local3, _root.game._y + _local2, true)) {
                            if (_root.game["tank" + i] == myTank) {
                                return({result:"SUICIDE", time:(_root.BULLETLIFETIME / 3) - _local7});
                            }
                            return({result:"HIT", time:(_root.BULLETLIFETIME / 3) - _local7});
                        }
                    } else if (_root.game["tank" + i].alive && (_root.game["tank" + i] != myTank)) {
                        var _local6 = Math.abs(_root.game["tank" + i].x - _local3) + Math.abs(_root.game["tank" + i].y - _local2);
                        if (_local6 < MAXCLOSESTDISTANCE) {
                            var _local8 = Math.floor(_local3 / _root.SCALE);
                            var _local9 = Math.floor(_local2 / _root.SCALE);
                            if (_root.distancesForMaze[_root.tankFields[i].x][_root.tankFields[i].y][_local8][_local9] <= MAXCLOSESTCELLDISTANCE) {
                                if (_local6 < _local10) {
                                    _local10 = _local6;
                                }
                            }
                        }
                    }
                    i++;
                }
            }
            if (_local11 > 0) {
                _local11--;
            }
            _local7--;
        }
        return({result:"NOTHING", time:_root.BULLETLIFETIME / 3, closest:_local10});
    }
    function pushActionsToFollowPath(path) {
        _root.drawPath(path);
        var _local2 = path.length - 1;
        while (_local2 >= 1) {
            myActionsForGoal.push({action:"driveToField", x:path[_local2].x, y:path[_local2].y});
            _local2--;
        }
        if (path.length > 1) {
            var _local6 = myTank._rotation;
            var _local5;
            var _local4 = {x:((path[1].x + 0.5) * _root.SCALE) - myTank._x, y:((path[1].y + 0.5) * _root.SCALE) - myTank._y};
            if (_local4.x != 0) {
                if (_local4.x > 0) {
                    _local5 = 90 + ((Math.atan(_local4.y / _local4.x) * 180) / Math.PI);
                } else {
                    _local5 = -90 + ((Math.atan(_local4.y / _local4.x) * 180) / Math.PI);
                }
            } else if (_local4.y > 0) {
                _local5 = 180;
            } else if (_local4.y < 0) {
                _local5 = 0;
            } else {
                _local5 = _local6;
            }
        }
        myActionsForGoal.push({action:"driveToPos", x:(path[0].x + 0.5) * _root.SCALE, y:(path[0].y + 0.5) * _root.SCALE, canReverse:path.length <= 2});
    }
    function makeDecisionsAndUpdateGoal() {
        if (myGoal.period > 0) {
            myGoal.period--;
            return(myGoal.updateContinuously);
        }
        myGoal.priority = myGoal.priority * 0.9;
        oldGoal = myGoal;
        var _local6 = Math.floor(myTank._x / _root.SCALE);
        var _local7 = Math.floor(myTank._y / _root.SCALE);
        if ((_root.aliveCount > 1) && (myTank.currentWeapon == "bullet")) {
            var _local25 = new Array();
            for (var _local44 in _root.game.mazebg) {
                if ((substring(_local44, 0, 5)) == "crate") {
                    _local25.push(_root.game.mazebg[_local44]);
                }
            }
            var _local37 = MAXCELLDISTTOGOFORCRATE;
            var _local46 = {priority:0};
            var _local8 = 0;
            while (_local8 < _local25.length) {
                var _local23 = _local25[_local8];
                var _local22 = Math.floor(_local23._x / _root.SCALE);
                var _local21 = Math.floor(_local23._y / _root.SCALE);
                var _local53 = _root.distancesForMaze[_local6][_local7][_local22][_local21];
                if (_local53 <= _local37) {
                    _local37 = _local53;
                    _local46 = {goal:"goForCrate", x:_local22, y:_local21, period:10, priority:((((MAXCELLDISTTOGOFORCRATE - _local53) / MAXCELLDISTTOGOFORCRATE) * GREEDY) * (_root.settingsMaxBullets - myTank.bulletsFired)) / _root.settingsMaxBullets, updateContinuously:false, id:goalId++};
                }
                _local8++;
            }
            updateGoal(_local46);
        }
        var _local41 = new Array();
        for (var _local45 in _root.game) {
            if ((substring(_local45, 0, 6)) == "bullet") {
                _local41.push(_root.game[_local45]);
            }
        }
        var _local46 = dodgeTrajectories(_local6, _local7, _local41, MAXTIMETODODGEBULLET, MAXDISTTODODGEBULLET, MAXCELLDISTTODODGEBULLET, _root.BULLETHITCHECKINTERVALS, true);
        updateGoal(_local46);
        var _local26 = new Array();
        var _local42 = new Array();
        for (var _local43 in _root.game) {
            if ((substring(_local43, 0, 4)) == "frag") {
                if ((substring(_local43, 0, 12)) == "fragfragment") {
                    if (_root.game[_local43].active) {
                        _local42.push(_root.game[_local43]);
                    }
                } else {
                    _local26.push(_root.game[_local43]);
                }
            }
        }
        var _local15 = MAXCELLDISTTODODGEFRAGBOMB;
        var _local8 = 0;
        while (_local8 < _local26.length) {
            var _local17 = _local26[_local8];
            var _local32 = Math.floor(_local17.x / _root.SCALE);
            var _local30 = Math.floor(_local17.y / _root.SCALE);
            var _local53 = _root.distancesForMaze[_local6][_local7][_local32][_local30];
            if (_local53 < _local15) {
                _local15 = _local53;
                _local46 = {goal:"dodgeFragbomb", frag:_local17, period:10, priority:1, updateContinuously:false, id:goalId++};
            }
            _local8++;
        }
        updateGoal(_local46);
        _local46 = dodgeTrajectories(_local6, _local7, _local42, MAXTIMETODODGEFRAGBOMBFRAGMENT, MAXDISTTODODGEFRAGBOMBFRAGMENT, MAXCELLDISTTODODGEFRAGBOMBFRAGMENT, _root.FRAGHITCHECKINTERVALS, false);
        updateGoal(_local46);
        _local41 = new Array();
        for (var _local45 in _root.game) {
            if ((substring(_local45, 0, 13)) == "gatlingBullet") {
                _local41.push(_root.game[_local45]);
            }
        }
        _local46 = dodgeTrajectories(_local6, _local7, _local41, MAXTIMETODODGEGATLINGBULLET, MAXDISTTODODGEGATLINGBULLET, MAXCELLDISTTODODGEGATLINGBULLET, _root.GATLINGHITCHECKINTERVALS, true);
        updateGoal(_local46);
        _local15 = MAXCELLDISTTODODGELASER;
        _local46 = {priority:0};
        _local8 = 0;
        while (_local8 < _root.TANKS) {
            if ((_root.game["tank" + _local8].alive && (_root.game["tank" + _local8].currentEquipment == "aimer")) && (_root.game["tank" + _local8] != myTank)) {
                var _local2 = _root.game["tank" + _local8].equipment;
                if (_local2.hit == myTank) {
                    _local15 = 0;
                    _local46 = {goal:"dodgeLaser", dir:{x:_local2.hitXSpeed, y:_local2.hitYSpeed}, owner:_root.game["tank" + _local8], period:10, priority:1, updateContinuously:false, id:goalId++};
                } else if (_local2.hit == undefined) {
                    var _local29 = Math.floor((_local2._x + _local2.x) / _root.SCALE);
                    var _local31 = Math.floor((_local2._y + _local2.y) / _root.SCALE);
                    var _local53 = _root.distancesForMaze[_local6][_local7][_local29][_local31];
                    if (_local53 <= _local15) {
                        var _local11 = checkPathForCollision(_local2._x + _local2.x, _local2._y + _local2.y, _local2.xSpeed, _local2.ySpeed, _root.AIMERHITCHECKINTERVALS, 12, 12);
                        if (_local11 != undefined) {
                            var _local10 = _local2._x + _local2.x;
                            var _local9 = _local2._y + _local2.y;
                            var _local13 = _local11.x;
                            var _local12 = _local11.y;
                            var _local27 = myTank.x;
                            var _local35 = myTank.y;
                            var _local34 = ((_local13 - _local10) * (_local13 - _local10)) + ((_local12 - _local9) * (_local12 - _local9));
                            var _local14 = (((_local27 - _local10) * (_local13 - _local10)) + ((_local35 - _local9) * (_local12 - _local9))) / _local34;
                            if ((_local14 > 0) && (_local14 < 1)) {
                                var _local28 = Math.floor((_local10 + (_local14 * (_local13 - _local10))) / _root.SCALE);
                                var _local36 = Math.floor((_local9 + (_local14 * (_local12 - _local9))) / _root.SCALE);
                                _local53 = _root.distancesForMaze[_local6][_local7][_local28][_local36];
                                if (_local53 <= _local15) {
                                    _local15 = _local53;
                                    _local46 = {goal:"dodgeLaser", dir:{x:_local11.xSpeed, y:_local11.ySpeed}, owner:_root.game["tank" + _local8], period:10, priority:1, updateContinuously:false, id:goalId++};
                                }
                            }
                        } else {
                            _local15 = _local53;
                            _local46 = {goal:"dodgeLaser", dir:{x:_local2.xSpeed, y:_local2.ySpeed}, owner:_root.game["tank" + _local8], period:10, priority:1, updateContinuously:false, id:goalId++};
                        }
                    }
                }
            }
            _local8++;
        }
        updateGoal(_local46);
        switch (myTank.currentWeapon) {
            case "bullet" : 
            case "laser" : 
                if ((myTank.bulletsFired < _root.settingsMaxBullets) || (myTank.currentWeapon == "laser")) {
                    _local8 = 0;
                    while (_local8 < _root.TANKS) {
                        if (_root.game["tank" + _local8].alive && (_root.game["tank" + _local8] != myTank)) {
                            var _local16 = _root.getShortestPathWithDistances(_root.maze, _root.distancesForMaze[_local6][_local7], _local6, _local7, _root.tankFields[_local8].x, _root.tankFields[_local8].y);
                            if (_local16.length < LONGESTPATHTOSHOOT) {
                                _local46 = {goal:"shootAfter", target:_root.game["tank" + _local8], period:10, priority:((_local16.length <= LONGESTPATHTONOTHESITATETOSHOOT) ? 1 : (((LONGESTPATHTOSHOOT - _local16.length) / LONGESTPATHTOSHOOT) * currentAggresiveness)), updateContinuously:false, id:goalId++};
                                updateGoal(_local46);
                            }
                        }
                        _local8++;
                    }
                }
                break;
            case "frag" : 
                if (!myTank.fragFired) {
                    _local8 = 0;
                    while (_local8 < _root.TANKS) {
                        if (_root.game["tank" + _local8].alive && (_root.game["tank" + _local8] != myTank)) {
                            var _local16 = _root.getShortestPathWithDistances(_root.maze, _root.distancesForMaze[_local6][_local7], _local6, _local7, _root.tankFields[_local8].x, _root.tankFields[_local8].y);
                            if (_local16.length < LONGESTPATHTOSHOOT) {
                                _local46 = {goal:"shootAfter", target:_root.game["tank" + _local8], period:10, priority:((_local16.length <= LONGESTPATHTONOTHESITATETOSHOOT) ? 1 : (((LONGESTPATHTOSHOOT - _local16.length) / LONGESTPATHTOSHOOT) * currentAggresiveness)), updateContinuously:false, id:goalId++};
                                updateGoal(_local46);
                            }
                        }
                        _local8++;
                    }
                } else {
                    var _local17 = myTank.lastFrag;
                    var _local19 = myTank.x - _local17.x;
                    var _local18 = myTank.y - _local17.y;
                    var _local53 = Math.sqrt((_local19 * _local19) + (_local18 * _local18));
                    var _local33 = checkPathForCollision(_local17.x, _local17.y, _local19 / _local53, _local18 / _local53, 1, Math.ceil(_local53), Math.ceil(_local53));
                    if ((_local33 != undefined) || (_local53 >= FRAGBOMBSAFETYDIST)) {
                        _local8 = 0;
                        while (_local8 < _root.TANKS) {
                            if (_root.game["tank" + _local8].alive && (_root.game["tank" + _local8] != myTank)) {
                                _local19 = _root.game["tank" + _local8].x - _local17.x;
                                _local18 = _root.game["tank" + _local8].y - _local17.y;
                                _local53 = Math.sqrt((_local19 * _local19) + (_local18 * _local18));
                                if (_local53 <= FRAGBOMBDETONATEDIST) {
                                    _local33 = checkPathForCollision(_local17.x, _local17.y, _local19 / _local53, _local18 / _local53, 1, Math.ceil(_local53), Math.ceil(_local53));
                                    if (_local33 == undefined) {
                                        _local46 = {goal:"detonate", period:1, priority:1, updateContiuously:false, id:goalId++};
                                        updateGoal(_local46);
                                    }
                                }
                            }
                            _local8++;
                        }
                    }
                }
                break;
            case "gatling" : 
                if (!myTank.gatlingReady) { 
                    break;
                }
                _local8 = 0;
                for(;;){
                    if (_local8 >= _root.TANKS) { 
                        break;
                    }
                    if (_root.game["tank" + _local8].alive && (_root.game["tank" + _local8] != myTank)) {
                        var _local16 = _root.getShortestPathWithDistances(_root.maze, _root.distancesForMaze[_local6][_local7], _local6, _local7, _root.tankFields[_local8].x, _root.tankFields[_local8].y);
                        if (_local16.length < LONGESTPATHTOSHOOT) {
                            _local46 = {goal:"sprayBullets", target:_root.game["tank" + _local8], period:15, priority:((_local16.length <= LONGESTPATHTONOTHESITATETOSHOOT) ? 1 : (((LONGESTPATHTOSHOOT - _local16.length) / LONGESTPATHTOSHOOT) * currentAggresiveness)), updateContinuously:false, id:goalId++};
                            updateGoal(_local46);
                        }
                    }
                    _local8++;
                };
        }
        if (((_root.aliveCount > 1) && (myTank.currentWeapon == "bullet")) && (myTank.bulletsFired == _root.settingsMaxBullets)) {
            var _local4 = new Array(_root.maze.length - 1);
            _local8 = 0;
            while (_local8 < _local4.length) {
                _local4[_local8] = new Array(_root.maze[_local8].length - 1);
                _local8++;
            }
            var _local5 = 0;
            while (_local5 < _local4.length) {
                var _local3 = 0;
                while (_local3 < _local4[0].length) {
                    _local4[_local5][_local3] = 0;
                    _local3++;
                }
                _local5++;
            }
            _local8 = 0;
            while (_local8 < _root.TANKS) {
                if ((_root.game["tank" + _local8].alive && (_root.game["tank" + _local8] != myTank)) && (_root.game["tank" + _local8].bulletsFired != _root.settingsMaxBullets)) {
                    var _local20 = _root.distancesForMaze[_root.tankFields[_local8].x][_root.tankFields[_local8].y];
                    _local5 = 0;
                    while (_local5 < _local4.length) {
                        var _local3 = 0;
                        while (_local3 < _local4[0].length) {
                            _local4[_local5][_local3] = _local4[_local5][_local3] + _local20[_local5][_local3];
                            _local3++;
                        }
                        _local5++;
                    }
                }
                _local8++;
            }
            if (_local4[_local6][_local7] < LONGESTPATHTORUN) {
                _local46 = {goal:"runAway", dist:_local4, period:10, priority:(((LONGESTPATHTORUN - _local4[_local6][_local7]) / LONGESTPATHTORUN) * COWARDNESS) * (myTank.bulletsFired / _root.settingsMaxBullets), updateContinuously:false, id:goalId++};
                updateGoal(_local46);
            }
        }
        if (myTank.hitSomething) {
            stuckTime = Math.min(stuckTime + 1, MAXSTUCKTIME);
        } else {
            stuckTime = 0;
        }
        _local46 = {goal:"backAway", period:5, priority:stuckTime / (MAXSTUCKTIME - 0.1), updateContinuously:false, id:goalId++};
        updateGoal(_local46);
        if (_root.aliveCount > 1) {
            var _local24 = random(_root.TANKS);
            while ((_root.game["tank" + _local24] == myTank) || (!_root.game["tank" + _local24].alive)) {
                _local24 = random(_root.TANKS);
            }
            if (_root.game["tank" + _local24] != myTank) {
                _local46 = {goal:"driveTo", period:10, priority:IDLEDRIVETOWARDENEMYPRIORITY, x:_root.tankFields[_local24].x, y:_root.tankFields[_local24].y, updateContinuously:false, id:goalId++};
                updateGoal(_local46);
            }
        }
        if (oldGoal.id != myGoal.id) {
            switch (myGoal.goal) {
                case "shootAfter" : 
                    trace("Goal: Shoot after " + myGoal.target);
                    currentAggresiveness = Math.max(0, currentAggresiveness - 0.2);
                    break;
                case "sprayBullets" : 
                    trace("Goal: Spray bullets at " + myGoal.target);
                    currentAggresiveness = Math.max(0, currentAggresiveness - 0.1);
                    break;
                case "detonate" : 
                    currentAggresiveness = Math.max(0, currentAggresiveness - 0.1);
                    break;
                case "runAway" : 
                    trace("Goal: Run away");
                    break;
                case "backAway" : 
                    break;
                case "driveTo" : 
                    trace((("Goal: Drive to " + myGoal.x) + ", ") + myGoal.y);
                    break;
                case "dodgeBullet" : 
                    trace((("Goal: Dodge bullet at " + myGoal.x) + ", ") + myGoal.y);
                    break;
                case "dodgeFragbomb" : 
                    break;
                case "dodgeLaser" : 
                    break;
                case "driveAfter" : 
                    break;
                case "goForCrate" : 
            }
            return(true);
        }
        currentAggresiveness = Math.min(AGGRESIVENESS, currentAggresiveness + (AGGRESIVENESS / 50));
        return(myGoal.updateContinuously);
    }
    function decideActionsToAchieveGoal() {
        myActionsForGoal = new Array();
        var _local9 = Math.floor(myTank._x / _root.SCALE);
        var _local10 = Math.floor(myTank._y / _root.SCALE);
        switch (myGoal.goal) {
            case "shootAfter" : 
                var _local6 = myTank._rotation;
                var _local11 = false;
                var _local8 = _root.BULLETLIFETIME;
                var _local5 = _root.MOVIEWIDTH + _root.MOVIEHEIGHT;
                var _local2 = myTank._rotation;
                var _local13 = myGoal.target.x - myTank.x;
                var _local12 = myGoal.target.y - myTank.y;
                var _local34 = Math.sqrt((_local13 * _local13) + (_local12 * _local12));
                var _local27 = checkPathForCollision(myTank.x, myTank.y, _local13 / _local34, _local12 / _local34, 1, Math.ceil(_local34), Math.ceil(_local34));
                if (_local27 == undefined) {
                    _local11 = true;
                    _local5 = 0;
                    if (_local13 != 0) {
                        if (_local13 > 0) {
                            _local6 = 90 + ((Math.atan(_local12 / _local13) * 180) / Math.PI);
                        } else {
                            _local6 = -90 + ((Math.atan(_local12 / _local13) * 180) / Math.PI);
                        }
                    } else if (_local12 > 0) {
                        _local6 = 180;
                    } else if (_local12 < 0) {
                        _local6 = 0;
                    } else {
                        _local6 = _local2;
                    }
                    trace("Set shot to be a direct hitter with angle " + _local6);
                }
                if (!_local11) {
                    var _local4 = 1;
                    while (_local4 <= 3) {
                        var _local3 = checkBulletPath(_local2);
                        if (_local3.result == "HIT") {
                            _local11 = true;
                            if (_local3.time < _local8) {
                                _local8 = _local3.time;
                                _local5 = 0;
                                _local6 = _local2;
                            }
                        } else if ((_local3.result == "NOTHING") && (!_local11)) {
                            if (_local3.closest < _local5) {
                                _local5 = _local3.closest;
                                _local6 = _local2;
                            }
                        }
                        if (Math.random() < 0.5) {
                            _local2 = _local2 + ((myTank.turnSpeed * _local4) * _local4);
                        } else {
                            _local2 = _local2 - ((myTank.turnSpeed * _local4) * _local4);
                        }
                        if (_local2 < -180) {
                            _local2 = 360 + _local2;
                        }
                        if (_local2 > 180) {
                            _local2 = _local2 - 360;
                        }
                        _local4++;
                    }
                }
                trace(myTank.currentWeapon);
                if (_local11 || (_local5 < (MAXCLOSESTDISTANCE / ((myTank.currentWeapon == "laser") ? 2 : 1)))) {
                    myActionsForGoal.push({action:"fireWeapon", delay:5});
                    myActionsForGoal.push({action:"turnTo", angle:_local6});
                } else if (_local6 != myTank._rotation) {
                    myActionsForGoal.push({action:"turnTo", angle:_local6});
                } else {
                    _local6 = myTank._rotation + 180;
                    if (_local6 > 180) {
                        _local6 = _local6 - 360;
                    }
                    myActionsForGoal.push({action:"turnTo", angle:_local6});
                }
                break;
            case "sprayBullets" : 
                _local6 = myTank._rotation;
                _local11 = false;
                _local8 = _root.GATLINGLIFETIME;
                _local5 = _root.MOVIEWIDTH + _root.MOVIEHEIGHT;
                _local2 = myTank._rotation;
                var _local4 = 1;
                while (_local4 <= 3) {
                    var _local3 = checkBulletPath(_local2);
                    if (_local3.result == "HIT") {
                        _local11 = true;
                        if (_local3.time < _local8) {
                            _local8 = _local3.time;
                            _local5 = 0;
                            _local6 = _local2;
                        }
                    } else if ((_local3.result == "NOTHING") && (!foundGoodShot)) {
                        if (_local3.closest < _local5) {
                            _local5 = _local3.closest;
                            _local6 = _local2;
                        }
                    }
                    if (Math.random() < 0.5) {
                        _local2 = _local2 + ((myTank.turnSpeed * _local4) * _local4);
                    } else {
                        _local2 = _local2 - ((myTank.turnSpeed * _local4) * _local4);
                    }
                    if (_local2 < -180) {
                        _local2 = 360 + _local2;
                    }
                    if (_local2 > 180) {
                        _local2 = _local2 - 360;
                    }
                    _local4++;
                }
                if (_local11 || (_local5 < MAXCLOSESTDISTANCE)) {
                    myActionsForGoal.push({action:"fireWeapon", delay:75});
                    myActionsForGoal.push({action:"turnTo", angle:_local6});
                } else if (_local6 != myTank._rotation) {
                    myActionsForGoal.push({action:"turnTo", angle:_local6});
                } else {
                    _local6 = myTank._rotation + 180;
                    if (_local6 > 180) {
                        _local6 = _local6 - 360;
                    }
                    myActionsForGoal.push({action:"turnTo", angle:_local6});
                }
                break;
            case "detonate" : 
                myActionsForGoal.push({action:"fireWeapon", delay:1});
                break;
            case "driveTo" : 
                var _local26 = _root.distancesForMaze[_local9][_local10];
                var _local16 = _root.getShortestPathWithDistances(_root.maze, _local26, _local9, _local10, myGoal.x, myGoal.y);
                pushActionsToFollowPath(_local16);
                break;
            case "runAway" : 
                _local26 = myGoal.dist;
                var _local7 = _root.followGradientPathWithDistancesAndDeadEnds(_root.maze, _local26, _root.deadEnds, _local9, _local10, 5);
                pushActionsToFollowPath(_local7);
                break;
            case "backAway" : 
                myActionsForGoal.push({action:"driveToPos", x:(_local9 + 0.5) * _root.SCALE, y:(_local10 + 0.5) * _root.SCALE, canReverse:false});
                if (myTank.expandedHitCheck(myTank.hitPointsFront, 1.1)) {
                    if (myTank.expandedHitCheck(myTank.hitPointsRear, 1.1)) {
                        if (myTank.expandedHitCheck(myTank.hitPointsLeft, 1.3)) {
                            myActionsForGoal.push({action:"backupAndTurn", dist:5, dir:"left"});
                        } else {
                            myActionsForGoal.push({action:"backupAndTurn", dist:5, dir:"right"});
                        }
                    } else {
                        myActionsForGoal.push({action:"backup", dist:3});
                    }
                } else if (myTank.expandedHitCheck(myTank.hitPointsRear, 1.1)) {
                    if (myTank.expandedHitCheck(myTank.hitPointsFront, 1.1)) {
                        if (myTank.expandedHitCheck(myTank.hitPointsLeft, 1.3)) {
                            myActionsForGoal.push({action:"backupAndTurn", dist:5, dir:"left"});
                        } else {
                            myActionsForGoal.push({action:"backupAndTurn", dist:5, dir:"right"});
                        }
                    } else {
                        myActionsForGoal.push({action:"forward", dist:3});
                    }
                } else {
                    myActionsForGoal.push({action:"backup", dist:3});
                }
                break;
            case "dodgeBullet" : 
                var _local21 = Math.floor(myGoal.x / _root.SCALE);
                var _local23 = Math.floor(myGoal.y / _root.SCALE);
                _local7 = _root.followGradientPathWithDistancesAndDeadEnds(_root.maze, _root.distancesForMaze[_local21][_local23], _root.deadEnds, _local9, _local10, 5);
                if (((myGoal.t < (myGoal.maxTime / 3)) && (myGoal.dist < (myGoal.maxDist / 5))) || (_local7.length <= 1)) {
                    _root.drawDir(myGoal.closest.x, myGoal.closest.y, myGoal.dir.x, myGoal.dir.y);
                    if ((_local7.length <= 1) && (!((myGoal.t < (myGoal.maxTime / 3)) && (myGoal.dist < (myGoal.maxDist / 5))))) {
                        trace("I was cornered!");
                    }
                    var _local31 = myTank._rotation;
                    if (myGoal.dir.x != 0) {
                        if (myGoal.dir.x > 0) {
                            _local6 = 90 + ((Math.atan(myGoal.dir.y / myGoal.dir.x) * 180) / Math.PI);
                        } else {
                            _local6 = -90 + ((Math.atan(myGoal.dir.y / myGoal.dir.x) * 180) / Math.PI);
                        }
                    } else if (myGoal.dir.y > 0) {
                        _local6 = 180;
                    } else if (myGoal.dir.y < 0) {
                        _local6 = 0;
                    } else {
                        _local6 = _local31;
                    }
                    if ((Math.abs(_local6 - _local31) > 90) && (Math.abs(_local6 - _local31) < 270)) {
                        _local6 = _local6 + 180;
                        if (_local6 > 180) {
                            _local6 = _local6 - 360;
                        }
                    }
                    _local6 = Math.round(_local6 / myTank.turnSpeed) * myTank.turnSpeed;
                    myActionsForGoal.push({action:"turnTo", angle:_local6});
                    if (myGoal.dist < (_root.SCALE / 4)) {
                        var _local20 = Math.sqrt((myGoal.dir.x * myGoal.dir.x) + (myGoal.dir.y * myGoal.dir.y));
                        var _local17 = {x:(-myGoal.dir.y) / _local20, y:myGoal.dir.x / _local20};
                        var _local15 = {x:myGoal.closest.x + ((_local17.x * _root.SCALE) / 2), y:myGoal.closest.y + ((_local17.y * _root.SCALE) / 2)};
                        var _local14 = {x:myGoal.closest.x - ((_local17.x * _root.SCALE) / 2), y:myGoal.closest.y - ((_local17.y * _root.SCALE) / 2)};
                        var _local28 = Math.sqrt(((myTank.x - _local15.x) * (myTank.x - _local15.x)) + ((myTank.y - _local15.y) * (myTank.y - _local15.y)));
                        var _local22 = Math.sqrt(((myTank.x - _local14.x) * (myTank.x - _local14.x)) + ((myTank.y - _local14.y) * (myTank.y - _local14.y)));
                        if (_local28 < _local22) {
                            myActionsForGoal.push({action:"driveToPos", x:_local15.x, y:_local15.y, canReverse:true});
                        } else {
                            myActionsForGoal.push({action:"driveToPos", x:_local14.x, y:_local14.y, canReverse:true});
                        }
                    }
                } else {
                    pushActionsToFollowPath(_local7);
                }
                tryToRetaliate();
                break;
            case "dodgeFragbomb" : 
                var _local19 = Math.floor(myGoal.frag.x / _root.SCALE);
                var _local18 = Math.floor(myGoal.frag.y / _root.SCALE);
                _local7 = _root.followGradientPathWithDistancesAndDeadEnds(_root.maze, _root.distancesForMaze[_local19][_local18], _root.deadEnds, _local9, _local10, 5);
                if (_local7.length > 1) {
                    pushActionsToFollowPath(_local7);
                } else {
                    _local7 = _root.followGradientPathWithDistances(_root.maze, _root.distancesForMaze[_local19][_local18], _local9, _local10, 5);
                    pushActionsToFollowPath(_local7);
                }
                tryToRetaliate();
                break;
            case "dodgeLaser" : 
                var _local25 = Math.floor(myGoal.owner.x / _root.SCALE);
                var _local24 = Math.floor(myGoal.owner.y / _root.SCALE);
                _local7 = _root.followGradientPathWithDistancesAndDeadEnds(_root.maze, _root.distancesForMaze[_local25][_local24], _root.deadEnds, _local9, _local10, 2);
                pushActionsToFollowPath(_local7);
                tryToRetaliate();
                break;
            case "goForCrate" : 
                _local26 = _root.distancesForMaze[_local9][_local10];
                _local16 = _root.getShortestPathWithDistances(_root.maze, _local26, _local9, _local10, myGoal.x, myGoal.y);
                myActionsForGoal.push({action:"driveToPos", x:(_local16[_local16.length - 1].x + 0.5) * _root.SCALE, y:(_local16[_local16.length - 1].y + 0.5) * _root.SCALE, canReverse:true});
                pushActionsToFollowPath(_local16);
                break;
            case "idle" : 
                myActionsForGoal.push({action:"idle"});
        }
    }
    function setInputToDoActions() {
        var _local6 = Math.floor(myTank._x / _root.SCALE);
        var _local7 = Math.floor(myTank._y / _root.SCALE);
        action = myActionsForGoal.pop();
        switch (action.action) {
            case "driveToField" : 
                if ((Math.abs(myTank._x - ((action.x + 0.5) * _root.SCALE)) > (_root.SCALE / 3)) || (Math.abs(myTank._y - ((action.y + 0.5) * _root.SCALE)) > (_root.SCALE / 3))) {
                    myActionsForGoal.push(action);
                }
                break;
            case "turnTo" : 
                if (Math.abs(myTank._rotation - action.angle) >= myTank.turnSpeed) {
                    myActionsForGoal.push(action);
                }
                break;
            case "fireWeapon" : 
                if (action.delay != 0) {
                    action.delay--;
                    myActionsForGoal.push(action);
                }
                break;
            case "driveToPos" : 
                if ((Math.abs(myTank._x - action.x) > (_root.SCALE / 4)) || (Math.abs(myTank._y - action.y) > (_root.SCALE / 4))) {
                    myActionsForGoal.push(action);
                }
                break;
            case "forward" : 
                if (action.dist != 0) {
                    action.dist--;
                    myActionsForGoal.push(action);
                }
                break;
            case "forwardAndTurn" : 
                if (action.dist != 0) {
                    action.dist--;
                    myActionsForGoal.push(action);
                }
            case "backup" : 
                if (action.dist != 0) {
                    action.dist--;
                    myActionsForGoal.push(action);
                }
                break;
            case "backupAndTurn" : 
                if (action.dist != 0) {
                    action.dist--;
                    myActionsForGoal.push(action);
                }
                break;
            case "idle" : 
                myActionsForGoal.push(action);
        }
        action = myActionsForGoal[myActionsForGoal.length - 1];
        switch (action.action) {
            case "driveToField" : 
                var _local3 = myTank._rotation;
                var _local2;
                if (_local6 > action.x) {
                    _local2 = -90;
                } else if (_local6 < action.x) {
                    _local2 = 90;
                } else if (_local7 > action.y) {
                    _local2 = 0;
                } else if (_local7 < action.y) {
                    _local2 = 180;
                } else {
                    _local2 = _local3;
                }
                if (_local2 > _local3) {
                    if (Math.abs(_local2 - _local3) > 180) {
                        myTank.turnLeft = true;
                        myTank.turnRight = false;
                    } else {
                        myTank.turnLeft = false;
                        myTank.turnRight = true;
                    }
                } else if (_local2 < _local3) {
                    if (Math.abs(_local2 - _local3) > 180) {
                        myTank.turnLeft = false;
                        myTank.turnRight = true;
                    } else {
                        myTank.turnLeft = true;
                        myTank.turnRight = false;
                    }
                } else {
                    myTank.turnLeft = false;
                    myTank.turnRight = false;
                }
                if ((Math.abs(_local2 - _local3) > 90) && (Math.abs(_local2 - _local3) < 270)) {
                    myTank.forward = false;
                    myTank.backup = false;
                } else {
                    myTank.forward = true;
                    myTank.backup = false;
                }
                myTank.fire = false;
                break;
            case "turnTo" : 
                _local3 = myTank._rotation;
                _local2 = action.angle;
                if (_local2 > _local3) {
                    if (Math.abs(_local2 - _local3) > 180) {
                        myTank.turnLeft = true;
                        myTank.turnRight = false;
                    } else {
                        myTank.turnLeft = false;
                        myTank.turnRight = true;
                    }
                } else if (_local2 < _local3) {
                    if (Math.abs(_local2 - _local3) > 180) {
                        myTank.turnLeft = false;
                        myTank.turnRight = true;
                    } else {
                        myTank.turnLeft = true;
                        myTank.turnRight = false;
                    }
                } else {
                    myTank.turnLeft = false;
                    myTank.turnRight = false;
                }
                myTank.forward = false;
                myTank.backup = false;
                myTank.fire = false;
                break;
            case "fireWeapon" : 
                myTank.turnLeft = false;
                myTank.turnRight = false;
                myTank.forward = false;
                myTank.backup = false;
                myTank.fire = true;
                break;
            case "driveToPos" : 
                _local3 = myTank._rotation;
                var _local5 = false;
                var _local4 = {x:action.x - myTank._x, y:action.y - myTank._y};
                if (_local4.x != 0) {
                    if (_local4.x > 0) {
                        _local2 = 90 + ((Math.atan(_local4.y / _local4.x) * 180) / Math.PI);
                    } else {
                        _local2 = -90 + ((Math.atan(_local4.y / _local4.x) * 180) / Math.PI);
                    }
                } else if (_local4.y > 0) {
                    _local2 = 180;
                } else if (_local4.y < 0) {
                    _local2 = 0;
                } else {
                    _local2 = _local3;
                }
                _local2 = myTank.turnSpeed * Math.round(_local2 / myTank.turnSpeed);
                if (action.canReverse) {
                    if ((Math.abs(_local2 - _local3) > 90) && (Math.abs(_local2 - _local3) < 270)) {
                        _local5 = true;
                        _local2 = _local2 + 180;
                        if (_local2 > 180) {
                            _local2 = _local2 - 360;
                        }
                    }
                }
                if (_local2 > _local3) {
                    if (Math.abs(_local2 - _local3) > 180) {
                        myTank.turnLeft = ((Math.abs(_local2 - _local3) >= (360 - myTank.turnSpeed)) ? false : true);
                        myTank.turnRight = false;
                    } else {
                        myTank.turnLeft = false;
                        myTank.turnRight = ((Math.abs(_local2 - _local3) <= myTank.turnSpeed) ? false : true);
                    }
                } else if (_local2 < _local3) {
                    if (Math.abs(_local2 - _local3) > 180) {
                        myTank.turnLeft = false;
                        myTank.turnRight = ((Math.abs(_local2 - _local3) >= (360 - myTank.turnSpeed)) ? false : true);
                    } else {
                        myTank.turnLeft = ((Math.abs(_local2 - _local3) <= myTank.turnSpeed) ? false : true);
                        myTank.turnRight = false;
                    }
                } else {
                    myTank.turnLeft = false;
                    myTank.turnRight = false;
                }
                if ((Math.abs(_local2 - _local3) > 45) && (Math.abs(_local2 - _local3) < 315)) {
                    myTank.forward = false;
                    myTank.backup = false;
                } else {
                    myTank.forward = !_local5;
                    myTank.backup = _local5;
                }
                myTank.fire = false;
                break;
            case "forward" : 
                myTank.turnLeft = false;
                myTank.turnRight = false;
                myTank.forward = true;
                myTank.backup = false;
                myTank.fire = false;
                break;
            case "forwardAndTurn" : 
                myTank.turnLeft = action.dir == "left";
                myTank.turnRight = action.dir == "right";
                myTank.forward = true;
                myTank.backup = false;
                myTank.fire = false;
                break;
            case "backup" : 
                myTank.turnLeft = false;
                myTank.turnRight = false;
                myTank.forward = false;
                myTank.backup = true;
                myTank.fire = false;
                break;
            case "backupAndTurn" : 
                myTank.turnLeft = action.dir == "left";
                myTank.turnRight = action.dir == "right";
                myTank.forward = false;
                myTank.backup = true;
                myTank.fire = false;
                break;
            case "idle" : 
                myTank.turnLeft = false;
                myTank.turnRight = false;
                myTank.forward = false;
                myTank.backup = false;
                myTank.fire = false;
                break;
            default : 
                myTank.turnLeft = false;
                myTank.turnRight = false;
                myTank.forward = false;
                myTank.backup = false;
                myTank.fire = false;
                myGoal.period = 0;
        }
    }
    var myTank;
    var myGoal = {goal:"idle", priority:0, period:15, id:0, updateContinuously:true};
    var myActionsForGoal;
    AGGRESIVENESS = 0.5;
    COWARDNESS = 0.7;
    GREEDY = 1;
    LONGESTPATHTOSHOOT = 7;
    LONGESTPATHTONOTHESITATETOSHOOT = 2;
    FRAGBOMBSAFETYDIST = 3 * _root.SCALE;
    FRAGBOMBDETONATEDIST = 3 * _root.SCALE;
    LONGESTPATHTORUN = 10;
    MAXSTUCKTIME = 1;
    stuckTime = 0;
    currentAggresiveness = AGGRESIVENESS;
    IDLEDRIVETOWARDENEMYPRIORITY = 0.1;
    IDLEDRIVEPRIORITY = 0.1;
    MAXCLOSESTCELLDISTANCE = 2;
    MAXCLOSESTDISTANCE = _root.SCALE * MAXCLOSESTCELLDISTANCE;
    MAXTIMETODODGEBULLET = 75;
    MAXDISTTODODGEBULLET = 4 * _root.SCALE;
    MAXCELLDISTTODODGEBULLET = (MAXTIMETODODGEBULLET * _root.BULLETSPEED) / 50;
    MAXCELLDISTTODODGEFRAGBOMB = 5;
    MAXTIMETODODGEFRAGBOMBFRAGMENT = 50;
    MAXDISTTODODGEFRAGBOMBFRAGMENT = 3 * _root.SCALE;
    MAXCELLDISTTODODGEFRAGBOMBFRAGMENT = (MAXTIMETODODGEFRAGBOMBFRAGMENT * (_root.FRAGSPEED + 4)) / 50;
    MAXTIMETODODGEGATLINGBULLET = 75;
    MAXDISTTODODGEGATLINGBULLET = 3 * _root.SCALE;
    MAXCELLDISTTODODGEGATLINGBULLET = (MAXTIMETODODGEGATLINGBULLET * _root.GATLINGSPEED) / 50;
    MAXCELLDISTTODODGELASER = 2;
    MAXCELLDISTTOGOFORCRATE = 10;
    var goalId = 1;
﻿
//----------------------------------------------------------------------
//Frame 31
//----------------------------------------------------------------------
    function createTankIcon(playerNum) {
        ti = _root.attachMovie("tankIcon", "tankIcon" + playerNum, _root.getNextHighestDepth());
        if (playerNum == 1) {
            ti.x = 356;
        } else {
            ti.x = 256;
        }
        ti.y = 315;
        ti._x = ti.x;
        ti._y = ti.y;
        if (playerNum == 1) {
            ti._alpha = 100;
        } else {
            ti._alpha = 0;
        }
        ti.num = playerNum;
        ti.stop();
        new Color(ti.baseBackground).setRGB(_root.loginInfo[("p" + playerNum) + "bc"]);
        new Color(ti.turretBackground).setRGB(_root.loginInfo[("p" + playerNum) + "tc"]);
        ti.onEnterFrame = function () {
            if (this.num == _root.currentPlayerToSelect) {
                if (this.x < 356) {
                    this.x = this.x - ((this.x - 356) * 0.4);
                }
                if (this._alpha < 100) {
                    this._alpha = this._alpha + 20;
                }
            } else if (this.num < _root.currentPlayerToSelect) {
                if (this.x < 456) {
                    this.x = this.x - ((this.x - 456) * 0.4);
                    if (this._alpha > 0) {
                        this._alpha = this._alpha - 20;
                    }
                } else {
                    this.removeMovieClip();
                }
            }
            this._y = this.y;
            this._x = this.x;
        };
    }
    stop();
    control1Taken = false;
    contro21Taken = false;
    contro31Taken = false;
    _root.loginInfo.controlNumToPlayerNum = new Array(_root.loginInfo.numUsers);
    _root.loginInfo.playerNumToControlNum = new Array(_root.loginInfo.numUsers);
    var currentPlayerToSelect = 1;
    messageText.text = _root.loginInfo.p1n + ",\nchoose your controls!";
    var i = 0;
    while (i < _root.loginInfo.numUsers) {
        createTankIcon(i + 1);
        i++;
    }
    onEnterFrame = function () {
        if (currentPlayerToSelect > _root.loginInfo.numUsers) {
            Key.removeListener(this);
            onMouseDown = undefined;
            play();
            _root.TANKS = _root.loginInfo.numUsers;
            _root.onEnterFrame = undefined;
            messageText.text = "";
        } else {
            messageText.text = _root.loginInfo[("p" + currentPlayerToSelect) + "n"] + ",\nchoose your controls!";
        }
    };
    onKeyDown = function () {
        if (Key.getCode() == 81) {
            if (!control1Taken) {
                if (_root.soundOn) {
                    _root.soundClick.start();
                }
                control1Taken = true;
                var _local2 = new Color(controls1.background);
                _local2.setRGB(_root.loginInfo[("p" + currentPlayerToSelect) + "bc"]);
                controls1.fireButton.gotoAndStop(1);
                _local2 = new Color(controls1.fireButton.background);
                _local2.setRGB(_root.loginInfo[("p" + currentPlayerToSelect) + "tc"]);
                controls1.playerName.text = _root.loginInfo[("p" + currentPlayerToSelect) + "n"];
                controls1.activateText.text = "";
                _root.loginInfo.controlNumToPlayerNum[0] = currentPlayerToSelect;
                _root.loginInfo.playerNumToControlNum[currentPlayerToSelect - 1] = 0;
                currentPlayerToSelect++;
            }
        }
        if (Key.getCode() == 77) {
            if (!control2Taken) {
                if (_root.soundOn) {
                    _root.soundClick.start();
                }
                control2Taken = true;
                var _local2 = new Color(controls2.background);
                _local2.setRGB(_root.loginInfo[("p" + currentPlayerToSelect) + "bc"]);
                controls2.fireButton.gotoAndStop(1);
                _local2 = new Color(controls2.fireButton.background);
                _local2.setRGB(_root.loginInfo[("p" + currentPlayerToSelect) + "tc"]);
                controls2.playerName.text = _root.loginInfo[("p" + currentPlayerToSelect) + "n"];
                controls2.activateText.text = "";
                _root.loginInfo.controlNumToPlayerNum[1] = currentPlayerToSelect;
                _root.loginInfo.playerNumToControlNum[currentPlayerToSelect - 1] = 1;
                currentPlayerToSelect++;
            }
        }
    };
    Key.addListener(this);
    onMouseDown = function () {
        if (!control3Taken) {
            if (_root.soundOn) {
                _root.soundClick.start();
            }
            control3Taken = true;
            var _local2 = new Color(controls3.background);
            _local2.setRGB(_root.loginInfo[("p" + currentPlayerToSelect) + "bc"]);
            controls3.fireButton.gotoAndStop(1);
            _local2 = new Color(controls3.fireButton.background);
            _local2.setRGB(_root.loginInfo[("p" + currentPlayerToSelect) + "tc"]);
            controls3.playerName.text = _root.loginInfo[("p" + currentPlayerToSelect) + "n"];
            controls3.activateText.text = "";
            _root.loginInfo.controlNumToPlayerNum[2] = currentPlayerToSelect;
            _root.loginInfo.playerNumToControlNum[currentPlayerToSelect - 1] = 2;
            currentPlayerToSelect++;
        }
    };

﻿
//----------------------------------------------------------------------
//Instance of Symbol 222 MovieClip "player3Controls" in Frame 19
//----------------------------------------------------------------------
onClipEvent (load) {
    gotoAndStop (3);
    playerName.text = "Player 3";
    activateText.text = "Press left";
}
﻿
//----------------------------------------------------------------------
//Symbol 130 MovieClip [aimer] Frame 1
//----------------------------------------------------------------------
    function hitCheck(mc, point) {
        localToGlobal(point);
        if (mc.hitTest(point.x, point.y, true)) {
            return(true);
        }
        return(false);
    }
    var linePoints = new Array();
    onEnterFrame = function () {
        if (_root.frozen) {
            return(undefined);
        }
        if (!owner.alive) {
            this.removeMovieClip();
        }
        clear();
        lineStyle(1 * (_root.SCALE / 50), aimerColor, 100);
        moveTo(0, 0);
        _x  = (owner._x + (((Math.cos(((owner._rotation - 90) * Math.PI) / 180) * _root.SCALE) * 4.5) / 16));
        _y  = (owner._y + (((Math.sin(((owner._rotation - 90) * Math.PI) / 180) * _root.SCALE) * 4.5) / 16));
        x = 0;
        y = 0;
        active = _root.AIMERACTIVE;
        xSpeed = ((Math.cos(((owner._rotation - 90) * Math.PI) / 180) * _root.AIMERLENGTH) / _root.AIMERHITCHECKINTERVALS) * (_root.SCALE / 50);
        ySpeed = ((Math.sin(((owner._rotation - 90) * Math.PI) / 180) * _root.AIMERLENGTH) / _root.AIMERHITCHECKINTERVALS) * (_root.SCALE / 50);
        hit = undefined;
        hitXSpeed = 0;
        hitYSpeed = 0;
        j = 0;
        while (j < _root.AIMERHITCHECKINTERVALS) {
            previousX = x;
            previousY = y;
            x = x + xSpeed;
            y = y + ySpeed;
            if (hitCheck(_root.game.mazemc, {x:x, y:y})) {
                x = previousX;
                y = previousY;
                x = x - xSpeed;
                y = y + ySpeed;
                if (hitCheck(_root.game.mazemc, {x:x, y:y})) {
                    hitOnXInvert = true;
                } else {
                    hitOnXInvert = false;
                }
                x = previousX;
                y = previousY;
                x = x + xSpeed;
                y = y - ySpeed;
                if (hitCheck(_root.game.mazemc, {x:x, y:y})) {
                    hitOnYInvert = true;
                } else {
                    hitOnYInvert = false;
                }
                if (hitOnXInvert && (!hitOnYInvert)) {
                    ySpeed = -ySpeed;
                } else if (hitOnYInvert && (!hitOnXInvert)) {
                    xSpeed = -xSpeed;
                } else {
                    xSpeed = -xSpeed;
                    ySpeed = -ySpeed;
                }
                x = previousX;
                y = previousY;
                x = x + xSpeed;
                y = y + ySpeed;
            }
            if (active > 0) {
                active--;
            }
            if ((active == 0) && ((j % 2) == 0)) {
                var _local3 = 0;
                while (_local3 < _root.TANKS) {
                    if (_root.game["tank" + _local3].alive && (hitCheck(_root.game["tank" + _local3], {x:x, y:y}))) {
                        hit = _root.game["tank" + _local3];
                        hitXSpeed = xSpeed;
                        hitYSpeed = ySpeed;
                        j = _root.AIMERHITCHECKINTERVALS;
                    }
                    _local3++;
                }
            }
            if (Math.random() > 0.7) {
                lineStyle(3 * (_root.SCALE / 50), 0, 30);
                lineTo(x, y);
                lineStyle(2 * (_root.SCALE / 50), aimerColor, 100);
                moveTo(previousX, previousY);
                lineTo(x, y);
            } else {
                moveTo(x, y);
            }
            j++;
        }
    };
﻿
//----------------------------------------------------------------------
//Instance of Symbol 187 MovieClip "sound" in Frame 1
//----------------------------------------------------------------------
onClipEvent (load) {
    function toggleSound() {
        _root.soundOn = !_root.soundOn;
        this.gotoAndStop(1 + (_root.soundOn == true));
    }
    this.soundButton.tabEnabled = false;
    _root.soundOn = false;
    toggleSound();
    onMouseDown = function () {
        if (this.hitTest(_root._xmouse, _root._ymouse, true)) {
            this.toggleSound();
        }
    };
}
﻿
//----------------------------------------------------------------------
//Instance of Symbol 222 MovieClip "player1Controls" in Frame 7
//----------------------------------------------------------------------
onClipEvent (load) {
    gotoAndStop (1);
    playerName.text = "Player 1";
    activateText.text = "Press Q";
}
﻿
//----------------------------------------------------------------------
//Frame 41
//----------------------------------------------------------------------
    function createMaze(xsize, ysize) {
        maze = new Array(xsize);
        var _local2 = 0;
        while (_local2 < maze.length) {
            maze[_local2] = new Array(ysize);
            _local2++;
        }
        _local2 = 0;
        while (_local2 < maze.length) {
            var _local1 = 0;
            while (_local1 < maze[_local2].length) {
                maze[_local2][_local1] = Math.floor(Math.random() * 4);
                _local1++;
            }
            _local2++;
        }
        return(maze);
    }
    function calcReachable(maze, startx, starty) {
        var _local3 = new Array();
        var _local7 = new Array();
        var _local4 = new Array();
        _local4.push({x:startx, y:starty});
        while (_local4.length > 0) {
            var _local1 = _local4.pop();
            _local7.push(_local1);
            _local3[_local1.x + (_local1.y * maze.length)] = true;
            if (((maze[_local1.x][_local1.y] != 1) && (maze[_local1.x][_local1.y + 1] != 3)) && (_local1.x > 0)) {
                if (_local3[(_local1.x - 1) + (_local1.y * maze.length)] == undefined) {
                    _local3[(_local1.x - 1) + (_local1.y * maze.length)] = true;
                    _local4.push({x:_local1.x - 1, y:_local1.y});
                }
            }
            if (((maze[_local1.x + 1][_local1.y] != 1) && (maze[_local1.x + 1][_local1.y + 1] != 3)) && (_local1.x < (maze.length - 2))) {
                if (_local3[(_local1.x + 1) + (_local1.y * maze.length)] == undefined) {
                    _local3[(_local1.x + 1) + (_local1.y * maze.length)] = true;
                    _local4.push({x:_local1.x + 1, y:_local1.y});
                }
            }
            if (((maze[_local1.x][_local1.y] != 2) && (maze[_local1.x + 1][_local1.y] != 0)) && (_local1.y > 0)) {
                if (_local3[_local1.x + ((_local1.y - 1) * maze.length)] == undefined) {
                    _local3[_local1.x + ((_local1.y - 1) * maze.length)] = true;
                    _local4.push({x:_local1.x, y:_local1.y - 1});
                }
            }
            if (((maze[_local1.x][_local1.y + 1] != 2) && (maze[_local1.x + 1][_local1.y + 1] != 0)) && (_local1.y < (maze[_local1.x].length - 2))) {
                if (_local3[_local1.x + ((_local1.y + 1) * maze.length)] == undefined) {
                    _local3[_local1.x + ((_local1.y + 1) * maze.length)] = true;
                    _local4.push({x:_local1.x, y:_local1.y + 1});
                }
            }
        }
        return(_local7);
    }
    function findDeadEnds(maze, reachable) {
        var _local3 = new Array(maze.length - 1);
        var _local6 = 0;
        while (_local6 < _local3.length) {
            _local3[_local6] = new Array(maze[_local6].length - 1);
            _local6++;
        }
        var _local8 = new Array();
        _local6 = 0;
        while (_local6 < reachable.length) {
            _local8.push(reachable[_local6]);
            _local3[reachable[_local6].x][reachable[_local6].y] = 0;
            _local6++;
        }
        while (_local8.length > 0) {
            var _local1 = _local8.pop();
            if (_local3[_local1.x][_local1.y]) {
                continue;
            }
            var _local7;
            var _local5 = 0;
            var _local4 = MAXDEADENDPENALTY;
            if ((((maze[_local1.x][_local1.y] != 1) && (maze[_local1.x][_local1.y + 1] != 3)) && (_local1.x > 0)) && (!_local3[_local1.x - 1][_local1.y])) {
                _local7 = {x:_local1.x - 1, y:_local1.y};
                _local5++;
            } else if (((maze[_local1.x][_local1.y] != 1) && (maze[_local1.x][_local1.y + 1] != 3)) && (_local1.x > 0)) {
                _local4 = Math.max(1, Math.min(_local3[_local1.x - 1][_local1.y] - 1, _local4));
            }
            if ((((maze[_local1.x + 1][_local1.y] != 1) && (maze[_local1.x + 1][_local1.y + 1] != 3)) && (_local1.x < (maze.length - 2))) && (!_local3[_local1.x + 1][_local1.y])) {
                _local7 = {x:_local1.x + 1, y:_local1.y};
                _local5++;
            } else if (((maze[_local1.x + 1][_local1.y] != 1) && (maze[_local1.x + 1][_local1.y + 1] != 3)) && (_local1.x < (maze.length - 2))) {
                _local4 = Math.max(1, Math.min(_local3[_local1.x + 1][_local1.y] - 1, _local4));
            }
            if ((((maze[_local1.x][_local1.y] != 2) && (maze[_local1.x + 1][_local1.y] != 0)) && (_local1.y > 0)) && (!_local3[_local1.x][_local1.y - 1])) {
                _local7 = {x:_local1.x, y:_local1.y - 1};
                _local5++;
            } else if (((maze[_local1.x][_local1.y] != 2) && (maze[_local1.x + 1][_local1.y] != 0)) && (_local1.y > 0)) {
                _local4 = Math.max(1, Math.min(_local3[_local1.x][_local1.y - 1] - 1, _local4));
            }
            if ((((maze[_local1.x][_local1.y + 1] != 2) && (maze[_local1.x + 1][_local1.y + 1] != 0)) && (_local1.y < (maze[_local1.x].length - 2))) && (!_local3[_local1.x][_local1.y + 1])) {
                _local7 = {x:_local1.x, y:_local1.y + 1};
                _local5++;
            } else if (((maze[_local1.x][_local1.y + 1] != 2) && (maze[_local1.x + 1][_local1.y + 1] != 0)) && (_local1.y < (maze[_local1.x].length - 2))) {
                _local4 = Math.max(1, Math.min(_local3[_local1.x][_local1.y + 1] - 1, _local4));
            }
            if (_local5 == 1) {
                _local3[_local1.x][_local1.y] = _local4;
                _local8.push(_local7);
            }
            if (_local5 == 0) {
                _local3[_local1.x][_local1.y] = _local4;
            }
        }
        return(_local3);
    }
    function calcDistances(maze, startx, starty) {
        var _local3 = new Array(maze.length - 1);
        var _local6 = 0;
        while (_local6 < _local3.length) {
            _local3[_local6] = new Array(maze[_local6].length - 1);
            _local6++;
        }
        var _local4 = new Array();
        var _local5 = new Array();
        _local5.push({x:startx, y:starty});
        var _local7 = 0;
        _local3[startx][starty] = 0;
        while (_local7 < _local5.length) {
            var _local1 = _local5[_local7];
            _local7++;
            _local4[_local1.x + (_local1.y * maze.length)] = true;
            if (((maze[_local1.x][_local1.y] != 1) && (maze[_local1.x][_local1.y + 1] != 3)) && (_local1.x > 0)) {
                if (_local4[(_local1.x - 1) + (_local1.y * maze.length)] == undefined) {
                    _local4[(_local1.x - 1) + (_local1.y * maze.length)] = true;
                    _local3[_local1.x - 1][_local1.y] = _local3[_local1.x][_local1.y] + 1;
                    _local5.push({x:_local1.x - 1, y:_local1.y});
                }
            }
            if (((maze[_local1.x + 1][_local1.y] != 1) && (maze[_local1.x + 1][_local1.y + 1] != 3)) && (_local1.x < (maze.length - 2))) {
                if (_local4[(_local1.x + 1) + (_local1.y * maze.length)] == undefined) {
                    _local4[(_local1.x + 1) + (_local1.y * maze.length)] = true;
                    _local3[_local1.x + 1][_local1.y] = _local3[_local1.x][_local1.y] + 1;
                    _local5.push({x:_local1.x + 1, y:_local1.y});
                }
            }
            if (((maze[_local1.x][_local1.y] != 2) && (maze[_local1.x + 1][_local1.y] != 0)) && (_local1.y > 0)) {
                if (_local4[_local1.x + ((_local1.y - 1) * maze.length)] == undefined) {
                    _local4[_local1.x + ((_local1.y - 1) * maze.length)] = true;
                    _local3[_local1.x][_local1.y - 1] = _local3[_local1.x][_local1.y] + 1;
                    _local5.push({x:_local1.x, y:_local1.y - 1});
                }
            }
            if (((maze[_local1.x][_local1.y + 1] != 2) && (maze[_local1.x + 1][_local1.y + 1] != 0)) && (_local1.y < (maze[_local1.x].length - 2))) {
                if (_local4[_local1.x + ((_local1.y + 1) * maze.length)] == undefined) {
                    _local4[_local1.x + ((_local1.y + 1) * maze.length)] = true;
                    _local3[_local1.x][_local1.y + 1] = _local3[_local1.x][_local1.y] + 1;
                    _local5.push({x:_local1.x, y:_local1.y + 1});
                }
            }
        }
        return(_local3);
    }
    function getShortestPath(maze, startx, starty, endx, endy) {
        var _local1 = calcDistances(maze, startx, starty);
        return(getShortestPathWithDistances(maze, _local1, startx, starty, endx, endy));
    }
    function getShortestPathWithDistances(maze, distances, startx, starty, endx, endy) {
        var _local8 = new Array();
        var _local1 = endx;
        var _local2 = endy;
        var _local4 = distances[_local1][_local2];
        do {
            _local8.push({x:_local1, y:_local2});
            if ((((_local1 > 0) && (maze[_local1][_local2] != 1)) && (maze[_local1][_local2 + 1] != 3)) && (distances[_local1 - 1][_local2] < _local4)) {
                _local1--;
            } else if ((((_local1 < (maze.length - 2)) && (maze[_local1 + 1][_local2] != 1)) && (maze[_local1 + 1][_local2 + 1] != 3)) && (distances[_local1 + 1][_local2] < _local4)) {
                _local1++;
            } else if ((((_local2 > 0) && (maze[_local1][_local2] != 2)) && (maze[_local1 + 1][_local2] != 0)) && (distances[_local1][_local2 - 1] < _local4)) {
                _local2--;
            } else if ((((_local2 < (maze[_local1].length - 2)) && (maze[_local1][_local2 + 1] != 2)) && (maze[_local1 + 1][_local2 + 1] != 0)) && (distances[_local1][_local2 + 1] < _local4)) {
                _local2++;
            }
            _local4--;
        } while  ((_local1 != startx) || (_local2 != starty));
        _local8.reverse();
        return(_local8);
    }
    function followGradientPathWithDistances(maze, distances, startx, starty, maxLength) {
        var _local9 = new Array();
        var _local1 = startx;
        var _local2 = starty;
        var _local4 = distances[_local1][_local2];
        do {
            var foundPlace = false;
            if ((((_local1 > 0) && (maze[_local1][_local2] != 1)) && (maze[_local1][_local2 + 1] != 3)) && (distances[_local1 - 1][_local2] > _local4)) {
                _local1--;
                foundPlace = true;
            } else if ((((_local1 < (maze.length - 2)) && (maze[_local1 + 1][_local2] != 1)) && (maze[_local1 + 1][_local2 + 1] != 3)) && (distances[_local1 + 1][_local2] > _local4)) {
                _local1++;
                foundPlace = true;
            } else if ((((_local2 > 0) && (maze[_local1][_local2] != 2)) && (maze[_local1 + 1][_local2] != 0)) && (distances[_local1][_local2 - 1] > _local4)) {
                _local2--;
                foundPlace = true;
            } else if ((((_local2 < (maze[_local1].length - 2)) && (maze[_local1][_local2 + 1] != 2)) && (maze[_local1 + 1][_local2 + 1] != 0)) && (distances[_local1][_local2 + 1] > _local4)) {
                _local2++;
                foundPlace = true;
            }
            _local4++;
            _local9.push({x:_local1, y:_local2});
            maxLength--;
        } while  (foundPlace && (maxLength > 0));
        return(_local9);
    }
    function followGradientPathWithDistancesAndDeadEnds(maze, distances, deadEnds, startx, starty, maxLength) {
        var _local13 = new Array();
        var _local1 = startx;
        var _local2 = starty;
        var _local9 = distances[_local1][_local2] - deadEnds[_local1][_local2];
        do {
            var foundPlace = false;
            var _local3 = _local9;
            var _local8 = 0;
            var _local7 = 0;
            if ((((_local1 > 0) && (maze[_local1][_local2] != 1)) && (maze[_local1][_local2 + 1] != 3)) && ((distances[_local1 - 1][_local2] - deadEnds[_local1 - 1][_local2]) > _local3)) {
                _local3 = distances[_local1 - 1][_local2] - deadEnds[_local1 - 1][_local2];
                _local8 = -1;
                _local7 = 0;
                foundPlace = true;
            }
            if ((((_local1 < (maze.length - 2)) && (maze[_local1 + 1][_local2] != 1)) && (maze[_local1 + 1][_local2 + 1] != 3)) && ((distances[_local1 + 1][_local2] - deadEnds[_local1 + 1][_local2]) > _local3)) {
                _local3 = distances[_local1 + 1][_local2] - deadEnds[_local1 + 1][_local2];
                _local8 = 1;
                _local7 = 0;
                foundPlace = true;
            }
            if ((((_local2 > 0) && (maze[_local1][_local2] != 2)) && (maze[_local1 + 1][_local2] != 0)) && ((distances[_local1][_local2 - 1] - deadEnds[_local1][_local2 - 1]) > _local3)) {
                _local3 = distances[_local1][_local2 - 1] - deadEnds[_local1][_local2 - 1];
                _local8 = 0;
                _local7 = -1;
                foundPlace = true;
            }
            if ((((_local2 < (maze[_local1].length - 2)) && (maze[_local1][_local2 + 1] != 2)) && (maze[_local1 + 1][_local2 + 1] != 0)) && ((distances[_local1][_local2 + 1] - deadEnds[_local1][_local2 + 1]) > _local3)) {
                _local3 = distances[_local1][_local2 + 1] - deadEnds[_local1][_local2 + 1];
                _local8 = 0;
                _local7 = 1;
                foundPlace = true;
            }
            _local9 = _local3;
            _local1 = _local1 + _local8;
            _local2 = _local2 + _local7;
            _local13.push({x:_local1, y:_local2});
            maxLength--;
        } while  (foundPlace && (maxLength > 0));
        return(_local13);
    }
    function drawMaze(maze, scale) {
        _root.game.createEmptyMovieClip("mazebg", -1000);
        _root.game.createEmptyMovieClip("mazemc", _root.game.getNextHighestDepth());
        var mazeWidth = Math.floor((maze.length - 1) * scale);
        var mazeHeight = Math.floor((maze[0].length - 1) * scale);
        var lineThickness = Math.floor(scale / 16);
        var edgeThickness = 1;
        with (_root.game.mazebg) {
            lineStyle(undefined, 0, 100, true, "none", "square", "square");
            beginFill(0, 100);
            moveTo((-lineThickness) - edgeThickness, (-lineThickness) - edgeThickness);
            lineTo((mazeWidth + lineThickness) + edgeThickness, (-lineThickness) - edgeThickness);
            lineTo((mazeWidth + lineThickness) + edgeThickness, (mazeHeight + lineThickness) + edgeThickness);
            lineTo((-lineThickness) - edgeThickness, (mazeHeight + lineThickness) + edgeThickness);
            lineTo((-lineThickness) - edgeThickness, (-lineThickness) - edgeThickness);
            endFill();
            lineStyle(undefined, 0, 100, true, "none", "square", "square");
            beginFill(15132390, 100);
            moveTo(-lineThickness, -lineThickness);
            lineTo(mazeWidth + lineThickness, -lineThickness);
            lineTo(mazeWidth + lineThickness, mazeHeight + lineThickness);
            lineTo(-lineThickness, mazeHeight + lineThickness);
            lineTo(-lineThickness, -lineThickness);
            endFill();
        }
        with (_root.game.mazemc) {
            lineStyle(2 * lineThickness, 5066061, 100, true, "none", "square", "square");
            var x = 0;
            while (x < maze.length) {
                var y = 0;
                while (y < maze[x].length) {
                    moveTo(Math.floor(x * scale), Math.floor(y * scale));
                    if ((maze[x][y] == 0) && (x > 0)) {
                        lineTo(Math.floor((x - 1) * scale), Math.floor(y * scale));
                    }
                    if ((maze[x][y] == 1) && (y < (maze[x].length - 1))) {
                        lineTo(Math.floor(x * scale), Math.floor((y + 1) * scale));
                    }
                    if ((maze[x][y] == 2) && (x < (maze.length - 1))) {
                        lineTo(Math.floor((x + 1) * scale), Math.floor(y * scale));
                    }
                    if ((maze[x][y] == 3) && (y > 0)) {
                        lineTo(Math.floor(x * scale), Math.floor((y - 1) * scale));
                    }
                    y++;
                }
                x++;
            }
            moveTo(0, 0);
            lineTo(mazeWidth, 0);
            moveTo(mazeWidth, 0);
            lineTo(mazeWidth, mazeHeight);
            moveTo(mazeWidth, mazeHeight);
            lineTo(0, mazeHeight);
            moveTo(0, mazeHeight);
            lineTo(0, 0);
        }
    }
    function drawReachable(points) {
        _root.lineStyle(3, 43520);
        var _local2 = 0;
        while (_local2 < points.length) {
            _root.moveTo((points[_local2].x * 10) + 5, (points[_local2].y * 10) + 5);
            _root.lineTo((points[_local2].x * 10) + 5, (points[_local2].y * 10) + 6);
            _local2++;
        }
    }
    function drawTanks(tanks) {
        var _local2 = 0;
        while (_local2 < tanks.length) {
            _root.lineStyle(5, 5570560 * _local2);
            _root.moveTo((tanks[_local2].x * 10) + 5, (tanks[_local2].y * 10) + 5);
            _root.lineTo((tanks[_local2].x * 10) + 5, (tanks[_local2].y * 10) + 6);
            _local2++;
        }
    }
    function drawDeadEnds(deadEnds) {
        var _local3 = 0;
        while (_local3 < deadEnds.length) {
            var _local2 = 0;
            while (_local2 < deadEnds[_local3].length) {
                if (deadEnds[_local3][_local2]) {
                    var _local4 = 0;
                    while (_local4 < deadEnds[_local3][_local2]) {
                        _root.game.mazebg.lineStyle(3, 16711680);
                        _root.game.mazebg.moveTo((((_local3 + 0.5) * _root.SCALE) - ((4 * deadEnds[_local3][_local2]) / 2)) + (4 * _local4), (((_local2 + 0.5) * _root.SCALE) - ((2 * deadEnds[_local3][_local2]) / 2)) + (2 * _local4));
                        _root.game.mazebg.lineTo(((((_local3 + 0.5) * _root.SCALE) + 1) - ((4 * deadEnds[_local3][_local2]) / 2)) + (4 * _local4), (((_local2 + 0.5) * _root.SCALE) - ((2 * deadEnds[_local3][_local2]) / 2)) + (2 * _local4));
                        _local4++;
                    }
                } else if (deadEnds[_local3][_local2] != undefined) {
                    _root.game.mazebg.lineStyle(5, 65280);
                    _root.game.mazebg.moveTo((_local3 + 0.5) * _root.SCALE, (_local2 + 0.5) * _root.SCALE);
                    _root.game.mazebg.lineTo(((_local3 + 0.5) * _root.SCALE) + 1, (_local2 + 0.5) * _root.SCALE);
                }
                _local2++;
            }
            _local3++;
        }
    }
    function drawPath(path) {
        var _local5 = "path" + Math.random();
        _root.game.mazebg.createEmptyMovieClip(_local5, _root.game.mazebg.getNextHighestDepth());
        _root.game.mazebg[_local5].life = 25;
        _root.game.mazebg[_local5].lineStyle(5, 43520 + (Math.random() * 17408));
        _root.game.mazebg[_local5].moveTo((path[0].x + 0.5) * _root.SCALE, (path[0].y + 0.5) * _root.SCALE);
        var _local3 = 1;
        while (_local3 < path.length) {
            _root.game.mazebg[_local5].lineTo(((path[_local3].x + 0.625) - (Math.random() * 0.25)) * _root.SCALE, ((path[_local3].y + 0.625) - (Math.random() * 0.25)) * _root.SCALE);
            _local3++;
        }
        _root.game.mazebg[_local5].onEnterFrame = function () {
            this.life--;
            if (this.life < 0) {
                this.removeMovieClip();
            }
        };
    }
    function drawDir(x, y, xdir, ydir) {
        var _local3 = "dir" + Math.random();
        _root.game.mazebg.createEmptyMovieClip(_local3, _root.game.mazebg.getNextHighestDepth());
        _root.game.mazebg[_local3].life = 25;
        _root.game.mazebg[_local3].lineStyle(5, 16711680);
        _root.game.mazebg[_local3].moveTo(x, y);
        _root.game.mazebg[_local3].lineTo(x + 1, y);
        _root.game.mazebg[_local3].lineStyle(3, 16711680);
        _root.game.mazebg[_local3].lineTo(x + (xdir * 3), y + (ydir * 3));
        _root.game.mazebg[_local3].onEnterFrame = function () {
            this.life--;
            if (this.life < 0) {
                this.removeMovieClip();
            }
        };
    }
    function convertFromHexToRGB(c) {
        var _local1 = {};
        _local1.r = c >> 16;
        c = c ^ (_local1.r << 16);
        _local1.g = c >> 8;
        _local1.b = c ^ (_local1.g << 8);
        _local1.a = 100;
        return(_local1);
    }
    function deployTank(position, number, scale) {
        _root.game.attachMovie("tank", "tank" + number, _root.game.getNextHighestDepth());
        _root.game["tank" + number]._x = ((position.x + 0.5) * scale) + _root.game.mazemc._x;
        _root.game["tank" + number]._y = ((position.y + 0.5) * scale) + _root.game.mazemc._y;
        _root.game["tank" + number]._rotation = Math.floor(Math.random() * 32) * 11.25;
        _root.game["tank" + number]._xscale = 0.55 * scale;
        _root.game["tank" + number]._yscale = 0.55 * scale;
        _root.game["tank" + number].base.gotoAndStop(1);
        _root.game["tank" + number].turret.gotoAndStop(1);
        var _local6 = number;
        if (_root.loginInfo != undefined) {
            var _local10 = parseInt(_root.loginInfo[("p" + (number + 1)) + "bc"]);
            var _local9 = parseInt(_root.loginInfo[("p" + (number + 1)) + "tc"]);
            _root.game["tank" + number].baseColor = convertFromHexToRGB(_local10);
            _root.game["tank" + number].turretColor = convertFromHexToRGB(_local9);
            _root.game["tank" + number].username = _root.loginInfo[("p" + (number + 1)) + "n"];
            _local6 = _root.loginInfo.playerNumToControlNum[number];
            var _local4 = _root.game.createEmptyMovieClip("nameTag" + number, _root.game.getNextHighestDepth());
            _local4.trackTank = _root.game["tank" + number];
            _local4.lifetime = 50;
            _local4.name = _local4.createTextField("name", _local4.getNextHighestDepth(), 0, -20, 1, 1);
            _local4.name.autoSize = "left";
            _local4.name.text = _root.loginInfo[("p" + (number + 1)) + "n"];
            var _local5 = new TextFormat();
            _local5.bold = true;
            _local5.font = "eurostile";
            _local5.size = 18;
            _local5.color = parseInt(_root.loginInfo[("p" + (number + 1)) + "bc"]);
            _local4.name.embedFonts = true;
            _local4.name.setTextFormat(_local5);
            _local4._x = _local4.trackTank._x - (_local4.name._width / 2);
            _local4._y = Math.max(10, _local4.trackTank._y - (0.55 * scale));
            var _local7 = _local4.name.filters;
            _local7.push(new flash.filters.DropShadowFilter(3, 90, 0, 0.5, 5, 5));
            _local4.name.filters = _local7;
            _local4.onEnterFrame = function () {
                this._x = this.trackTank._x - (this.name._width / 2);
                this._y = Math.max(10, this.trackTank._y - (0.55 * scale));
                this.lifetime--;
                if (this.lifetime <= 0) {
                    this._alpha = this._alpha - 10;
                    if (this._alpha <= 0) {
                        this.removeMovieClip();
                    }
                }
                if (!this.trackTank.alive) {
                    this.lifetime = 0;
                }
            };
        } else {
            _root.game["tank" + number].baseColor = {r:((number == 0) ? 255 : 0), g:((number == 1) ? 255 : 0), b:((number == 2) ? 255 : 0), a:100};
            _root.game["tank" + number].turretColor = {r:((number == 0) ? 255 : 0), g:((number == 1) ? 255 : 0), b:((number == 2) ? 255 : 0), a:100};
        }
        switch (_local6) {
            case 0 : 
                _root.game["tank" + number].KEYTURNLEFT = 83;
                _root.game["tank" + number].KEYFORWARD = 69;
                _root.game["tank" + number].KEYTURNRIGHT = 70;
                _root.game["tank" + number].KEYBACKUP = 68;
                _root.game["tank" + number].KEYFIRE = 81;
                _root.game["tank" + number].mouseTank = false;
                break;
            case 1 : 
                _root.game["tank" + number].KEYTURNLEFT = 37;
                _root.game["tank" + number].KEYFORWARD = 38;
                _root.game["tank" + number].KEYTURNRIGHT = 39;
                _root.game["tank" + number].KEYBACKUP = 40;
                _root.game["tank" + number].KEYFIRE = 77;
                _root.game["tank" + number].mouseTank = false;
                break;
            case 2 : 
                _root.game["tank" + number].mouseTank = true;
                Mouse.hide();
                _root.attachMovie("scopeCross", "scopeCross", _root.getNextHighestDepth());
                _root.attachMovie("scopeCircle", "scopeCircle", _root.getNextHighestDepth());
                deltaX = _root.game.mazemc._xmouse - _root.game["tank" + number]._x;
                deltaY = _root.game.mazemc._ymouse - _root.game["tank" + number]._y;
                deltaLength = Math.sqrt(Math.pow(deltaX, 2) + Math.pow(deltaY, 2));
                _root.scopeCross._x = _root._xmouse;
                _root.scopeCross._y = _root._ymouse;
                if (deltaLength > 60) {
                    _root.scopeCircle._x = (_root.game._x + _root.game["tank" + number]._x) + ((deltaX / deltaLength) * 60);
                    _root.scopeCircle._y = (_root.game._y + _root.game["tank" + number]._y) + ((deltaY / deltaLength) * 60);
                } else {
                    _root.scopeCircle._x = _root._xmouse;
                    _root.scopeCircle._y = _root._ymouse;
                }
        }
        _root.game["tank" + number].scoreboard = _root[("player" + (number + 1)) + "ScoreBoard"];
        var _local8 = new Color(_root.game["tank" + number].base.background);
        _local8.setTint(_root.game["tank" + number].baseColor.r, _root.game["tank" + number].baseColor.g, _root.game["tank" + number].baseColor.b, _root.game["tank" + number].baseColor.a);
        _root.setEquipment(_root.game["tank" + number], "none");
        _root.setWeapon(_root.game["tank" + number], STARTWEAPON);
    }
    function destroyTank(number) {
        if (_root.soundOn) {
            _root.soundExplosion.start();
            _root.soundExplosion2.start();
        }
        _root.game["tank" + number].alive = false;
        _root.game["tank" + number]._visible = false;
        _root.aliveCount--;
        _root.endCount = _root.NUMBEROFFRAMESBEFOREEND;
        _root.shake = Math.max(_root.MAXSHAKE, _root.shake + 7);
        var _local5 = 0;
        while (_local5 < _root.NUMBEROFSMOKECLOUDS) {
            _root.game.createEmptyMovieClip((("smoke" + number) + "-") + _local5, _root.game.getNextHighestDepth());
            s = _root.game[(("smoke" + number) + "-") + _local5];
            s.lineStyle(15 * (_root.SCALE / 50), Math.round(random(4)) * 1118481, 40 + random(20));
            s.moveTo(0, 0);
            s.lineTo(0, 1);
            s.xspeed = ((Math.random() * 2) - 1) * (_root.SCALE / 50);
            s.yspeed = ((Math.random() * 2) - 1) * (_root.SCALE / 50);
            s.x = (_root.game["tank" + number]._x + (s.xspeed * (random(6) + 1))) + ((random(2) - 1) * (_root.SCALE / 50));
            s.y = (_root.game["tank" + number]._y + (s.yspeed * (random(6) + 1))) + ((random(2) - 1) * (_root.SCALE / 50));
            s._x = s.x;
            s._y = s.y;
            s.onEnterFrame = function () {
                if (_root.frozen) {
                    return(undefined);
                }
                this._xscale = this._xscale + 2;
                this._yscale = this._yscale + 2;
                this._alpha = this._alpha - (3 - (Math.random() * 2));
                this.xspeed = this.xspeed * 0.93;
                this.yspeed = this.yspeed * 0.93;
                this.x = this.x + this.xspeed;
                this.y = this.y + this.yspeed;
                this._x = this.x;
                this._y = this.y;
                if (this._alpha <= 0) {
                    this.removeMovieClip();
                }
            };
            _local5++;
        }
        _local5 = 0;
        while (_local5 < _root.NUMBEROFFRAGMENTS) {
            _root.game.mazebg.createEmptyMovieClip((("fragment" + number) + "-") + _local5, _root.game.mazebg.getNextHighestDepth());
            f = _root.game.mazebg[(("fragment" + number) + "-") + _local5];
            dir = (Math.random() * Math.PI) * 2;
            speed = (Math.random() * 3) + 1;
            f.xspeed = (Math.cos(dir) * (speed / 1.5)) * (_root.SCALE / 50);
            f.yspeed = (Math.sin(dir) * (speed / 1.5)) * (_root.SCALE / 50);
            f.rotspeed = (Math.random() * 120) - 60;
            f.active = true;
            f.smokenamebase = (("smoke-fragment" + number) + "-") + _local5;
            f.smokecounter = 0;
            f.hitPoints = new Array();
            f.lineStyle(1, 0, 100, false, "none");
            if (_root.loginInfo != undefined) {
                if (Math.random() > 0.4) {
                    f.beginFill(parseInt(_root.loginInfo[("p" + (number + 1)) + "bc"]), 100);
                } else {
                    f.beginFill(parseInt(_root.loginInfo[("p" + (number + 1)) + "tc"]), 100);
                }
            } else {
                switch (number) {
                    case 0 : 
                        f.beginFill(6684672 + (1118481 * random(5)), 100);
                        break;
                    case 1 : 
                        f.beginFill(26112 + (1118481 * random(5)), 100);
                        break;
                    case 2 : 
                        f.beginFill(102 + (1118481 * random(5)), 100);
                }
            }
            point1 = {x:random(10) - 5, y:random(10) - 5};
            point2 = {x:random(10) - 5, y:random(10) - 5};
            point3 = {x:random(10) - 5, y:random(10) - 5};
            point4 = {x:random(10) - 5, y:random(10) - 5};
            center = {x:(((point1.x + point2.x) + point3.x) + point4.x) / 4, y:(((point1.y + point2.y) + point3.y) + point4.y) / 4};
            f.moveTo((point1.x - center.x) * (_root.SCALE / 50), (point1.y - center.y) * (_root.SCALE / 50));
            f.lineTo((point2.x - center.x) * (_root.SCALE / 50), (point2.y - center.y) * (_root.SCALE / 50));
            f.hitPoints.push({x:(point2.x - center.x) * (_root.SCALE / 50), y:(point2.y - center.y) * (_root.SCALE / 50)});
            f.lineTo((point3.x - center.x) * (_root.SCALE / 50), (point3.y - center.y) * (_root.SCALE / 50));
            f.hitPoints.push({x:(point3.x - center.x) * (_root.SCALE / 50), y:(point3.y - center.y) * (_root.SCALE / 50)});
            f.lineTo((point4.x - center.x) * (_root.SCALE / 50), (point4.y - center.y) * (_root.SCALE / 50));
            f.hitPoints.push({x:(point4.x - center.x) * (_root.SCALE / 50), y:(point4.y - center.y) * (_root.SCALE / 50)});
            f.lineTo((point1.x - center.x) * (_root.SCALE / 50), (point1.y - center.y) * (_root.SCALE / 50));
            f.hitPoints.push({x:(point1.x - center.x) * (_root.SCALE / 50), y:(point1.y - center.y) * (_root.SCALE / 50)});
            f.endFill();
            f.spawnCounter = 0;
            f.x = _root.game["tank" + number]._x + (f.xspeed * (random(5) + 2));
            f.y = _root.game["tank" + number]._y + (f.yspeed * (random(5) + 2));
            f._x = f.x;
            f._y = f.y;
            f._rotation = random(360);
            f.onEnterFrame = function () {
                if (_root.frozen) {
                    return(undefined);
                }
                if (this.active) {
                    this.spawnCounter++;
                    if (this.spawnCounter % 3) {
                        _root.game.createEmptyMovieClip((this.smokenamebase + "-") + this.smokecounter, _root.game.getNextHighestDepth());
                        s = _root.game[(this.smokenamebase + "-") + this.smokecounter];
                        this.smokecounter++;
                        s.lineStyle(3 * (_root.SCALE / 50), Math.round(random(4)) * 1118481, 30);
                        s.moveTo(0, 0);
                        s.lineTo(0, 1);
                        s.xspeed = (Math.random() - 0.5) * (_root.SCALE / 50);
                        s.yspeed = (Math.random() - 0.5) * (_root.SCALE / 50);
                        s.x = this._x;
                        s.y = this._y;
                        s._x = s.x;
                        s._y = s.y;
                        s.onEnterFrame = function () {
                            if (_root.frozen) {
                                return(undefined);
                            }
                            this._xscale = this._xscale + 2;
                            this._yscale = this._yscale + 2;
                            this._alpha = this._alpha - (3 - (Math.random() * 3));
                            this.xspeed = this.xspeed * 0.9;
                            this.yspeed = this.yspeed * 0.9;
                            this.x = this.x + this.xspeed;
                            this.y = this.y + this.yspeed;
                            this._x = this.x;
                            this._y = this.y;
                            if (this._alpha <= 0) {
                                this.removeMovieClip();
                            }
                        };
                    }
                    this.x = this.x + this.xspeed;
                    this.y = this.y + this.yspeed;
                    this._x = this.x;
                    this._y = this.y;
                    this.xspeed = this.xspeed * 0.97;
                    this.yspeed = this.yspeed * 0.97;
                    this.rotspeed = this.rotspeed * 0.97;
                    this._rotation = this._rotation + this.rotspeed;
                    if (this.hitCheck(this.hitPoints)) {
                        this.active = false;
                    }
                }
                if ((!this.active) || ((Math.abs(this.xspeed) < 0.5) && (Math.abs(this.yspeed) < 0.5))) {
                    this._alpha = this._alpha - 5;
                }
                if (this._alpha <= 0) {
                    this.active = false;
                    this.removeMovieClip();
                }
            };
            f.hitCheck = function (points) {
                var _local3 = 0;
                while (_local3 < points.length) {
                    point = {x:points[_local3].x, y:points[_local3].y};
                    this.localToGlobal(point);
                    if (_root.game.mazemc.hitTest(point.x, point.y, true)) {
                        return(true);
                    }
                    _local3++;
                }
                return(false);
            };
            _local5++;
        }
    }
    function lockedControl(owner, weapon) {
        switch (weapon) {
            case "laser" : 
                return(!owner.laserReady);
            case "deathRay" : 
                return(!owner.deathRayReady);
            case "remote" : 
                return(owner.remoteControlling);
        }
        return(false);
    }
    function weaponReady(owner, weapon) {
        switch (weapon) {
            case "bullet" : 
                return(owner.bulletsFired < _root.settingsMaxBullets);
            case "laser" : 
                return(owner.laserReady);
            case "frag" : 
                return(true);
            case "gatling" : 
                return(owner.gatlingReady);
            case "homing" : 
                return(owner.homingReady);
            case "remote" : 
                return(!owner.remoteControlling);
            case "electric" : 
                return(owner.electricReady);
            case "deathRay" : 
                return(owner.deathRayReady);
        }
    }
    function setWeapon(owner, weapon) {
        owner.currentWeapon = weapon;
        switch (weapon) {
            case "bullet" : 
                owner.turret.gotoAndStop(1);
                owner.hitPointsFront = new Array();
                owner.hitPointsFront[0] = {x:(-owner.base._width) / 2, y:(-owner.base._height) / 2};
                owner.hitPointsFront[1] = {x:(-owner.base._width) / 4, y:(-owner.base._height) / 2};
                owner.hitPointsFront[2] = {x:owner.base._width / 4, y:(-owner.base._height) / 2};
                owner.hitPointsFront[3] = {x:owner.base._width / 2, y:(-owner.base._height) / 2};
                owner.hitPointsFront[4] = {x:(-owner.turret._width) / 6, y:((-owner.turret._height) / 16) * 11};
                owner.hitPointsFront[5] = {x:owner.turret._width / 6, y:((-owner.turret._height) / 16) * 11};
                owner.scoreboard.tankIcon.gotoAndStop(1);
                break;
            case "laser" : 
                owner.turret.gotoAndStop(5);
                owner.hitPointsFront = new Array();
                owner.hitPointsFront[0] = {x:(-owner.base._width) / 2, y:(-owner.base._height) / 2};
                owner.hitPointsFront[1] = {x:(-owner.base._width) / 2.7, y:((-owner.base._height) / 2) * 1.2};
                owner.hitPointsFront[2] = {x:owner.base._width / 2.7, y:((-owner.base._height) / 2) * 1.2};
                owner.hitPointsFront[3] = {x:owner.base._width / 2, y:(-owner.base._height) / 2};
                owner.hitPointsFront[4] = {x:(-owner.base._width) / 4, y:((-owner.base._height) / 2) * 1.2};
                owner.hitPointsFront[5] = {x:owner.base._width / 4, y:((-owner.base._height) / 2) * 1.2};
                owner.hitPointsFront[6] = {x:0, y:((-owner.turret._height) / 16) * 11.5};
                owner.hitPointsFront[7] = {x:0, y:((-owner.turret._height) / 16) * 9};
                owner.scoreboard.tankIcon.gotoAndStop(2);
                _root.setEquipment(owner, "aimer");
                break;
            case "frag" : 
                owner.turret.gotoAndStop(7);
                owner.hitPointsFront = new Array();
                owner.hitPointsFront[0] = {x:(-owner.base._width) / 2, y:(-owner.base._height) / 2};
                owner.hitPointsFront[1] = {x:(-owner.base._width) / 4, y:(-owner.base._height) / 2};
                owner.hitPointsFront[2] = {x:owner.base._width / 4, y:(-owner.base._height) / 2};
                owner.hitPointsFront[3] = {x:owner.base._width / 2, y:(-owner.base._height) / 2};
                owner.hitPointsFront[4] = {x:(-owner.turret._width) / 6, y:((-owner.turret._height) / 16) * 11};
                owner.hitPointsFront[5] = {x:owner.turret._width / 6, y:((-owner.turret._height) / 16) * 11};
                owner.scoreboard.tankIcon.gotoAndStop(3);
                break;
            case "gatling" : 
                owner.turret.gotoAndStop(13);
                owner.hitPointsFront = new Array();
                owner.hitPointsFront[0] = {x:(-owner.base._width) / 2, y:(-owner.base._height) / 2};
                owner.hitPointsFront[1] = {x:(-owner.base._width) / 4, y:(-owner.base._height) / 2};
                owner.hitPointsFront[2] = {x:owner.base._width / 4, y:(-owner.base._height) / 2};
                owner.hitPointsFront[3] = {x:owner.base._width / 2, y:(-owner.base._height) / 2};
                owner.hitPointsFront[4] = {x:(-owner.turret._width) / 6, y:((-owner.turret._height) / 17) * 11};
                owner.hitPointsFront[5] = {x:owner.turret._width / 6, y:((-owner.turret._height) / 17) * 11};
                owner.scoreboard.tankIcon.gotoAndStop(4);
                break;
            case "homing" : 
                owner.turret.gotoAndStop(17);
                owner.hitPointsFront = new Array();
                owner.hitPointsFront[0] = {x:(-owner.base._width) / 2, y:(-owner.base._height) / 2};
                owner.hitPointsFront[1] = {x:(-owner.base._width) / 4, y:(-owner.base._height) / 2};
                owner.hitPointsFront[2] = {x:owner.base._width / 4, y:(-owner.base._height) / 2};
                owner.hitPointsFront[3] = {x:owner.base._width / 2, y:(-owner.base._height) / 2};
                owner.hitPointsFront[4] = {x:(-owner.turret._width) / 6, y:((-owner.turret._height) / 16) * 11};
                owner.hitPointsFront[5] = {x:owner.turret._width / 6, y:((-owner.turret._height) / 16) * 11};
                owner.scoreboard.tankIcon.gotoAndStop(6);
                break;
            case "deathRay" : 
                owner.turret.gotoAndStop(20);
                owner.hitPointsFront = new Array();
                owner.hitPointsFront[0] = {x:(-owner.base._width) / 2, y:(-owner.base._height) / 2};
                owner.hitPointsFront[1] = {x:(-owner.base._width) / 4, y:(-owner.base._height) / 2};
                owner.hitPointsFront[2] = {x:owner.base._width / 4, y:(-owner.base._height) / 2};
                owner.hitPointsFront[3] = {x:owner.base._width / 2, y:(-owner.base._height) / 2};
                owner.hitPointsFront[4] = {x:(-owner.turret._width) / 6, y:((-owner.turret._height) / 17) * 11};
                owner.hitPointsFront[5] = {x:owner.turret._width / 6, y:((-owner.turret._height) / 17) * 11};
                break;
            case "remote" : 
                break;
            case "electric" : 
        }
        var _local3 = new Color(owner.turret.background);
        _local3.setTint(owner.turretColor.r, owner.turretColor.g, owner.turretColor.b, owner.turretColor.a);
        _local3 = new Color(owner.scoreboard.tankIcon.turretBackground);
        _local3.setTint(owner.turretColor.r, owner.turretColor.g, owner.turretColor.b, owner.turretColor.a);
        _local3 = new Color(owner.scoreboard.tankIcon.turretBackground2);
        _local3.setTint(owner.turretColor.r, owner.turretColor.g, owner.turretColor.b, owner.turretColor.a);
    }
    function setEquipment(owner, equ) {
        owner.equipment.removeMovieClip();
        owner.currentEquipment = equ;
        switch (equ) {
            case "none" : 
                break;
            case "aimer" : 
                owner.equipment = _root.addAimer(owner);
        }
    }
    function fireWeapon(owner, weapon) {
        switch (weapon) {
            case "bullet" : 
                fireBullet(owner);
                break;
            case "laser" : 
                fireLaser(owner);
                break;
            case "frag" : 
                fireFrag(owner);
                break;
            case "gatling" : 
                fireGatling(owner);
                break;
            case "deathRay" : 
                fireDeathRay(owner);
                break;
            case "homing" : 
                fireHoming(owner);
                break;
            case "remote" : 
                fireRemote(owner);
                break;
            case "electric" : 
                fireElectric(owner);
        }
    }
    function fireBullet(owner) {
        owner.turret.play();
        if (_root.soundOn) {
            _root.soundBullet.start();
        }
        bulletDepth = _root.game.getNextHighestDepth();
        bulletName = "bullet" + bulletDepth;
        bullet = _root.game.attachMovie("bullet", bulletName, bulletDepth);
        owner.swapDepths(bullet);
        bullet.x = owner._x + (((Math.cos(((owner._rotation - 90) * Math.PI) / 180) * SCALE) * 4.5) / 16);
        bullet.y = owner._y + (((Math.sin(((owner._rotation - 90) * Math.PI) / 180) * SCALE) * 4.5) / 16);
        bullet._x = bullet.x;
        bullet._y = bullet.y;
        bullet._xscale = 100 * (_root.SCALE / 50);
        bullet._yscale = 100 * (_root.SCALE / 50);
        bullet.xSpeed = ((Math.cos(((owner._rotation - 90) * Math.PI) / 180) * BULLETSPEED) / BULLETHITCHECKINTERVALS) * (_root.SCALE / 50);
        bullet.ySpeed = ((Math.sin(((owner._rotation - 90) * Math.PI) / 180) * BULLETSPEED) / BULLETHITCHECKINTERVALS) * (_root.SCALE / 50);
        bullet.lifetime = BULLETLIFETIME;
        bullet.deadly = BULLETDEADLY;
        bullet.owner = owner;
        owner.bulletsFired++;
    }
    function fireLaser(owner) {
        if (_root.soundOn) {
            _root.soundLaser.start();
        }
        laserDepth = _root.game.getNextHighestDepth();
        laserName = "laser" + laserDepth;
        laser = _root.game.attachMovie("laser", laserName, laserDepth);
        owner.swapDepths(laser);
        laser._x = owner._x + (((Math.cos(((owner._rotation - 90) * Math.PI) / 180) * SCALE) * 4.5) / 16);
        laser._y = owner._y + (((Math.sin(((owner._rotation - 90) * Math.PI) / 180) * SCALE) * 4.5) / 16);
        laser.x = 0;
        laser.y = 0;
        laser.xSpeed = ((Math.cos(((owner._rotation - 90) * Math.PI) / 180) * LASERSPEED) / LASERHITCHECKINTERVALS) * (_root.SCALE / 50);
        laser.ySpeed = ((Math.sin(((owner._rotation - 90) * Math.PI) / 180) * LASERSPEED) / LASERHITCHECKINTERVALS) * (_root.SCALE / 50);
        laser.lifetime = LASERLIFETIME;
        laser.deadly = LASERDEADLY;
        laser.active = true;
        laser.owner = owner;
        laser.laserColor = (((16711680 * owner.turretColor.r) / 255) + ((65280 * owner.turretColor.g) / 255)) + ((255 * owner.turretColor.b) / 255);
        laser.moveTo(0, 0);
        owner.laserReady = false;
        setEquipment(owner, "none");
    }
    function fireFrag(owner) {
        if (owner.fragFired && (owner.alive)) {
            owner.lastFrag.detonate();
        } else {
            owner.turret.play();
            if (_root.soundOn) {
                _root.soundFragment.start();
            }
            fragDepth = _root.game.getNextHighestDepth();
            fragName = "frag" + fragDepth;
            frag = _root.game.attachMovie("fragbomb", fragName, fragDepth);
            owner.swapDepths(frag);
            frag.x = owner._x + (((Math.cos(((owner._rotation - 90) * Math.PI) / 180) * SCALE) * 4.5) / 16);
            frag.y = owner._y + (((Math.sin(((owner._rotation - 90) * Math.PI) / 180) * SCALE) * 4.5) / 16);
            frag._x = frag.x;
            frag._y = frag.y;
            frag._xscale = 100 * (_root.SCALE / 50);
            frag._yscale = 100 * (_root.SCALE / 50);
            frag.xSpeed = ((Math.cos(((owner._rotation - 90) * Math.PI) / 180) * FRAGSPEED) / FRAGHITCHECKINTERVALS) * (_root.SCALE / 50);
            frag.ySpeed = ((Math.sin(((owner._rotation - 90) * Math.PI) / 180) * FRAGSPEED) / FRAGHITCHECKINTERVALS) * (_root.SCALE / 50);
            frag.lifetime = FRAGLIFETIME;
            frag.deadly = FRAGDEADLY;
            frag.level = _root.FRAGLEVELS;
            frag.owner = owner;
            owner.lastFrag = frag;
            owner.fragFired = true;
        }
    }
    function fireGatling(owner) {
        owner.turret.play();
        if (_root.soundOn) {
            _root.soundGatlingMotorStart.start();
        }
        gatlingDepth = _root.game.getNextHighestDepth();
        gatlingName = "gatling" + gatlingDepth;
        gatling = _root.game.attachMovie("gatling", gatlingName, gatlingDepth);
        gatling.active = true;
        gatling.spinSpeed = 0;
        gatling.fireCounter = 0;
        gatling.bulletsLeft = GATLINGBULLETS;
        gatling.owner = owner;
        owner.gatlingReady = false;
    }
    function fireDeathRay(owner) {
        if (_root.soundOn) {
            _root.soundDeathRayCharge.start();
        }
        deathRayDepth = _root.game.mazebg.getNextHighestDepth();
        deathRayName = "deathRay" + deathRayDepth;
        deathRay = _root.game.mazebg.attachMovie("deathRay", deathRayName, deathRayDepth);
        deathRay._x = owner._x + (((Math.cos(((owner._rotation - 90) * Math.PI) / 180) * SCALE) * 4.5) / 16);
        deathRay._y = owner._y + (((Math.sin(((owner._rotation - 90) * Math.PI) / 180) * SCALE) * 4.5) / 16);
        deathRay.xSpeed = Math.cos(((owner._rotation - 90) * Math.PI) / 180) * (_root.SCALE / 16);
        deathRay.ySpeed = Math.sin(((owner._rotation - 90) * Math.PI) / 180) * (_root.SCALE / 16);
        deathRay.active = false;
        deathRay.warmup = DEATHRAYWARMUPTIME;
        deathRay.lifetime = DEATHRAYLIFETIME;
        deathRay.owner = owner;
        owner.deathRayReady = false;
    }
    function fireHoming(owner) {
        owner.turret.gotoAndStop(1);
        var _local7 = new Color(owner.turret.background);
        _local7.setTint(owner.turretColor.r, owner.turretColor.g, owner.turretColor.b, owner.turretColor.a);
        if (_root.soundOn) {
            _root.soundHoming3.start();
        }
        homingDepth = _root.game.getNextHighestDepth();
        homingName = "homing" + homingDepth;
        homing = _root.game.attachMovie("homingbullet", homingName, homingDepth);
        owner.swapDepths(homing);
        homing.x = owner._x + (((Math.cos(((owner._rotation - 90) * Math.PI) / 180) * SCALE) * 4.5) / 16);
        homing.y = owner._y + (((Math.sin(((owner._rotation - 90) * Math.PI) / 180) * SCALE) * 4.5) / 16);
        homing._x = homing.x;
        homing._y = homing.y;
        homing._xscale = 100 * (_root.SCALE / 50);
        homing._yscale = 100 * (_root.SCALE / 50);
        homing.xSpeed = ((Math.cos(((owner._rotation - 90) * Math.PI) / 180) * HOMINGSPEED) / HOMINGHITCHECKINTERVALS) * (_root.SCALE / 50);
        homing.ySpeed = ((Math.sin(((owner._rotation - 90) * Math.PI) / 180) * HOMINGSPEED) / HOMINGHITCHECKINTERVALS) * (_root.SCALE / 50);
        var _local8 = new Color(homing.background);
        _local8.setRGB((((16711680 * owner.turretColor.r) / 255) + ((65280 * owner.turretColor.g) / 255)) + ((255 * owner.turretColor.b) / 255));
        homing.lifetime = HOMINGLIFETIME;
        homing.deadly = HOMINGDEADLY;
        homing.homing = false;
        homing.startuptime = HOMINGSTARTUPTIME;
        homing.soundCounter = 0;
        homing.owner = owner;
        homing.target = undefined;
        owner.homingReady = false;
        owner.turret.gotoAndStop(18);
        owner.hitPointsFront = new Array();
        owner.hitPointsFront[0] = {x:(-owner.base._width) / 2, y:(-owner.base._height) / 2};
        owner.hitPointsFront[1] = {x:(-owner.base._width) / 4, y:(-owner.base._height) / 2};
        owner.hitPointsFront[2] = {x:owner.base._width / 4, y:(-owner.base._height) / 2};
        owner.hitPointsFront[3] = {x:owner.base._width / 2, y:(-owner.base._height) / 2};
        var _local6 = new Color(owner.turret.background);
        _local6.setTint(owner.turretColor.r, owner.turretColor.g, owner.turretColor.b, owner.turretColor.a);
        _local6 = new Color(owner.scoreboard.tankIcon.turretBackground);
        _local6.setTint(owner.turretColor.r, owner.turretColor.g, owner.turretColor.b, owner.turretColor.a);
        _local6 = new Color(owner.scoreboard.tankIcon.turretBackground2);
        _local6.setTint(owner.turretColor.r, owner.turretColor.g, owner.turretColor.b, owner.turretColor.a);
        var _local5 = 0;
        while (_local5 < (3 * _root.HOMINGSMOKECLOUDS)) {
            var _local4 = _root.game.getNextHighestDepth();
            _root.game.createEmptyMovieClip("homingSmoke-" + _local4, _root.game.getNextHighestDepth());
            s = _root.game["homingSmoke-" + _local4];
            s.lineStyle(8 * (_root.SCALE / 50), Math.round(random(4) + 6) * 1118481, 40);
            s.moveTo(0, 0);
            s.lineTo(0, 1);
            s.xspeed = (((2 * Math.random()) - 1) * (_root.SCALE / 50)) - (((Math.random() * Math.cos(((owner._rotation - 90) * Math.PI) / 180)) * SCALE) * 0.1);
            s.yspeed = (((2 * Math.random()) - 1) * (_root.SCALE / 50)) - (((Math.random() * Math.sin(((owner._rotation - 90) * Math.PI) / 180)) * SCALE) * 0.1);
            s.x = owner._x + (((Math.cos(((owner._rotation - 90) * Math.PI) / 180) * SCALE) * 2) / 16);
            s.y = owner._y + (((Math.sin(((owner._rotation - 90) * Math.PI) / 180) * SCALE) * 2) / 16);
            s._x = s.x;
            s._y = s.y;
            s.onEnterFrame = function () {
                if (_root.frozen) {
                    return(undefined);
                }
                this._xscale = this._xscale + 2;
                this._yscale = this._yscale + 2;
                this._alpha = this._alpha - (4 - (Math.random() * 3));
                this.xspeed = this.xspeed * 0.9;
                this.yspeed = this.yspeed * 0.9;
                this.x = this.x + this.xspeed;
                this.y = this.y + this.yspeed;
                this._x = this.x;
                this._y = this.y;
                if (this._alpha <= 0) {
                    this.removeMovieClip();
                }
            };
            _local5++;
        }
    }
    function fireRemote(owner) {
        owner.turret.play();
        if (_root.soundOn) {
            _root.soundBullet.start();
        }
        remoteDepth = _root.game.getNextHighestDepth();
        remoteName = "remote" + remoteDepth;
        remote = _root.game.attachMovie("remotebullet", remoteName, remoteDepth);
        owner.swapDepths(remote);
        remote.x = owner._x + (((Math.cos(((owner._rotation - 90) * Math.PI) / 180) * SCALE) * 4.5) / 16);
        remote.y = owner._y + (((Math.sin(((owner._rotation - 90) * Math.PI) / 180) * SCALE) * 4.5) / 16);
        remote._x = remote.x;
        remote._y = remote.y;
        remote._rotation = owner._rotation;
        remote.turnSpeed = REMOTETURNSPEED;
        remote._xscale = 100 * (_root.SCALE / 50);
        remote._yscale = 100 * (_root.SCALE / 50);
        remote.xSpeed = ((Math.cos(((owner._rotation - 90) * Math.PI) / 180) * REMOTESPEED) / REMOTEHITCHECKINTERVALS) * (_root.SCALE / 50);
        remote.ySpeed = ((Math.sin(((owner._rotation - 90) * Math.PI) / 180) * REMOTESPEED) / REMOTEHITCHECKINTERVALS) * (_root.SCALE / 50);
        remote.lifetime = REMOTELIFETIME;
        remote.deadly = REMOTEDEADLY;
        remote.owner = owner;
        owner.remoteControlling = true;
    }
    function fireElectric(owner) {
        owner.turret.play();
        if (_root.soundOn) {
            _root.soundBullet.start();
        }
        bulletDepth = _root.game.getNextHighestDepth();
        bulletName = "electricbullet" + bulletDepth;
        bullet = _root.game.attachMovie("electricbullet", bulletName, bulletDepth);
        owner.swapDepths(bullet);
        bullet.x = owner._x + (((Math.cos(((owner._rotation - 90) * Math.PI) / 180) * SCALE) * 4.5) / 16);
        bullet.y = owner._y + (((Math.sin(((owner._rotation - 90) * Math.PI) / 180) * SCALE) * 4.5) / 16);
        bullet._x = bullet.x;
        bullet._y = bullet.y;
        bullet._xscale = 100 * (_root.SCALE / 50);
        bullet._yscale = 100 * (_root.SCALE / 50);
        bullet.xSpeed = ((Math.cos(((owner._rotation - 95) * Math.PI) / 180) * BULLETSPEED) / BULLETHITCHECKINTERVALS) * (_root.SCALE / 50);
        bullet.ySpeed = ((Math.sin(((owner._rotation - 95) * Math.PI) / 180) * BULLETSPEED) / BULLETHITCHECKINTERVALS) * (_root.SCALE / 50);
        bullet.lifetime = BULLETLIFETIME;
        bullet.deadly = BULLETDEADLY;
        bullet.owner = owner;
        bullet2Depth = _root.game.getNextHighestDepth();
        bullet2Name = "electricbullet" + bullet2Depth;
        bullet2 = _root.game.attachMovie("electricbullet", bullet2Name, bullet2Depth);
        owner.swapDepths(bullet2);
        bullet2.x = owner._x + (((Math.cos(((owner._rotation - 90) * Math.PI) / 180) * SCALE) * 4.5) / 16);
        bullet2.y = owner._y + (((Math.sin(((owner._rotation - 90) * Math.PI) / 180) * SCALE) * 4.5) / 16);
        bullet2._x = bullet2.x;
        bullet2._y = bullet2.y;
        bullet2._xscale = 100 * (_root.SCALE / 50);
        bullet2._yscale = 100 * (_root.SCALE / 50);
        bullet2.xSpeed = ((Math.cos(((owner._rotation - 85) * Math.PI) / 180) * BULLETSPEED) / BULLETHITCHECKINTERVALS) * (_root.SCALE / 50);
        bullet2.ySpeed = ((Math.sin(((owner._rotation - 85) * Math.PI) / 180) * BULLETSPEED) / BULLETHITCHECKINTERVALS) * (_root.SCALE / 50);
        bullet2.lifetime = BULLETLIFETIME;
        bullet2.deadly = BULLETDEADLY;
        bullet2.owner = owner;
        bullet.firstBullet = bullet;
        bullet.lastBullet = bullet2;
        bullet2.firstBullet = bullet;
        bullet2.lastBullet = bullet2;
        owner.electricReady = false;
        sparkDepth = _root.game.getNextHighestDepth();
        sparkName = "spark" + sparkDepth;
        spark = _root.game.createEmptyMovieClip(sparkName, sparkDepth);
        spark._x = 0;
        spark._y = 0;
        spark.points = new Array();
        spark.waveCounter = 0;
        bullet.sparkMC = spark;
        bullet2.sparkMC = spark;
    }
    function placeCrate(pos, scale) {
        if (_root.settingsActiveWeapons.length == 0) {
            return(undefined);
        }
        _root.numberOfCrates++;
        if (_root.soundOn) {
            _root.soundCrate.start();
        }
        var _local4 = _root.game.mazebg.attachMovie("crate", (("crate" + _root.reachable[pos].x) + "-") + _root.reachable[pos].y, _root.game.mazebg.getNextHighestDepth());
        _local4._x = (_root.reachable[pos].x + 0.5) * scale;
        _local4._y = (_root.reachable[pos].y + 0.5) * scale;
        _local4.targetScale = scale * 1.5;
        _local4._rotation = (Math.random() * 90) - 45;
        _local4._xscale = 0;
        _local4._yscale = 0;
        _local4.scaleSpeed = scale / 5;
        _local4.scaleSpeedDiff = scale / 20;
        _local4.landed = false;
        var _local3 = 0;
        while (_local3 < _root.NUMBEROFPUFFCLOUDS) {
            _root.game.mazebg.createEmptyMovieClip((("puff" + _root.numberOfCrates) + "-") + _local3, _root.game.mazebg.getNextHighestDepth());
            s = _root.game.mazebg[(("puff" + _root.numberOfCrates) + "-") + _local3];
            s.lineStyle(15 * (_root.SCALE / 50), 8947848 + (Math.random() * 16777215), 40 + random(20));
            s.moveTo(0, 0);
            s.lineTo(0, 1);
            s.xspeed = ((Math.random() * 2) - 1) * (_root.SCALE / 50);
            s.yspeed = ((Math.random() * 2) - 1) * (_root.SCALE / 50);
            s.x = (_local4._x + (s.xspeed * ((Math.random() * 3) + 1))) + (((Math.random() * 2) - 1) * (_root.SCALE / 50));
            s.y = (_local4._y + (s.yspeed * ((Math.random() * 3) + 1))) + (((Math.random() * 2) - 1) * (_root.SCALE / 50));
            s._x = s.x;
            s._y = s.y;
            s.onEnterFrame = function () {
                if (_root.frozen) {
                    return(undefined);
                }
                this._xscale = this._xscale + 2;
                this._yscale = this._yscale + 2;
                this._alpha = this._alpha - (8 - (Math.random() * 5));
                this.xspeed = this.xspeed * 0.85;
                this.yspeed = this.yspeed * 0.85;
                this.x = this.x + this.xspeed;
                this.y = this.y + this.yspeed;
                this._x = this.x;
                this._y = this.y;
                if (this._alpha <= 0) {
                    this.removeMovieClip();
                }
            };
            _local3++;
        }
        weapon = random(_root.settingsActiveWeapons.length);
        _local4.gotoAndStop(_root.settingsActiveWeapons[weapon]);
        _local4.weapon = _root.settingsActiveWeapons[weapon];
        _local4.pos = pos;
        _root.reachable[pos].used = true;
    }
    function addAimer(owner) {
        aimerDepth = _root.game.getNextHighestDepth();
        aimerName = "aimer" + aimerDepth;
        _root.game.attachMovie("aimer", aimerName, aimerDepth);
        aimer = _root.game[aimerName];
        owner.swapDepths(aimer);
        aimer.owner = owner;
        aimer.aimerColor = (((16711680 * owner.turretColor.r) / 255) + ((65280 * owner.turretColor.g) / 255)) + ((255 * owner.turretColor.b) / 255);
        return(aimer);
    }
    function setupBattle() {
        _root.player1ScoreBoard.score.text = _root.player1ScoreBoard.score.text;
        _root.player2ScoreBoard.score.text = _root.player2ScoreBoard.score.text;
        _root.player3ScoreBoard.score.text = _root.player3ScoreBoard.score.text;
        if (_root.TANKS == 2) {
            _root.player1ScoreBoard.score.autoSize = "left";
            _root.player1ScoreBoard.score._x = (_root.player1ScoreBoard.tankIcon._width / 2) - 5;
            _root.player1ScoreBoard._x = (MOVIEWIDTH / 2) - 150;
            _root.player1ScoreBoard._y = MOVIEHEIGHT - 25;
            if (_root.loginInfo != undefined) {
                _root.player1ScoreBoard.username.autoSize = "center";
                _root.player1ScoreBoard.username.text = _root.loginInfo.p1n;
            } else {
                _root.player1ScoreBoard.username.text = "";
            }
            _root.player2ScoreBoard.score.autoSize = "right";
            _root.player2ScoreBoard.tankIcon._xscale = -100;
            if (firstSetup) {
                _root.player2ScoreBoard.score._x = (((-_root.player2ScoreBoard.tankIcon._width) / 2) - 18.5) - _root.player2ScoreBoard.score._width;
            }
            _root.player2ScoreBoard._x = (MOVIEWIDTH / 2) + 190;
            _root.player2ScoreBoard._y = MOVIEHEIGHT - 25;
            if (_root.loginInfo != undefined) {
                _root.player2ScoreBoard.username.autoSize = "center";
                _root.player2ScoreBoard.username.text = _root.loginInfo.p2n;
            } else {
                _root.player2ScoreBoard.username.text = "";
            }
            _root.player3ScoreBoard._visible = false;
        } else if (_root.TANKS == 3) {
            _root.player1ScoreBoard.score.autoSize = "left";
            _root.player1ScoreBoard.score._x = (_root.player1ScoreBoard.tankIcon._width / 2) - 5;
            _root.player1ScoreBoard._x = (MOVIEWIDTH / 2) - 180;
            _root.player1ScoreBoard._y = MOVIEHEIGHT - 25;
            if (_root.loginInfo != undefined) {
                _root.player1ScoreBoard.username.autoSize = "center";
                _root.player1ScoreBoard.username.text = _root.loginInfo.p1n;
            } else {
                _root.player1ScoreBoard.username.text = "";
            }
            _root.player2ScoreBoard.score.autoSize = "left";
            _root.player2ScoreBoard.score._x = (_root.player2ScoreBoard.tankIcon._width / 2) - 5;
            _root.player2ScoreBoard._x = MOVIEWIDTH / 2;
            _root.player2ScoreBoard._y = MOVIEHEIGHT - 25;
            if (_root.loginInfo != undefined) {
                _root.player2ScoreBoard.username.autoSize = "center";
                _root.player2ScoreBoard.username.text = _root.loginInfo.p2n;
            } else {
                _root.player2ScoreBoard.username.text = "";
            }
            _root.player3ScoreBoard.score.autoSize = "right";
            _root.player3ScoreBoard.tankIcon._xscale = -100;
            if (firstSetup) {
                _root.player3ScoreBoard.score._x = (((-_root.player3ScoreBoard.tankIcon._width) / 2) - 18.5) - _root.player3ScoreBoard.score._width;
            }
            _root.player3ScoreBoard._x = (MOVIEWIDTH / 2) + 220;
            _root.player3ScoreBoard._y = MOVIEHEIGHT - 25;
            if (_root.loginInfo != undefined) {
                _root.player3ScoreBoard.username.autoSize = "center";
                _root.player3ScoreBoard.username.text = _root.loginInfo.p3n;
            } else {
                _root.player3ScoreBoard.username.text = "";
            }
        }
        _root.createEmptyMovieClip("game", 0);
        var _local2 = new Array(TANKS);
        _root.reachable = new Array();
        while (_root.reachable.length < (2 * TANKS)) {
            WIDTH = Math.floor(random(9)) + 4;
            HEIGHT = Math.floor(random(7)) + 4;
            SCALE = Math.min((MOVIEHEIGHT - HEIGHTTOBOTTOM) / (HEIGHT + 0.125), MOVIEWIDTH / (WIDTH + 0.125));
            maze = createMaze(WIDTH + 1, HEIGHT + 1);
            _local2[0] = {x:Math.floor(Math.random() * WIDTH), y:Math.floor(Math.random() * HEIGHT)};
            _root.reachable = calcReachable(maze, _local2[0].x, _local2[0].y);
        }
        _root.reachable[0].used = true;
        var _local3 = 1;
        while (_local3 < TANKS) {
            var _local4 = Math.floor(Math.random() * _root.reachable.length);
            if (_root.reachable[_local4].used != true) {
                _local2[_local3] = {x:_root.reachable[_local4].x, y:_root.reachable[_local4].y};
                _root.reachable[_local4].used = true;
            } else {
                _local3--;
            }
            _local3++;
        }
        _local3 = 0;
        while (_local3 < _root.reachable.length) {
            _root.reachable[_local3].used = false;
            _local3++;
        }
        _root.numberOfCrates = 0;
        drawMaze(maze, SCALE);
        _local3 = 0;
        while (_local3 < TANKS) {
            deployTank(_local2[_local3], _local3, SCALE);
            _local3++;
        }
        var _local11 = Math.floor((maze.length - 1) * SCALE);
        var _local12 = Math.floor((maze[0].length - 1) * SCALE);
        var _local7 = Math.floor(SCALE / 16);
        var _local8 = 1;
        var _local9 = (_local11 + (2 * _local7)) + (2 * _local8);
        var _local10 = (_local12 + (2 * _local7)) + (2 * _local8);
        if (_local9 > MOVIEWIDTH) {
            _local9 = MOVIEWIDTH;
        }
        if (_local10 > (MOVIEHEIGHT - HEIGHTTOBOTTOM)) {
            _local10 = MOVIEHEIGHT - HEIGHTTOBOTTOM;
        }
        gameX = ((10 + _local7) + _local8) + Math.floor((MOVIEWIDTH / 2) - (_local9 / 2));
        gameY = (10 + _local7) + _local8;
        _root.game._x = gameX;
        _root.game._y = gameY;
        aliveCount = TANKS;
        firstSetup = false;
        distancesForMaze = new Array(maze.length - 1);
        _local3 = 0;
        while (_local3 < distancesForMaze.length) {
            distancesForMaze[_local3] = new Array(maze[_local3].length - 1);
            _local3++;
        }
        _local3 = 0;
        while (_local3 < reachable.length) {
            distancesForMaze[reachable[_local3].x][reachable[_local3].y] = calcDistances(maze, reachable[_local3].x, reachable[_local3].y);
            _local3++;
        }
        tankFields = new Array(_root.TANKS);
        _local3 = 0;
        while (_local3 < _root.TANKS) {
            tankFields[_local3] = {x:_local2[_local3].x, y:_local2[_local3].y};
            _local3++;
        }
        deadEnds = findDeadEnds(maze, reachable);
    }
    function cleanUpBattle() {
        _root.logo.swapDepths(_root.game);
        _root.game.removeMovieClip();
        _root.scopeCross.removeMovieClip();
        _root.scopeCircle.removeMovieClip();
    }
    function registerHit(owner, victim) {
        if (_root.loginInfo != undefined) {
            var _local3 = _root.attachMovie("serverInfo", "serverInfo" + _root.getNextHighestDepth(), _root.getNextHighestDepth());
            _local3.killer = owner;
            _local3.victim = victim;
            _local3._x = 30;
            _local3._y = 30;
            _local3._alpha = -30;
            _local3.balls._rotation = _root.serverInfoRotation;
            _local3.variablesLoaded = false;
            _local3.loadVariablesString = "includes/updateGameStatistics.php?q=" + Base64.Encode(shuffleMessage((((((((((((("tankScrapped=" + TANKS) + "&x=") + _root.loginInfo.x) + "&victim=") + victim.username) + "&killer=") + owner.username) + "&what=") + "") + "&how=") + "") + "&when=") + ""));
            _local3.onEnterFrame = function () {
                this.balls._rotation = _root.serverInfoRotation;
                if (this.response != undefined) {
                    this._alpha = this._alpha - 10;
                    if (this._alpha <= 0) {
                        this.removeMovieClip();
                    }
                } else if (this._alpha < 100) {
                    this._alpha = this._alpha + 10;
                }
                if (this.r != undefined) {
                    this.response = _root.decodeMessage(this.r);
                    if (this.response.error == undefined) {
                        _root.scrapyard = this.response.scrapyard;
                        var _local4 = "";
                        if (this.killer != this.victim) {
                            _local4 = _local4 + (("javascript: updateScore('" + this.killer.username.toLowerCase()) + "-kills', 1);");
                        }
                        _local4 = _local4 + (("javascript: updateScore('" + this.victim.username.toLowerCase()) + "-deaths', 1); void ( 0 );");
                        getURL (_local4);
                    } else {
                        var _local3 = _root.attachMovie("serverInfo", "serverInfo" + _root.getNextHighestDepth(), _root.getNextHighestDepth(), {lifetime:25});
                        _local3._x = 30;
                        _local3._y = 30;
                        _local3._alpha = -100;
                        _local3.gotoAndStop(2);
                        _local3.onEnterFrame = function () {
                            if (this._alpha >= 100) {
                                this.lifetime--;
                            }
                            if (this.lifetime == 0) {
                                this._alpha = this._alpha - 10;
                            } else if (this._alpha < 100) {
                                this._alpha = this._alpha + 10;
                            }
                            if ((this.lifetime == 0) && (this._alpha <= 0)) {
                                this.removeMovieClip();
                            }
                        };
                    }
                    serverInfoQueue.shift();
                    this.r = undefined;
                }
            };
            serverInfoQueue.push(_local3);
        } else {
            _root.loadVariables("includes/updateGameStatistics.php?q=" + Base64.Encode(shuffleMessage((((("tankScrapped=" + _root.TANKS) + "&a=") + Math.random()) + "&b=") + Math.random())), "POST");
        }
    }
    function assignPoints() {
        var _local2 = 0;
        while (_local2 < _root.TANKS) {
            if (_root.game["tank" + _local2].alive) {
                _root.game["tank" + _local2].scoreboard.add(1);
                if (_root.loginInfo != undefined) {
                    getURL (("javascript: updateScore('" + _root.loginInfo[("p" + (_local2 + 1)) + "n"].toLowerCase()) + "-score', 1); void ( 0 );");
                }
            }
            _local2++;
        }
    }
    function recordFrame() {
        var _local4 = {};
        var _local2 = 0;
        while (_local2 < _root.TANKS) {
            if (_root.game["tank" + _local2].alive) {
                _local4["tank" + _local2] = {};
                _local4["tank" + _local2]._x = _root.game["tank" + _local2]._x;
                _local4["tank" + _local2]._y = _root.game["tank" + _local2]._y;
                _local4["tank" + _local2]._rotation = _root.game["tank" + _local2]._rotation;
            }
            _local2++;
        }
        var _local5 = new Array();
        for (var _local6 in _root.game) {
            if ((substring(_local6, 0, 6)) == "bullet") {
                var _local3 = {};
                _local3._x = _root.game[_local6]._x;
                _local3._y = _root.game[_local6]._y;
                _local5.push(_local3);
            }
        }
        _local4.bullets = _local5;
        return(_local4);
    }
    function playFrame(frame) {
        trace(frame.tank0);
        for (var _local3 in frame) {
            trace(_local3);
            if ((substring(_local3, 0, 4)) == "tank") {
                trace(_root.game[_local3]);
                _root.game[_local3].x = frame[_local3]._x;
                _root.game[_local3].y = frame[_local3]._y;
                _root.game[_local3].oldRot = frame[_local3]._rotation;
                _root.game[_local3]._rotation = frame[_local3]._rotation;
            }
        }
    }
    stop();
    MOVIEWIDTH = 692;
    MOVIEHEIGHT = 480;
    HEIGHTTOBOTTOM = 80;
    STARTWEAPON = "bullet";
    BULLETSPEED = 4.5;
    BULLETLIFETIME = 250;
    LASERSPEED = 70;
    LASERLIFETIME = 8;
    AIMERLENGTH = 200;
    FRAGSPEED = 4.5;
    FRAGLIFETIME = 250;
    DEATHRAYLIFETIME = 25;
    HOMINGSPEED = 4.5;
    HOMINGLIFETIME = 250;
    REMOTESPEED = 4.5;
    REMOTETURNSPEED = 15;
    REMOTELIFETIME = 250;
    GATLINGSPEED = 5.5;
    GATLINGLIFETIME = 125;
    GATLINGBULLETS = 20;
    CRATESPAWNTIMEBASE = 350;
    CRATESPAWNTIMERANDOM = 200;
    CRATESPAWNMAZESIZESCALE = 2000;
    BULLETHITCHECKINTERVALS = 7;
    LASERHITCHECKINTERVALS = 70;
    AIMERHITCHECKINTERVALS = 100;
    FRAGHITCHECKINTERVALS = 7;
    HOMINGHITCHECKINTERVALS = 5;
    REMOTEHITCHECKINTERVALS = 5;
    GATLINGHITCHECKINTERVALS = 7;
    BULLETDEADLY = 0;
    LASERDEADLY = 7;
    AIMERACTIVE = 7;
    FRAGDEADLY = 0;
    DEATHRAYDEADLY = 0;
    HOMINGDEADLY = 0;
    REMOTEDEADLY = 0;
    GATLINGDEADLY = 2;
    NUMBEROFFRAGMENTS = 8;
    NUMBEROFSMOKECLOUDS = 10;
    NUMBEROFPUFFCLOUDS = 0;
    NUMBEROFDUSTCLOUDS = 20;
    NUMBEROFFRAMESBEFOREEND = 125;
    NUMBEROFFRAMESFROZEN = 50;
    NUMBEROFFRAMESBEFORERESET = 5;
    FRAGFRAGMENTS = 40;
    FRAGSMOKECLOUDS = 10;
    FRAGLEVELS = 1;
    GATLINGSPINSPEED = 10;
    DEATHRAYWARMUPTIME = 25;
    HOMINGSTARTUPTIME = 50;
    HOMINGSMOKECLOUDS = 5;
    MAXSHAKE = 8;
    aliveCount = 0;
    endCount = -1;
    resetCount = -1;
    frozen = false;
    shake = 0;
    gameX = (gameY = 0);
    MAXDEADENDPENALTY = 5;
    crateTimer = (CRATESPAWNTIMEBASE + random(CRATESPAWNTIMERANDOM)) * _root.settingsCrateSpawnModifier;
    var outgoingLc = new LocalConnection();
    var firstSetup = true;
    var distancesForMaze;
    var tankFields;
    setupBattle();
    serverInfoRotation = 0;
    serverInfoQueue = new Array();
    var frames = new Array();
    _root.onEnterFrame = function () {
        _root.serverInfoRotation = _root.serverInfoRotation + 4;
        if ((serverInfoQueue[0] != undefined) && (!serverInfoQueue[0].variablesLoaded)) {
            serverInfoQueue[0].variablesLoaded = true;
            serverInfoQueue[0].loadVariables(serverInfoQueue[0].loadVariablesString, "POST");
        }
        if (_root.loginInfo == undefined) {
            if (_root.r != undefined) {
                _root.scrapyard = decodeMessage(_root.r).scrapyard;
            }
        }
        if (_root.scrapyard != undefined) {
            outgoingLc.send("lcStats", "updateScrapyard", _root.scrapyard);
            _root.scrapyard = undefined;
        }
        var _local3 = 0;
        while (_local3 < _root.TANKS) {
            var _local7 = Math.floor(_root.game["tank" + _local3]._x / _root.SCALE);
            var _local8 = Math.floor(_root.game["tank" + _local3]._y / _root.SCALE);
            tankFields[_local3] = {x:_local7, y:_local8};
            _local3++;
        }
        crateTimer--;
        if ((!frozen) && (crateTimer <= 0)) {
            crateTimer = ((CRATESPAWNTIMEBASE + random(CRATESPAWNTIMERANDOM)) + (CRATESPAWNMAZESIZESCALE / _root.reachable.length)) * _root.settingsCrateSpawnModifier;
            pos = 0;
            var _local6 = true;
            var _local9 = -1;
            var _local13 = false;
            if (_root.numberOfCrates >= _root.settingsMaxCrates) {
                _local13 = true;
            }
            while (((_root.reachable[pos].used || (_local6)) && (_local9 < 5)) && (!_local13)) {
                pos = random(_root.reachable.length);
                _local6 = false;
                _local9++;
                _local3 = 0;
                while (_local3 < _root.TANKS) {
                    var _local5 = Math.floor(_root.game["tank" + _local3].x / SCALE);
                    var _local4 = Math.floor(_root.game["tank" + _local3].y / SCALE);
                    if (((Math.abs(_root.reachable[pos].x - _local5) + Math.abs(_root.reachable[pos].y - _local4)) <= 1) && (_root.game["tank" + _local3].alive)) {
                        _local6 = true;
                    }
                    _local3++;
                }
            }
            if ((_local9 < 5) && (!_local13)) {
                _root.placeCrate(pos, SCALE);
            }
        }
        if (shake >= 0) {
            _root.game._x = (gameX + random(shake)) - (shake / 2);
            _root.game._y = (gameY + random(shake)) - (shake / 2);
            shake = shake - 0.5;
        }
        if (aliveCount <= 1) {
            if (endCount >= 0) {
                endCount--;
            }
            if (endCount == NUMBEROFFRAMESFROZEN) {
                _root.game.tank0.turret.stop();
                _root.game.tank1.turret.stop();
                _root.game.tank2.turret.stop();
                frozen = true;
                if (_root.loginInfo != undefined) {
                    var _local12 = _root.attachMovie("serverInfo", "serverInfo" + _root.getNextHighestDepth(), _root.getNextHighestDepth());
                    _local12._x = 30;
                    _local12._y = 30;
                    _local12._alpha = -30;
                    _local12.balls._rotation = _root.serverInfoRotation;
                    _local12.variablesLoaded = false;
                    _local12.loadVariablesString = "includes/updateGameStatistics.php?q=" + Base64.Encode(shuffleMessage((((((("roundCompleted=" + TANKS) + "&x=") + _root.loginInfo.x) + "&a=") + Math.random()) + "&b=") + Math.random()));
                    _local12.onEnterFrame = function () {
                        this.balls._rotation = _root.serverInfoRotation;
                        if (this.response != undefined) {
                            this._alpha = this._alpha - 10;
                            if (this._alpha <= 0) {
                                this.removeMovieClip();
                            }
                        } else if (this._alpha < 100) {
                            this._alpha = this._alpha + 10;
                        }
                        if (this.r != undefined) {
                            this.response = _root.decodeMessage(this.r);
                            if (this.response.error == undefined) {
                                assignPoints();
                            } else {
                                var _local3 = _root.attachMovie("serverInfo", "serverInfo" + _root.getNextHighestDepth(), _root.getNextHighestDepth(), {lifetime:25});
                                _local3._x = 30;
                                _local3._y = 30;
                                _local3._alpha = -100;
                                _local3.gotoAndStop(2);
                                _local3.onEnterFrame = function () {
                                    if (this._alpha >= 100) {
                                        this.lifetime--;
                                    }
                                    if (this.lifetime == 0) {
                                        this._alpha = this._alpha - 10;
                                    } else if (this._alpha < 100) {
                                        this._alpha = this._alpha + 10;
                                    }
                                    if ((this.lifetime == 0) && (this._alpha <= 0)) {
                                        this.removeMovieClip();
                                    }
                                };
                            }
                            _root.loginInfo.x = this.response.x;
                            serverInfoQueue.shift();
                            this.r = undefined;
                        }
                        if (endCount <= 1) {
                            endCount++;
                        }
                    };
                    serverInfoQueue.push(_local12);
                } else {
                    _root.loadVariables("includes/updateGameStatistics.php?q=" + Base64.Encode(shuffleMessage((((("roundCompleted=" + TANKS) + "&a=") + Math.random()) + "&b=") + Math.random())), "POST");
                    assignPoints();
                }
            }
            if (endCount == 0) {
                cleanUpBattle();
                resetCount = NUMBEROFFRAMESBEFORERESET;
            }
        }
        if (resetCount >= 0) {
            resetCount--;
        }
        if (resetCount == 0) {
            endCount = NUMBEROFFRAMESBEFOREEND + NUMBEROFFRAMESFROZEN;
            frozen = false;
            setupBattle();
        }
    };

﻿
//----------------------------------------------------------------------
//Symbol 137 MovieClip [electricbullet] Frame 1
//----------------------------------------------------------------------
    function hitCheck(mc, point) {
        localToGlobal(point);
        if (mc.hitTest(point.x, point.y, true)) {
            return(true);
        }
        return(false);
    }
    onEnterFrame = function () {
        if (_root.frozen) {
            return(undefined);
        }
        i = 0;
        while (i < _root.BULLETHITCHECKINTERVALS) {
            previousX = x;
            previousY = y;
            x = x + xSpeed;
            y = y + ySpeed;
            _x  = x;
            _y  = y;
            if (hitCheck(_root.game.mazemc, {x:0, y:0})) {
                if (_root.soundOn) {
                    _root["soundBounce" + random(2)].start();
                }
                x = previousX;
                y = previousY;
                x = x - xSpeed;
                y = y + ySpeed;
                _x  = x;
                _y  = y;
                if (hitCheck(_root.game.mazemc, {x:0, y:0})) {
                    hitOnXInvert = true;
                } else {
                    hitOnXInvert = false;
                }
                x = previousX;
                y = previousY;
                x = x + xSpeed;
                y = y - ySpeed;
                _x  = x;
                _y  = y;
                if (hitCheck(_root.game.mazemc, {x:0, y:0})) {
                    hitOnYInvert = true;
                } else {
                    hitOnYInvert = false;
                }
                if (hitOnXInvert && (!hitOnYInvert)) {
                    ySpeed = -ySpeed;
                } else if (hitOnYInvert && (!hitOnXInvert)) {
                    xSpeed = -xSpeed;
                } else {
                    xSpeed = -xSpeed;
                    ySpeed = -ySpeed;
                }
                x = previousX;
                y = previousY;
                x = x + xSpeed;
                y = y + ySpeed;
            }
            i++;
        }
        _x  = x;
        _y  = y;
        if (((deadly == 0) && (this == firstBullet)) && (lastBullet instanceof MovieClip)) {
            sparkMC.clear();
            var _local8 = lastBullet.x - this.x;
            var _local7 = lastBullet.y - this.y;
            var _local6 = Math.sqrt((_local8 * _local8) + (_local7 * _local7));
            sparkMC.points = new Array();
            var _local10 = (-_local7) / _local6;
            var _local9 = _local8 / _local6;
            sparkMC.waveCounter = sparkMC.waveCounter + 0.5;
            _local8 = (_local8 / _local6) * 5;
            _local7 = (_local7 / _local6) * 5;
            var _local3 = 0;
            while (_local3 <= (_local6 / 5)) {
                var _local5 = (Math.cos((_local3 / 5) + sparkMC.waveCounter) * Math.min(1, Math.min(_local3 / 5, ((_local6 / 5) - _local3) / 5))) * 10;
                sparkMC.points[_local3] = {x:(this.x + (_local3 * _local8)) + (_local10 * _local5), y:(this.y + (_local3 * _local7)) + (_local9 * _local5)};
                _local3++;
            }
            _local3 = 0;
            while (_local3 < 2) {
                sparkMC.moveTo(sparkMC.points[0].x, sparkMC.points[0].y);
                var i = 1;
                while (i < (sparkMC.points.length - 1)) {
                    sparkMC.lineStyle((Math.random() * 2) + 1, ((Math.random() < 0.5) ? 6711039 : 10066431), (Math.random() * 30) + 70);
                    sparkMC.lineTo((sparkMC.points[i].x + (Math.random() * 10)) - 5, (sparkMC.points[i].y + (Math.random() * 10)) - 5);
                    i++;
                }
                if (sparkMC.points.length >= 2) {
                    sparkMC.lineTo(sparkMC.points[i].x, sparkMC.points[i].y);
                }
                _local3++;
            }
            if ((!sparkMC.shooting) && (Math.random() > 0.85)) {
                sparkMC.shooting = true;
                var i = Math.floor(Math.random() * sparkMC.points.length);
                sparkMC.shootingPoints = new Array();
                sparkMC.shootingPoints[sparkMC.shootingPoints.length] = {x:sparkMC.points[i].x, y:sparkMC.points[i].y};
            }
            if (sparkMC.shooting) {
                sparkMC.moveTo(sparkMC.shootingPoints[0].x, sparkMC.shootingPoints[0].y);
                sparkMC.shootingPoints[sparkMC.shootingPoints.length] = {x:sparkMC.shootingPoints[sparkMC.shootingPoints.length - 1].x + (((Math.random() < 0.5) ? 1 : -1) * ((Math.random() * 10) + 5)), y:sparkMC.shootingPoints[sparkMC.shootingPoints.length - 1].y + (((Math.random() < 0.5) ? 1 : -1) * ((Math.random() * 10) + 5))};
                var i = 0;
                while (i < sparkMC.shootingPoints.length) {
                    sparkMC.lineStyle((sparkMC.shootingPoints.length - i) / 2, ((Math.random() < 0.5) ? 6711039 : 10066431), 100);
                    sparkMC.lineTo((sparkMC.shootingPoints[i].x + (Math.random() * 5)) - 2.5, (sparkMC.shootingPoints[i].y + (Math.random() * 5)) - 2.5);
                    i++;
                }
                if (sparkMC.shootingPoints.length == 6) {
                    sparkMC.shooting = false;
                }
            }
        }
        if (deadly > 0) {
            deadly--;
        }
        lifetime--;
        if (lifetime <= 0) {
            owner.electricReady = true;
            _root.setWeapon(owner, "bullet");
            if (_root.soundOn) {
                _root.soundPoof.start();
            }
            var _local4 = 0;
            while (_local4 < (_root.NUMBEROFSMOKECLOUDS * 2)) {
                s = _root.game.createEmptyMovieClip("smokebullet" + _root.game.getNextHighestDepth(), _root.game.getNextHighestDepth());
                s.lineStyle(5 * (_root.SCALE / 50), Math.round(random(4)) * 1118481, 10 + random(20));
                s.moveTo(0, 0);
                s.lineTo(0, 1);
                s.xspeed = (xSpeed * _root.BULLETHITCHECKINTERVALS) + ((0.5 * ((Math.random() * 8) - 4)) * (_root.SCALE / 50));
                s.yspeed = (ySpeed * _root.BULLETHITCHECKINTERVALS) + ((0.5 * ((Math.random() * 8) - 4)) * (_root.SCALE / 50));
                s.x = _x;
                s.y = _y;
                s._x = s.x;
                s._y = s.y;
                s.hitCheck = function (mc, point) {
                    this.localToGlobal(point);
                    if (mc.hitTest(point.x, point.y, true)) {
                        return(true);
                    }
                    return(false);
                };
                s.onEnterFrame = function () {
                    if (_root.frozen) {
                        return(undefined);
                    }
                    this._xscale = this._xscale + 2;
                    this._yscale = this._yscale + 2;
                    this._alpha = this._alpha - (15 - (Math.random() * 2));
                    this.xspeed = this.xspeed * 0.93;
                    this.yspeed = this.yspeed * 0.93;
                    this.x = this.x + this.xspeed;
                    this.y = this.y + this.yspeed;
                    this._x = this.x;
                    this._y = this.y;
                    if (this.hitCheck(_root.game.mazemc, {x:0, y:0})) {
                        this.xspeed = this.xspeed * 0.25;
                        this.yspeed = this.yspeed * 0.25;
                    }
                    if (this._alpha <= 0) {
                        this.removeMovieClip();
                    }
                };
                _local4++;
            }
            sparkMC.removeMovieClip();
            this.removeMovieClip();
        }
    };

﻿
//----------------------------------------------------------------------
//Instance of Symbol 222 MovieClip "player2Controls" in Frame 7
//----------------------------------------------------------------------
onClipEvent (load) {
    gotoAndStop (2);
    playerName.text = "Player 2";
    activateText.text = "Press M";
}
﻿
//----------------------------------------------------------------------
//Symbol 226 MovieClip Frame 1
//----------------------------------------------------------------------
    function add(amount) {
        var _local5 = Number(score.text);
        score.text = _local5 + amount;
        var _local4 = 0;
        while (_local4 < _root.NUMBEROFFRAGMENTS) {
            _root.createEmptyMovieClip((("fragment" + number) + "-") + _local4, _root.getNextHighestDepth());
            f = _root[(("fragment" + number) + "-") + _local4];
            dir = (Math.PI/4) + ((Math.random() * Math.PI) * 0.5);
            speed = (Math.random() * 3) + 1.5;
            f.xspeed = Math.cos(dir) * (speed / 1.5);
            f.yspeed = (-Math.sin(dir)) * (speed / 1.5);
            f.rotspeed = (Math.random() * 120) - 60;
            f.active = true;
            f.smokenamebase = (("smoke-fragment" + number) + "-") + _local4;
            f.smokecounter = 0;
            f.hitPoints = new Array();
            f.lineStyle(2, 3618615, 100, false, "none");
            point1 = {x:random(10) - 5, y:random(10) - 5};
            point2 = {x:random(10) - 5, y:random(10) - 5};
            center = {x:(point1.x + point2.x) / 2, y:(point1.y + point2.y) / 2};
            f.moveTo(point1.x - center.x, point1.y - center.y);
            f.lineTo(point2.x - center.x, point2.y - center.y);
            f.hitPoints.push({x:point2.x - center.x, y:point2.y - center.y});
            f.hitPoints.push({x:point1.x - center.x, y:point1.y - center.y});
            f.spawnCounter = 0;
            f.x = (this._x + score._x) + (score._width * Math.random());
            f.y = (this._y + score._y) + ((score._height * Math.random()) * 0.5);
            f._x = f.x;
            f._y = f.y;
            f._rotation = random(360);
            f.onEnterFrame = function () {
                if (this.active) {
                    this.x = this.x + this.xspeed;
                    this.y = this.y + this.yspeed;
                    this._x = this.x;
                    this._y = this.y;
                    this.xspeed = this.xspeed * 0.97;
                    this.yspeed = this.yspeed + 0.2;
                    this.rotspeed = this.rotspeed * 0.99;
                    this._rotation = this._rotation + this.rotspeed;
                    if (this.hitCheck(this.hitPoints)) {
                        this.active = false;
                    }
                }
                if ((!this.active) || ((Math.abs(this.xspeed) < 0.5) && (Math.abs(this.yspeed) < 0.5))) {
                    this._alpha = this._alpha - 5;
                }
                if (this._alpha <= 0) {
                    this.active = false;
                    this.removeMovieClip();
                }
            };
            f.hitCheck = function (points) {
                var _local3 = 0;
                while (_local3 < points.length) {
                    point = {x:points[_local3].x, y:points[_local3].y};
                    this.localToGlobal(point);
                    if ((_root.player1ScoreBoard._y + 13) < point.y) {
                        return(true);
                    }
                    _local3++;
                }
                return(false);
            };
            _local4++;
        }
        _local4 = 0;
        while (_local4 < (_root.NUMBEROFSMOKECLOUDS * 4)) {
            _root.createEmptyMovieClip((("smoke" + number) + "-") + _local4, _root.getNextHighestDepth());
            s = _root[(("smoke" + number) + "-") + _local4];
            s.lineStyle(8, Math.round(random(4) + 4) * 1118481, 40 + random(20));
            s.moveTo(0, 0);
            s.lineTo(0, 1);
            s.xspeed = (Math.random() * 1.5) - 0.75;
            s.yspeed = (Math.random() * 1) - 2.5;
            s.x = (this._x + score._x) + (score._width * Math.random());
            s.y = (this._y + score._y) + ((score._height * Math.random()) * 0.75);
            s._x = s.x;
            s._y = s.y;
            s.onEnterFrame = function () {
                this._xscale = this._xscale + 2;
                this._yscale = this._yscale + 2;
                this._alpha = this._alpha - (5 - (Math.random() * 3));
                this.xspeed = this.xspeed * 0.93;
                this.yspeed = this.yspeed * 0.95;
                this.x = this.x + this.xspeed;
                this.y = this.y + this.yspeed;
                this._x = this.x;
                this._y = this.y;
                if (this._alpha <= 0) {
                    this.removeMovieClip();
                }
            };
            _local4++;
        }
    }
    function subtract(amount) {
        var _local1 = Number(score.text);
        score.text = _local1 - amount;
    }

﻿
//----------------------------------------------------------------------
//Instance of Symbol 222 MovieClip "controls1" in Frame 31
//----------------------------------------------------------------------
onClipEvent (load) {
    gotoAndStop (1);
    playerName.text = "";
    activateText.text = "Press Q";
}
﻿
//----------------------------------------------------------------------
//Symbol 120 MovieClip [fragbomb] Frame 1
//----------------------------------------------------------------------
    function hitCheck(mc, point) {
        localToGlobal(point);
        if (mc.hitTest(point.x, point.y, true)) {
            return(true);
        }
        return(false);
    }
    function detonate() {
        if (_root.soundOn) {
            _root.soundExplosion3.start();
            _root.soundExplosion3.start();
            _root.soundExplosion3.start();
        }
        _root.shake = _root.shake + 7;
        owner.fragFired = false;
        owner.lastFrag = undefined;
        _root.setWeapon(owner, "bullet");
        if (level > 0) {
            var _local5 = 0;
            while (_local5 < _root.FRAGFRAGMENTS) {
                fragDepth = _root.game.getNextHighestDepth();
                fragName = "fragfragment" + fragDepth;
                frag = _root.game.attachMovie("fragbombfragment", fragName, fragDepth);
                this.swapDepths(frag);
                frag.x = _x;
                frag.y = _y;
                frag._x = frag.x;
                frag._y = frag.y;
                frag._xscale = 170 * (_root.SCALE / 50);
                frag._yscale = 170 * (_root.SCALE / 50);
                frag._rotation = random(360);
                var _local4 = 25 + random(25);
                frag.rotSpeed = ((Math.random() > 0.5) ? (_local4) : (-_local4));
                var _local6 = random(360);
                frag.xSpeed = ((Math.cos(((_local6 - 90) * Math.PI) / 180) * ((_root.FRAGSPEED - (Math.random() * _root.FRAGSPEED)) + 4)) / _root.FRAGHITCHECKINTERVALS) * (_root.SCALE / 50);
                frag.ySpeed = ((Math.sin(((_local6 - 90) * Math.PI) / 180) * ((_root.FRAGSPEED - (Math.random() * _root.FRAGSPEED)) + 4)) / _root.FRAGHITCHECKINTERVALS) * (_root.SCALE / 50);
                frag.active = true;
                frag.owner = owner;
                _local5++;
            }
        }
        var _local3 = 0;
        while (_local3 < _root.FRAGSMOKECLOUDS) {
            s = _root.game.createEmptyMovieClip((("smokefrag" + owner) + "-") + _local3, _root.game.getNextHighestDepth());
            s.lineStyle((15 * (_root.SCALE / 50)) * ((level + 2) / (_root.FRAGLEVELS + 2)), Math.round(random(4)) * 1118481, 40 + random(20));
            s.moveTo(0, 0);
            s.lineTo(0, 1);
            s.xspeed = ((Math.random() * 2) - 1) * (_root.SCALE / 50);
            s.yspeed = ((Math.random() * 2) - 1) * (_root.SCALE / 50);
            s.x = (_x + (s.xspeed * (random(6) + 1))) + ((random(2) - 1) * (_root.SCALE / 50));
            s.y = (_y + (s.yspeed * (random(6) + 1))) + ((random(2) - 1) * (_root.SCALE / 50));
            s._x = s.x;
            s._y = s.y;
            s.onEnterFrame = function () {
                if (_root.frozen) {
                    return(undefined);
                }
                this._xscale = this._xscale + 2;
                this._yscale = this._yscale + 2;
                this._alpha = this._alpha - (3 - (Math.random() * 2));
                this.xspeed = this.xspeed * 0.93;
                this.yspeed = this.yspeed * 0.93;
                this.x = this.x + this.xspeed;
                this.y = this.y + this.yspeed;
                this._x = this.x;
                this._y = this.y;
                if (this._alpha <= 0) {
                    this.removeMovieClip();
                }
            };
            _local3++;
        }
        this.removeMovieClip();
    }
    onEnterFrame = function () {
        if (_root.frozen) {
            return(undefined);
        }
        if (!owner.alive) {
            detonate();
        }
        i = 0;
        while (i < _root.FRAGHITCHECKINTERVALS) {
            previousX = x;
            previousY = y;
            x = x + xSpeed;
            y = y + ySpeed;
            _x  = x;
            _y  = y;
            if (hitCheck(_root.game.mazemc, {x:0, y:0})) {
                if (_root.soundOn) {
                    _root["soundBounce" + random(2)].start();
                }
                x = previousX;
                y = previousY;
                x = x - xSpeed;
                y = y + ySpeed;
                _x  = x;
                _y  = y;
                if (hitCheck(_root.game.mazemc, {x:0, y:0})) {
                    hitOnXInvert = true;
                } else {
                    hitOnXInvert = false;
                }
                x = previousX;
                y = previousY;
                x = x + xSpeed;
                y = y - ySpeed;
                _x  = x;
                _y  = y;
                if (hitCheck(_root.game.mazemc, {x:0, y:0})) {
                    hitOnYInvert = true;
                } else {
                    hitOnYInvert = false;
                }
                if (hitOnXInvert && (!hitOnYInvert)) {
                    ySpeed = -ySpeed;
                } else if (hitOnYInvert && (!hitOnXInvert)) {
                    xSpeed = -xSpeed;
                } else {
                    xSpeed = -xSpeed;
                    ySpeed = -ySpeed;
                }
                x = previousX;
                y = previousY;
                x = x + xSpeed;
                y = y + ySpeed;
            }
            i++;
        }
        _x  = x;
        _y  = y;
        if (deadly == 0) {
            var i = 0;
            while (i < _root.TANKS) {
                if (_root.game["tank" + i].alive && (hitCheck(_root.game["tank" + i], {x:0, y:0}))) {
                    _root.registerHit(owner, _root.game["tank" + i]);
                    _root.destroyTank(i);
                    detonate();
                }
                i++;
            }
        }
        if (deadly > 0) {
            deadly--;
        }
        lifetime--;
        if (lifetime <= 0) {
            detonate();
            this.removeMovieClip();
        }
    };

﻿
//----------------------------------------------------------------------
//Symbol 90 MovieClip [tank] Frame 1
//----------------------------------------------------------------------
    function drawHitPoints(points, scale) {
        i = 0;
        while (i < points.length) {
            this.lineStyle(10, 65280);
            this.moveTo(points[i].x * scale, points[i].y * scale);
            this.lineTo((points[i].x * scale) + 1, points[i].y * scale);
            i++;
        }
    }
    function hitCheck(points) {
        i = 0;
        while (i < points.length) {
            var _local2 = {x:points[i].x, y:points[i].y};
            localToGlobal(_local2);
            if (_root.game.mazemc.hitTest(_local2.x, _local2.y, true)) {
                return(true);
            }
            i++;
        }
        return(false);
    }
    function expandedHitCheck(points, scale) {
        i = 0;
        while (i < points.length) {
            var _local2 = {x:points[i].x * scale, y:points[i].y * scale};
            localToGlobal(_local2);
            if (_root.game.mazemc.hitTest(_local2.x, _local2.y, true)) {
                return(true);
            }
            i++;
        }
        return(false);
    }
    forwardSpeed = 4 * (_root.SCALE / 50);
    backUpSpeed = 2.5 * (_root.SCALE / 50);
    turnSpeed = 10;
    triggerReleased = true;
    bulletsFired = 0;
    laserReady = true;
    fragFired = false;
    alive = true;
    gatlingReady = true;
    homingReady = true;
    deathRayReady = true;
    remoteControlling = false;
    electricReady = true;
    x = _x;
    y = _y;
    hitPointsFront = new Array();
    hitPointsFront[0] = {x:(-base._width) / 2, y:(-base._height) / 2};
    hitPointsFront[1] = {x:(-base._width) / 4, y:(-base._height) / 2};
    hitPointsFront[2] = {x:base._width / 4, y:(-base._height) / 2};
    hitPointsFront[3] = {x:base._width / 2, y:(-base._height) / 2};
    hitPointsFront[4] = {x:(-turret._width) / 6, y:((-turret._height) / 16) * 11};
    hitPointsFront[5] = {x:turret._width / 6, y:((-turret._height) / 16) * 11};
    hitPointsRear = new Array();
    hitPointsRear[0] = {x:(-base._width) / 2, y:base._height / 2};
    hitPointsRear[1] = {x:(-base._width) / 4, y:base._height / 2};
    hitPointsRear[2] = {x:0, y:base._height / 2};
    hitPointsRear[3] = {x:base._width / 4, y:base._height / 2};
    hitPointsRear[4] = {x:base._width / 2, y:base._height / 2};
    hitPointsRight = new Array();
    hitPointsRight[0] = {x:base._width / 2, y:((-base._height) / 6) * 2};
    hitPointsRight[1] = {x:base._width / 2, y:(-base._height) / 6};
    hitPointsRight[2] = {x:base._width / 2, y:0};
    hitPointsRight[3] = {x:base._width / 2, y:base._height / 6};
    hitPointsRight[4] = {x:base._width / 2, y:(base._height / 6) * 2};
    hitPointsLeft = new Array();
    hitPointsLeft[0] = {x:(-base._width) / 2, y:((-base._height) / 6) * 2};
    hitPointsLeft[1] = {x:(-base._width) / 2, y:(-base._height) / 6};
    hitPointsLeft[2] = {x:(-base._width) / 2, y:0};
    hitPointsLeft[3] = {x:(-base._width) / 2, y:base._height / 6};
    hitPointsLeft[4] = {x:(-base._width) / 2, y:(base._height / 6) * 2};
    if (mouseTank) {
        this.onMouseDown = function () {
            fire = true;
        };
        this.onMouseUp = function () {
            fire = false;
        };
    }
    onEnterFrame = function () {
        var _local5 = new Color(this.base.background);
        _local5.setTint(this.baseColor.r, this.baseColor.g, this.baseColor.b, this.baseColor.a);
        var _local4 = new Color(this.turret.background);
        _local4.setTint(this.turretColor.r, this.turretColor.g, this.turretColor.b, this.turretColor.a);
        _local5 = new Color(this.scoreboard.tankIcon.baseBackground);
        _local5.setTint(this.baseColor.r, this.baseColor.g, this.baseColor.b, this.baseColor.a);
        _local4 = new Color(this.scoreboard.tankIcon.turretBackground);
        _local4.setTint(this.turretColor.r, this.turretColor.g, this.turretColor.b, this.turretColor.a);
        if (mouseTank) {
            deltaX = _root.game.mazemc._xmouse - _x;
            deltaY = _root.game.mazemc._ymouse - _y;
            deltaLength = Math.sqrt(Math.pow(deltaX, 2) + Math.pow(deltaY, 2));
            _root.scopeCross._x = _root._xmouse;
            _root.scopeCross._y = _root._ymouse;
            if ((deltaLength > 60) && (alive)) {
                _root.scopeCircle._x = (_root.game._x + _x) + ((deltaX / deltaLength) * 60);
                _root.scopeCircle._y = (_root.game._y + _y) + ((deltaY / deltaLength) * 60);
            } else {
                _root.scopeCircle._x = _root._xmouse;
                _root.scopeCircle._y = _root._ymouse;
            }
        }
        if (_root.frozen) {
            return(undefined);
        }
        if (alive && (!_root.lockedControl(this, currentWeapon))) {
            oldX = x;
            oldY = y;
            oldRot = _rotation;
            if (mouseTank) {
                if (deltaX < 0) {
                    if (deltaY < 0) {
                        aimAngle = -3.14159265358979 + Math.atan(deltaY / deltaX);
                    } else {
                        aimAngle = Math.PI + Math.atan(deltaY / deltaX);
                    }
                } else if (deltaX > 0) {
                    aimAngle = Math.atan(deltaY / deltaX);
                } else if (deltaY < 0) {
                    aimAngle = -1.5707963267949;
                } else {
                    aimAngle = 1.5707963267949 /* Math.PI/2 */;
                }
                _rotation  = (((aimAngle + 1.5707963267949 /* Math.PI/2 */) * 180) / Math.PI);
                if (deltaLength > 60) {
                    forward = true;
                    backup = false;
                } else {
                    forward = false;
                    backup = false;
                }
            } else {
                if (Key.isDown(KEYTURNLEFT)) {
                    turnLeft = true;
                } else {
                    turnLeft = false;
                }
                if (Key.isDown(KEYFORWARD)) {
                    forward = true;
                } else {
                    forward = false;
                }
                if (Key.isDown(KEYTURNRIGHT)) {
                    turnRight = true;
                } else {
                    turnRight = false;
                }
                if (Key.isDown(KEYBACKUP)) {
                    backup = true;
                } else {
                    backup = false;
                }
                if (Key.isDown(KEYFIRE)) {
                    fire = true;
                } else {
                    fire = false;
                }
            }
            if (AI != undefined) {
                if (AI.makeDecisionsAndUpdateGoal()) {
                    AI.decideActionsToAchieveGoal();
                }
                AI.setInputToDoActions();
            }
            STEPS = 5;
            movesSuc = 0;
            turnsSuc = 0;
            moveSize = 0;
            turnSize = 0;
            if (forward) {
                moveSize = forwardSpeed / STEPS;
            }
            if (backup) {
                moveSize = moveSize - (backUpSpeed / STEPS);
            }
            if (turnLeft) {
                turnSize = (-turnSpeed) / STEPS;
            }
            if (turnRight) {
                turnSize = turnSize + (turnSpeed / STEPS);
            }
            hitSomething = false;
            var _local3 = 0;
            while (_local3 < STEPS) {
                _rotation  = (_rotation + turnSize);
                x = x + (Math.cos(((_rotation - 90) * Math.PI) / 180) * moveSize);
                y = y + (Math.sin(((_rotation - 90) * Math.PI) / 180) * moveSize);
                _local3++;
            }
            _x  = x;
            _y  = y;
            if (((hitCheck(hitPointsFront) || (hitCheck(hitPointsRear))) || (hitCheck(hitPointsLeft))) || (hitCheck(hitPointsRight))) {
                x = oldX;
                y = oldY;
                _x  = oldX;
                _y  = oldY;
                _rotation  = oldRot;
                _local3 = 0;
                while (_local3 < STEPS) {
                    if (!mouseTank) {
                        oldRot = _rotation;
                        _rotation  = (_rotation + turnSize);
                    }
                    if (((hitCheck(hitPointsFront) || (hitCheck(hitPointsRear))) || (hitCheck(hitPointsLeft))) || (hitCheck(hitPointsRight))) {
                        _rotation  = oldRot;
                        hitSomething = true;
                    }
                    oldX = x;
                    oldY = y;
                    x = x + (Math.cos(((_rotation - 90) * Math.PI) / 180) * moveSize);
                    y = y + (Math.sin(((_rotation - 90) * Math.PI) / 180) * moveSize);
                    _x  = x;
                    _y  = y;
                    if ((moveSize > 0) && (hitCheck(hitPointsFront))) {
                        x = oldX;
                        y = oldY;
                        _x  = oldX;
                        _y  = oldY;
                        hitSomething = true;
                    } else if ((moveSize < 0) && (hitCheck(hitPointsRear))) {
                        x = oldX;
                        y = oldY;
                        _x  = oldX;
                        _y  = oldY;
                        hitSomething = true;
                    }
                    _local3++;
                }
            }
            offset = (360 + _rotation) % turnSpeed;
            if (((!hitSomething) && (turnSize != 0)) && (offset != 0)) {
                if (offset < (turnSpeed / 2)) {
                    _rotation  = (_rotation - offset);
                } else {
                    _rotation  = (_rotation + (turnSpeed - offset));
                }
            }
            if ((fire && (triggerReleased)) && (_root.weaponReady(this, currentWeapon))) {
                triggerReleased = false;
                _root.fireWeapon(this, currentWeapon);
            } else if (!fire) {
                triggerReleased = true;
            }
        }
    };

﻿
//----------------------------------------------------------------------
//Symbol 108 MovieClip Frame 1
//----------------------------------------------------------------------
    stop();

﻿
//----------------------------------------------------------------------
//Symbol 136 MovieClip [remotebullet] Frame 1
//----------------------------------------------------------------------
    function hitCheck(mc, point) {
        localToGlobal(point);
        if (mc.hitTest(point.x, point.y, true)) {
            return(true);
        }
        return(false);
    }
    onEnterFrame = function () {
        if (_root.frozen) {
            return(undefined);
        }
        if (owner.alive) {
            if (owner.mouseTank) {
                var _local5 = _root.game.mazemc._xmouse - _x;
                var _local4 = _root.game.mazemc._ymouse - _y;
                var _local6 = Math.sqrt(Math.pow(_local5, 2) + Math.pow(_local4, 2));
                if (_local5 < 0) {
                    if (_local4 < 0) {
                        aimAngle = -3.14159265358979 + Math.atan(_local4 / _local5);
                    } else {
                        aimAngle = Math.PI + Math.atan(_local4 / _local5);
                    }
                } else if (_local5 > 0) {
                    aimAngle = Math.atan(_local4 / _local5);
                } else if (_local4 < 0) {
                    aimAngle = -1.5707963267949;
                } else {
                    aimAngle = 1.5707963267949 /* Math.PI/2 */;
                }
                _rotation  = (((aimAngle + 1.5707963267949 /* Math.PI/2 */) * 180) / Math.PI);
            } else {
                if (Key.isDown(owner.KEYTURNLEFT)) {
                    turnLeft = true;
                } else {
                    turnLeft = false;
                }
                if (Key.isDown(owner.KEYTURNRIGHT)) {
                    turnRight = true;
                } else {
                    turnRight = false;
                }
                turnSize = 0;
                if (turnLeft) {
                    turnSize = -turnSpeed;
                }
                if (turnRight) {
                    turnSize = turnSize + turnSpeed;
                }
                _rotation  = (_rotation + turnSize);
            }
        }
        xSpeed = ((Math.cos(((_rotation - 90) * Math.PI) / 180) * _root.REMOTESPEED) / _root.REMOTEHITCHECKINTERVALS) * (_root.SCALE / 50);
        ySpeed = ((Math.sin(((_rotation - 90) * Math.PI) / 180) * _root.REMOTESPEED) / _root.REMOTEHITCHECKINTERVALS) * (_root.SCALE / 50);
        i = 0;
        while (i < _root.REMOTEHITCHECKINTERVALS) {
            previousX = x;
            previousY = y;
            x = x + xSpeed;
            y = y + ySpeed;
            _x  = x;
            _y  = y;
            if (hitCheck(_root.game.mazemc, {x:0, y:0})) {
                if (_root.soundOn) {
                    _root["soundBounce" + random(2)].start();
                }
                x = previousX;
                y = previousY;
                x = x - xSpeed;
                y = y + ySpeed;
                _x  = x;
                _y  = y;
                if (hitCheck(_root.game.mazemc, {x:0, y:0})) {
                    hitOnXInvert = true;
                } else {
                    hitOnXInvert = false;
                }
                x = previousX;
                y = previousY;
                x = x + xSpeed;
                y = y - ySpeed;
                _x  = x;
                _y  = y;
                if (hitCheck(_root.game.mazemc, {x:0, y:0})) {
                    hitOnYInvert = true;
                } else {
                    hitOnYInvert = false;
                }
                if (hitOnXInvert && (!hitOnYInvert)) {
                    ySpeed = -ySpeed;
                    _rotation  = (180 - _rotation);
                } else if (hitOnYInvert && (!hitOnXInvert)) {
                    xSpeed = -xSpeed;
                    _rotation  = (-_rotation);
                } else {
                    xSpeed = -xSpeed;
                    ySpeed = -ySpeed;
                    _rotation  = (_rotation + 180);
                }
                x = previousX;
                y = previousY;
                x = x + xSpeed;
                y = y + ySpeed;
            }
            i++;
        }
        _x  = x;
        _y  = y;
        if (deadly == 0) {
            var i = 0;
            while (i < _root.TANKS) {
                if (_root.game["tank" + i].alive && (hitCheck(_root.game["tank" + i], {x:0, y:0}))) {
                    if (owner == _root.game["tank" + i]) {
                        _root.game["tank" + i].scoreboard.subtract(_root.TANKS - 1);
                        _root.loadVariables("includes/updateGameStatistics.php?tankScrapped=" + _root.TANKS, "POST");
                        var _local3 = 0;
                        while (_local3 < _root.TANKS) {
                            if (_local3 != i) {
                                _root.game["tank" + _local3].scoreboard.add(1);
                            }
                            _local3++;
                        }
                    } else {
                        _root.game["tank" + i].scoreboard.subtract(1);
                        _root.loadVariables("includes/updateGameStatistics.php?tankScrapped=" + _root.TANKS, "POST");
                        owner.scoreboard.add(1);
                    }
                    owner.remoteControlling = false;
                    _root.setWeapon(owner, "bullet");
                    _root.destroyTank(i);
                    this.removeMovieClip();
                }
                i++;
            }
        }
        if (deadly > 0) {
            deadly--;
        }
        lifetime--;
        if (lifetime <= 0) {
            owner.remoteControlling = false;
            _root.setWeapon(owner, "bullet");
            if (_root.soundOn) {
                _root.soundPoof.start();
            }
            var _local3 = 0;
            while (_local3 < (_root.NUMBEROFSMOKECLOUDS * 2)) {
                s = _root.game.createEmptyMovieClip("smokeremotebullet" + _root.game.getNextHighestDepth(), _root.game.getNextHighestDepth());
                s.lineStyle(5 * (_root.SCALE / 50), Math.round(random(4)) * 1118481, 10 + random(20));
                s.moveTo(0, 0);
                s.lineTo(0, 1);
                s.xspeed = (xSpeed * _root.REMOTEHITCHECKINTERVALS) + ((0.5 * ((Math.random() * 8) - 4)) * (_root.SCALE / 50));
                s.yspeed = (ySpeed * _root.REMOTEHITCHECKINTERVALS) + ((0.5 * ((Math.random() * 8) - 4)) * (_root.SCALE / 50));
                s.x = _x;
                s.y = _y;
                s._x = s.x;
                s._y = s.y;
                s.hitCheck = function (mc, point) {
                    this.localToGlobal(point);
                    if (mc.hitTest(point.x, point.y, true)) {
                        return(true);
                    }
                    return(false);
                };
                s.onEnterFrame = function () {
                    if (_root.frozen) {
                        return(undefined);
                    }
                    this._xscale = this._xscale + 2;
                    this._yscale = this._yscale + 2;
                    this._alpha = this._alpha - (15 - (Math.random() * 2));
                    this.xspeed = this.xspeed * 0.93;
                    this.yspeed = this.yspeed * 0.93;
                    this.x = this.x + this.xspeed;
                    this.y = this.y + this.yspeed;
                    this._x = this.x;
                    this._y = this.y;
                    if (this.hitCheck(_root.game.mazemc, {x:0, y:0})) {
                        this.xspeed = this.xspeed * 0.25;
                        this.yspeed = this.yspeed * 0.25;
                    }
                    if (this._alpha <= 0) {
                        this.removeMovieClip();
                    }
                };
                _local3++;
            }
            this.removeMovieClip();
        }
    };

﻿
//----------------------------------------------------------------------
//Instance of Symbol 222 MovieClip "controls3" in Frame 31
//----------------------------------------------------------------------
onClipEvent (load) {
    gotoAndStop (3);
    playerName.text = "";
    activateText.text = "Press left";
}
﻿
//----------------------------------------------------------------------
//Symbol 127 MovieClip [bullet] Frame 1
//----------------------------------------------------------------------
    function hitCheck(mc, point) {
        localToGlobal(point);
        if (mc.hitTest(point.x, point.y, true)) {
            return(true);
        }
        return(false);
    }
    onEnterFrame = function () {
        if (_root.frozen) {
            return(undefined);
        }
        i = 0;
        while (i < _root.BULLETHITCHECKINTERVALS) {
            previousX = x;
            previousY = y;
            x = x + xSpeed;
            y = y + ySpeed;
            _x  = x;
            _y  = y;
            if (hitCheck(_root.game.mazemc, {x:0, y:0})) {
                if (_root.soundOn) {
                    _root["soundBounce" + random(2)].start();
                }
                x = previousX;
                y = previousY;
                x = x - xSpeed;
                y = y + ySpeed;
                _x  = x;
                _y  = y;
                if (hitCheck(_root.game.mazemc, {x:0, y:0})) {
                    hitOnXInvert = true;
                } else {
                    hitOnXInvert = false;
                }
                x = previousX;
                y = previousY;
                x = x + xSpeed;
                y = y - ySpeed;
                _x  = x;
                _y  = y;
                if (hitCheck(_root.game.mazemc, {x:0, y:0})) {
                    hitOnYInvert = true;
                } else {
                    hitOnYInvert = false;
                }
                if (hitOnXInvert && (!hitOnYInvert)) {
                    ySpeed = -ySpeed;
                } else if (hitOnYInvert && (!hitOnXInvert)) {
                    xSpeed = -xSpeed;
                } else {
                    xSpeed = -xSpeed;
                    ySpeed = -ySpeed;
                }
                x = previousX;
                y = previousY;
                x = x + xSpeed;
                y = y + ySpeed;
            }
            i++;
        }
        _x  = x;
        _y  = y;
        if (deadly == 0) {
            var i = 0;
            while (i < _root.TANKS) {
                if (_root.game["tank" + i].alive && (hitCheck(_root.game["tank" + i], {x:0, y:0}))) {
                    _root.registerHit(owner, _root.game["tank" + i]);
                    owner.bulletsFired--;
                    _root.destroyTank(i);
                    this.removeMovieClip();
                }
                i++;
            }
        }
        if (deadly > 0) {
            deadly--;
        }
        lifetime--;
        if (lifetime <= 0) {
            owner.bulletsFired--;
            if (_root.soundOn) {
                _root.soundPoof.start();
            }
            var _local3 = 0;
            while (_local3 < (_root.NUMBEROFSMOKECLOUDS * 2)) {
                s = _root.game.createEmptyMovieClip("smokebullet" + _root.game.getNextHighestDepth(), _root.game.getNextHighestDepth());
                s.lineStyle(5 * (_root.SCALE / 50), Math.round(random(4)) * 1118481, 10 + random(20));
                s.moveTo(0, 0);
                s.lineTo(0, 1);
                s.xspeed = (xSpeed * _root.BULLETHITCHECKINTERVALS) + ((0.5 * ((Math.random() * 8) - 4)) * (_root.SCALE / 50));
                s.yspeed = (ySpeed * _root.BULLETHITCHECKINTERVALS) + ((0.5 * ((Math.random() * 8) - 4)) * (_root.SCALE / 50));
                s.x = _x;
                s.y = _y;
                s._x = s.x;
                s._y = s.y;
                s.hitCheck = function (mc, point) {
                    this.localToGlobal(point);
                    if (mc.hitTest(point.x, point.y, true)) {
                        return(true);
                    }
                    return(false);
                };
                s.onEnterFrame = function () {
                    if (_root.frozen) {
                        return(undefined);
                    }
                    this._xscale = this._xscale + 2;
                    this._yscale = this._yscale + 2;
                    this._alpha = this._alpha - (15 - (Math.random() * 2));
                    this.xspeed = this.xspeed * 0.93;
                    this.yspeed = this.yspeed * 0.93;
                    this.x = this.x + this.xspeed;
                    this.y = this.y + this.yspeed;
                    this._x = this.x;
                    this._y = this.y;
                    if (this.hitCheck(_root.game.mazemc, {x:0, y:0})) {
                        this.xspeed = this.xspeed * 0.25;
                        this.yspeed = this.yspeed * 0.25;
                    }
                    if (this._alpha <= 0) {
                        this.removeMovieClip();
                    }
                };
                _local3++;
            }
            this.removeMovieClip();
        }
    };

﻿
//----------------------------------------------------------------------
//Symbol 126 MovieClip [gatlingBullet] Frame 1
//----------------------------------------------------------------------
    function hitCheck(mc, point) {
        localToGlobal(point);
        if (mc.hitTest(point.x, point.y, true)) {
            return(true);
        }
        return(false);
    }
    onEnterFrame = function () {
        if (_root.frozen) {
            return(undefined);
        }
        i = 0;
        while (i < _root.GATLINGHITCHECKINTERVALS) {
            previousX = x;
            previousY = y;
            x = x + xSpeed;
            y = y + ySpeed;
            _x  = x;
            _y  = y;
            if (hitCheck(_root.game.mazemc, {x:0, y:0})) {
                if (_root.soundOn) {
                    _root["soundBounce" + random(2)].start();
                }
                x = previousX;
                y = previousY;
                x = x - xSpeed;
                y = y + ySpeed;
                _x  = x;
                _y  = y;
                if (hitCheck(_root.game.mazemc, {x:0, y:0})) {
                    hitOnXInvert = true;
                } else {
                    hitOnXInvert = false;
                }
                x = previousX;
                y = previousY;
                x = x + xSpeed;
                y = y - ySpeed;
                _x  = x;
                _y  = y;
                if (hitCheck(_root.game.mazemc, {x:0, y:0})) {
                    hitOnYInvert = true;
                } else {
                    hitOnYInvert = false;
                }
                if (hitOnXInvert && (!hitOnYInvert)) {
                    ySpeed = -ySpeed;
                } else if (hitOnYInvert && (!hitOnXInvert)) {
                    xSpeed = -xSpeed;
                } else {
                    xSpeed = -xSpeed;
                    ySpeed = -ySpeed;
                }
                x = previousX;
                y = previousY;
                x = x + xSpeed;
                y = y + ySpeed;
            }
            i++;
        }
        _x  = x;
        _y  = y;
        if (deadly == 0) {
            var i = 0;
            while (i < _root.TANKS) {
                if (_root.game["tank" + i].alive && (hitCheck(_root.game["tank" + i], {x:0, y:0}))) {
                    _root.registerHit(owner, _root.game["tank" + i]);
                    _root.destroyTank(i);
                    this.removeMovieClip();
                }
                i++;
            }
        }
        if (deadly > 0) {
            deadly--;
        }
        lifetime--;
        if (lifetime <= 0) {
            var _local3 = 0;
            while (_local3 < _root.NUMBEROFSMOKECLOUDS) {
                s = _root.game.createEmptyMovieClip("smokegatlingbullet" + _root.game.getNextHighestDepth(), _root.game.getNextHighestDepth());
                s.lineStyle(2 * (_root.SCALE / 50), Math.round(random(4)) * 1118481, 10 + random(20));
                s.moveTo(0, 0);
                s.lineTo(0, 1);
                s.xspeed = (xSpeed * _root.GATLINGHITCHECKINTERVALS) + ((0.25 * ((Math.random() * 8) - 4)) * (_root.SCALE / 50));
                s.yspeed = (ySpeed * _root.GATLINGHITCHECKINTERVALS) + ((0.25 * ((Math.random() * 8) - 4)) * (_root.SCALE / 50));
                s.x = _x;
                s.y = _y;
                s._x = s.x;
                s._y = s.y;
                s.hitCheck = function (mc, point) {
                    this.localToGlobal(point);
                    if (mc.hitTest(point.x, point.y, true)) {
                        return(true);
                    }
                    return(false);
                };
                s.onEnterFrame = function () {
                    if (_root.frozen) {
                        return(undefined);
                    }
                    this._xscale = this._xscale + 2;
                    this._yscale = this._yscale + 2;
                    this._alpha = this._alpha - (15 - (Math.random() * 2));
                    this.xspeed = this.xspeed * 0.93;
                    this.yspeed = this.yspeed * 0.93;
                    this.x = this.x + this.xspeed;
                    this.y = this.y + this.yspeed;
                    this._x = this.x;
                    this._y = this.y;
                    if (this.hitCheck(_root.game.mazemc, {x:0, y:0})) {
                        this.xspeed = this.xspeed * 0.25;
                        this.yspeed = this.yspeed * 0.25;
                    }
                    if (this._alpha <= 0) {
                        this.removeMovieClip();
                    }
                };
                _local3++;
            }
            this.removeMovieClip();
        }
    };

﻿
//----------------------------------------------------------------------
//Frame 13
//----------------------------------------------------------------------
    _root.loadVariables("includes/updateGameStatistics.php?q=" + Base64.Encode(shuffleMessage((("gameStarted=2&a=" + Math.random()) + "&b=") + Math.random())), "POST");
    gotoAndPlay ("game");
﻿
//----------------------------------------------------------------------
//Symbol 129 MovieClip [laser] Frame 1
//----------------------------------------------------------------------
    function hitCheck(mc, point) {
        localToGlobal(point);
        if (mc.hitTest(point.x, point.y, true)) {
            return(true);
        }
        return(false);
    }
    var linePoints = new Array();
    onEnterFrame = function () {
        if (_root.frozen) {
            return(undefined);
        }
        if (active) {
            j = 0;
            while (j < _root.LASERHITCHECKINTERVALS) {
                previousX = x;
                previousY = y;
                x = x + xSpeed;
                y = y + ySpeed;
                if (hitCheck(_root.game.mazemc, {x:x, y:y})) {
                    x = previousX;
                    y = previousY;
                    x = x - xSpeed;
                    y = y + ySpeed;
                    if (hitCheck(_root.game.mazemc, {x:x, y:y})) {
                        hitOnXInvert = true;
                    } else {
                        hitOnXInvert = false;
                    }
                    x = previousX;
                    y = previousY;
                    x = x + xSpeed;
                    y = y - ySpeed;
                    if (hitCheck(_root.game.mazemc, {x:x, y:y})) {
                        hitOnYInvert = true;
                    } else {
                        hitOnYInvert = false;
                    }
                    if (hitOnXInvert && (!hitOnYInvert)) {
                        ySpeed = -ySpeed;
                    } else if (hitOnYInvert && (!hitOnXInvert)) {
                        xSpeed = -xSpeed;
                    } else {
                        xSpeed = -xSpeed;
                        ySpeed = -ySpeed;
                    }
                    x = previousX;
                    y = previousY;
                    x = x + xSpeed;
                    y = y + ySpeed;
                }
                if (deadly > 0) {
                    deadly--;
                }
                if (deadly == 0) {
                    var _local3 = 0;
                    while (_local3 < _root.TANKS) {
                        if (_root.game["tank" + _local3].alive && (hitCheck(_root.game["tank" + _local3], {x:x, y:y}))) {
                            _root.registerHit(owner, _root.game["tank" + _local3]);
                            _root.destroyTank(_local3);
                            j = _root.LASERHITCHECKINTERVALS;
                            lifetime = 1;
                        }
                        _local3++;
                    }
                }
                linePoints.push({x:x, y:y});
                j++;
            }
        } else {
            j = 0;
            while (j < _root.LASERHITCHECKINTERVALS) {
                linePoints.shift();
                j++;
            }
            if (linePoints.length == 0) {
                this.removeMovieClip();
            }
        }
        clear();
        lineStyle(3 * (_root.SCALE / 50), 0, 30);
        moveTo(linePoints[0].x, linePoints[0].y);
        var _local3 = 1;
        while (_local3 < linePoints.length) {
            lineTo(linePoints[_local3].x, linePoints[_local3].y);
            _local3++;
        }
        lineStyle(2 * (_root.SCALE / 50), laserColor, 100);
        moveTo(linePoints[0].x, linePoints[0].y);
        _local3 = 1;
        while (_local3 < linePoints.length) {
            lineTo(linePoints[_local3].x, linePoints[_local3].y);
            _local3++;
        }
        lifetime--;
        if (lifetime == 0) {
            owner.laserReady = true;
            active = false;
            _root.setWeapon(owner, "bullet");
        }
    };
﻿
//----------------------------------------------------------------------
//Frame 19
//----------------------------------------------------------------------
    stop();
    player1Joined = false;
    player2Joined = false;
    player3Joined = false;
    onKeyDown = function () {
        if (Key.getCode() == 81) {
            if (!player1Joined) {
                if (_root.soundOn) {
                    _root.soundClick.start();
                }
            }
            var _local2 = new Color(player1Controls.background);
            _local2.setRGB(16711680);
            player1Controls.fireButton.gotoAndStop(1);
            _local2 = new Color(player1Controls.fireButton.background);
            _local2.setRGB(16711680);
            player1Controls.activateText.text = "";
            player1Joined = true;
        }
        if (Key.getCode() == 77) {
            if (!player2Joined) {
                if (_root.soundOn) {
                    _root.soundClick.start();
                }
            }
            var _local2 = new Color(player2Controls.background);
            _local2.setRGB(65280);
            player2Controls.fireButton.gotoAndStop(1);
            _local2 = new Color(player2Controls.fireButton.background);
            _local2.setRGB(65280);
            player2Controls.activateText.text = "";
            player2Joined = true;
        }
    };
    Key.addListener(this);
    onEnterFrame = function () {
        if ((player1Joined && (player2Joined)) && (player3Joined)) {
            Key.removeListener(this);
            onMouseDown = undefined;
            play();
            _root.TANKS = 3;
            _root.onEnterFrame = undefined;
        }
    };
    onMouseDown = function () {
        if (!player3Joined) {
            if (_root.soundOn) {
                _root.soundClick.start();
            }
        }
        var _local2 = new Color(player3Controls.background);
        _local2.setRGB(255);
        player3Controls.fireButton.gotoAndStop(1);
        _local2 = new Color(player3Controls.fireButton.background);
        _local2.setRGB(255);
        player3Controls.activateText.text = "";
        player3Joined = true;
    };

﻿
//----------------------------------------------------------------------
//Symbol 118 MovieClip [fragbombfragment] Frame 1
//----------------------------------------------------------------------
    function hitCheck(mc, point) {
        localToGlobal(point);
        if (mc.hitTest(point.x, point.y, true)) {
            return(true);
        }
        return(false);
    }
    onEnterFrame = function () {
        if (_root.frozen) {
            return(undefined);
        }
        if (active) {
            i = 0;
            while (i < _root.FRAGHITCHECKINTERVALS) {
                x = x + xSpeed;
                y = y + ySpeed;
                _x  = x;
                _y  = y;
                if (hitCheck(_root.game.mazemc, {x:0, y:0})) {
                    if (_root.soundOn) {
                        if (Math.random() > 0.5) {
                            _root.soundFragmentHit.start();
                        } else {
                            _root.soundFragmentHit2.start();
                        }
                    }
                    active = false;
                    i = _root.FRAGHITCHECKINTERVALS;
                }
                i++;
            }
            _x  = x;
            _y  = y;
            _rotation  = (_rotation + rotSpeed);
            var i = 0;
            while (i < _root.TANKS) {
                if (_root.game["tank" + i].alive && (hitCheck(_root.game["tank" + i], {x:0, y:0}))) {
                    _root.registerHit(owner, _root.game["tank" + i]);
                    _root.destroyTank(i);
                    this.removeMovieClip();
                }
                i++;
            }
        } else {
            _alpha  = (_alpha - 5);
            if (_alpha <= 0) {
                this.removeMovieClip();
            }
        }
    };

﻿
//----------------------------------------------------------------------
//Frame 1
//----------------------------------------------------------------------
    function shuffleMessage(m) {
        var _local1 = m.split("&");
        var _local2 = 0;
        while (_local2 < _local1.length) {
            var _local3 = Math.floor(Math.random() * _local1.length);
            var _local4 = _local1[_local2];
            _local1[_local2] = _local1[_local3];
            _local1[_local3] = _local4;
            _local2++;
        }
        return(_local1.join("&"));
    }
    function decodeMessage(m) {
        var _local4 = {};
        var _local3 = Base64.Decode(m).split("&");
        var _local1 = 0;
        while (_local1 < _local3.length) {
            var _local2 = _local3[_local1].split("=");
            _local4[_local2[0]] = _local2[1];
            _local1++;
        }
        return(_local4);
    }
    function placePlayerButton(x, y, players, linkTo) {
        var _local3 = _root.attachMovie("playerButton", "playerButton" + players, _root.getNextHighestDepth());
        _local3.hitZone.tabEnabled = false;
        _local3.targetZ = -100;
        _local3.transX = x;
        _local3.transY = y;
        _local3._x = x;
        _local3._y = y;
        _local3.x = 0;
        _local3.y = 0;
        _local3.z = -100;
        _local3.xScale = 100;
        _local3.yScale = 100;
        _local3.zSpeed = 0;
        _local3.linkTo = linkTo;
        _local3.pressed = false;
        if (_root.loginInfo != undefined) {
            _local3.enabled = players == _root.loginInfo.numUsers;
        }
        if (_local3.enabled) {
            _local3.playerNumber.gotoAndStop(-3 + (2 * players));
            _local3.hitZone.onPress = function () {
                this._parent.pressed = true;
            };
            _local3.hitZone.onReleaseOutside = function () {
                this._parent.pressed = false;
            };
            _local3.hitZone.onRelease = function () {
                _root.gotoAndPlay(linkTo);
                _root.removePlayerButtons();
            };
        } else {
            _local3.playerNumber.gotoAndStop(-2 + (2 * players));
            _local3.disabledText.gotoAndStop(((players < _root.loginInfo.numUsers) ? 2 : 1));
            _local3.disabledText._alpha = 100;
        }
        _local3.onEnterFrame = function () {
            if (this.enabled) {
                if (!this.hitZone.hitTest(_root._xmouse, _root._ymouse, true)) {
                    this.targetZ = -100;
                    this.z = -100;
                } else if (this.pressed) {
                    this.targetZ = -100;
                    this.z = -100;
                } else {
                    this.targetZ = -93;
                    this.z = -93;
                }
            }
            this.zSpeed = this.zSpeed + ((this.targetZ - this.z) * 4.9);
            this.zSpeed = this.zSpeed * 0.1;
            this.z = this.z + this.zSpeed;
            this.xScale = (100 * (1 / (-this.z))) * 100;
            this.yScale = (100 * (1 / (-this.z))) * 100;
            this._xscale = this.xScale;
            this._yscale = this.yScale;
            this._x = this.transX + (this.x * (100 / (-this.z)));
            this._y = this.transY + (this.y * (100 / (-this.z)));
        };
    }
    function removePlayerButtons() {
        _root.playerButton2.removeMovieClip();
        _root.playerButton3.removeMovieClip();
    }
    stop();
    soundBullet = new Sound(this);
    soundBullet.attachSound("soundBullet");
    soundClick = new Sound(this);
    soundClick.attachSound("load");
    soundExplosion = new Sound(this);
    soundExplosion.attachSound("explosion5");
    soundExplosion2 = new Sound(this);
    soundExplosion2.attachSound("explosion3");
    soundExplosion3 = new Sound(this);
    soundExplosion3.attachSound("soundFragBomb");
    soundBounce0 = new Sound(this);
    soundBounce0.attachSound("pingpong");
    soundBounce1 = new Sound(this);
    soundBounce1.attachSound("pingpong2");
    soundLaser = new Sound(this);
    soundLaser.attachSound("soundLaser");
    soundCrate = new Sound(this);
    soundCrate.attachSound("crateSpawn");
    soundCrateLand = new Sound(this);
    soundCrateLand.attachSound("soundCrateLand");
    soundFragment = new Sound(this);
    soundFragment.attachSound("soundFragment");
    soundFragmentHit = new Sound(this);
    soundFragmentHit.attachSound("soundFragmentHit");
    soundFragmentHit2 = new Sound(this);
    soundFragmentHit2.attachSound("soundFragmentHit2");
    soundPoof = new Sound(this);
    soundPoof.attachSound("soundPoof");
    soundGatlingMotor = new Sound(this);
    soundGatlingMotor.attachSound("soundGatlingMotor");
    soundGatlingMotorStart = new Sound(this);
    soundGatlingMotorStart.attachSound("soundGatlingMotorStart");
    soundGatlingMotorStop = new Sound(this);
    soundGatlingMotorStop.attachSound("soundGatlingMotorStop");
    soundGatlingShot = new Sound(this);
    soundGatlingShot.attachSound("soundGatlingShot");
    soundDeathRayCharge = new Sound(this);
    soundDeathRayCharge.attachSound("soundDeathRayCharge");
    soundDeathRayFire = new Sound(this);
    soundDeathRayFire.attachSound("soundDeathRayFire");
    soundHoming = new Sound(this);
    soundHoming.attachSound("soundHoming");
    soundHoming2 = new Sound(this);
    soundHoming2.attachSound("soundHoming2");
    soundHoming3 = new Sound(this);
    soundHoming3.attachSound("soundHomingFire");
    settingsActiveWeapons = new Array("laser", "frag", "gatling", "homing");
    settingsMaxBullets = 1;
    settingsMaxCrates = 100;
    settingsCrateSpawnModifier = 0.1;
    Color.prototype.setTint = function (r, g, b, amount) {
        var _local2 = new Object();
        _local2.ra = (_local2.ga = (_local2.ba = 100 - amount));
        var _local3 = amount / 100;
        _local2.rb = r * _local3;
        _local2.gb = g * _local3;
        _local2.bb = b * _local3;
        this.setTransform(_local2);
    };
    if (initCode != undefined) {
        _root.loginInfo = decodeMessage(initCode);
        placePlayerButton(226, 340.8, 2, "controlsLoggedInPlayers");
        placePlayerButton(486, 340.8, 3, "controlsLoggedInPlayers");
        onKeyDown = function () {
            if ((Key.getCode() == (48 + parseInt(_root.loginInfo.numUsers))) && (Key.getCode() > 49)) {
                Key.removeListener(this);
                _root.removePlayerButtons();
                _root.gotoAndPlay("controlsLoggedInPlayers");
            }
        };
        Key.addListener(this);
    } else {
        placePlayerButton(226, 340.8, 2, "controls2Player");
        placePlayerButton(486, 340.8, 3, "controls3Player");
        onKeyDown = function () {
            if (Key.getCode() == 50) {
                Key.removeListener(this);
                _root.removePlayerButtons();
                _root.gotoAndPlay("controls2Player");
            }
            if (Key.getCode() == 51) {
                Key.removeListener(this);
                _root.removePlayerButtons();
                _root.gotoAndPlay("controls3Player");
            }
        };
        Key.addListener(this);
    }

﻿
//----------------------------------------------------------------------
//Symbol 116 MovieClip [serverInfo] Frame 1
//----------------------------------------------------------------------
    stop();

﻿
//----------------------------------------------------------------------
//Frame 38
//----------------------------------------------------------------------
    _root.importantMessage.removeMovieClip();
    getURL ("javascript: document.getElementById('TankTrouble').style.top = '-10px'; void ( 0 );");

﻿
//----------------------------------------------------------------------
//Instance of Symbol 222 MovieClip "controls2" in Frame 31
//----------------------------------------------------------------------
onClipEvent (load) {
    gotoAndStop (2);
    playerName.text = "";
    activateText.text = "Press M";
}
﻿
//----------------------------------------------------------------------
//Symbol 227 MovieClip [__Packages.Base64] Frame 0
//----------------------------------------------------------------------
    class Base64 extends Object
    {
        static var _CharsReverseLookup;
        var _base64Str, _base64Count;
        function Base64 () {
            super();
        }
        static function Encode(str) {
            var _local1 = new Base64();
            return(_local1.encodeBase64(str));
        }
        static function Decode(str) {
            var _local1 = new Base64();
            return(_local1.decodeBase64(str));
        }
        static function StringReplaceAll(source, find, replacement) {
            return(source.split(find).join(replacement));
        }
        static function InitReverseChars() {
            _CharsReverseLookup = new Array();
            var _local1 = 0;
            while (_local1 < _Chars.length) {
                _CharsReverseLookup[_Chars[_local1]] = _local1;
                _local1++;
            }
            return(true);
        }
        static function UrlDecode(str) {
            str = StringReplaceAll(str, "\\", " ");
            str = unescape(str);
            return(str);
        }
        static function UrlEncode(str) {
            str = escape(str);
            str = StringReplaceAll(str, "\\", "%2B");
            str = StringReplaceAll(str, "%20", "+");
            return(str);
        }
        function setBase64Str(str) {
            _base64Str = str;
            _base64Count = 0;
        }
        function readBase64() {
            if (!_base64Str) {
                return(_EndOfInput);
            }
            if (_base64Count >= _base64Str.length) {
                return(_EndOfInput);
            }
            var _local2 = _base64Str.charCodeAt(_base64Count) & 255;
            _base64Count++;
            return(_local2);
        }
        function encodeBase64(str) {
            setBase64Str(str);
            var _local3 = "";
            var _local2 = new Array(3);
            var _local5 = 0;
            var _local4 = false;
            while ((!_local4) && (((_local2[0] = readBase64())) != _EndOfInput)) {
                _local2[1] = readBase64();
                _local2[2] = readBase64();
                _local3 = _local3 + _Chars[_local2[0] >> 2];
                if (_local2[1] != _EndOfInput) {
                    _local3 = _local3 + _Chars[((_local2[0] << 4) & 48) | (_local2[1] >> 4)];
                    if (_local2[2] != _EndOfInput) {
                        _local3 = _local3 + _Chars[((_local2[1] << 2) & 60) | (_local2[2] >> 6)];
                        _local3 = _local3 + _Chars[_local2[2] & 63];
                    } else {
                        _local3 = _local3 + _Chars[(_local2[1] << 2) & 60];
                        _local3 = _local3 + "=";
                        _local4 = true;
                    }
                } else {
                    _local3 = _local3 + _Chars[(_local2[0] << 4) & 48];
                    _local3 = _local3 + "=";
                    _local3 = _local3 + "=";
                    _local4 = true;
                }
                _local5 = _local5 + 4;
                if (_local5 >= 76) {
                    _local3 = _local3 + newline;
                    _local5 = 0;
                }
            }
            return(_local3);
        }
        function readReverseBase64() {
            if (!_base64Str) {
                return(_EndOfInput);
            }
            while (true) {
                if (_base64Count >= _base64Str.length) {
                    return(_EndOfInput);
                }
                var _local2 = _base64Str.charAt(_base64Count);
                _base64Count++;
                if (_CharsReverseLookup[_local2]) {
                    return(_CharsReverseLookup[_local2]);
                }
                if (_local2 == "A") {
                    return(0);
                }
            }
        }
        function ntos(n) {
            var _local1 = n.toString(16);
            if (_local1.length == 1) {
                _local1 = "0" + _local1;
            }
            _local1 = "%" + _local1;
            return(unescape(_local1));
        }
        function decodeBase64(str) {
            setBase64Str(str);
            var _local3 = "";
            var _local2 = new Array(4);
            var _local4 = false;
            while (((!_local4) && (((_local2[0] = readReverseBase64())) != _EndOfInput)) && (((_local2[1] = readReverseBase64())) != _EndOfInput)) {
                _local2[2] = readReverseBase64();
                _local2[3] = readReverseBase64();
                _local3 = _local3 + ntos(((_local2[0] << 2) & 255) | (_local2[1] >> 4));
                if (_local2[2] != _EndOfInput) {
                    _local3 = _local3 + ntos(((_local2[1] << 4) & 255) | (_local2[2] >> 2));
                    if (_local2[3] != _EndOfInput) {
                        _local3 = _local3 + ntos(((_local2[2] << 6) & 255) | _local2[3]);
                    } else {
                        _local4 = true;
                    }
                } else {
                    _local4 = true;
                }
            }
            return(_local3);
        }
        function toHex(n) {
            var _local4 = "";
            var _local3 = true;
            var _local1 = 32;
            while (_local1 > 0) {
                _local1 = _local1 - 4;
                var _local2 = (n >> _local1) & 15;
                if ((!_local3) || (_local2 != 0)) {
                    _local3 = false;
                    _local4 = _local4 + _Digits[_local2];
                }
            }
            return(((_local4 == "") ? "0" : (_local4)));
        }
        function pad(str, len, pad) {
            var _local2 = str;
            var _local1 = str.length;
            while (_local1 < len) {
                _local2 = pad + _local2;
                _local1++;
            }
            return(_local2);
        }
        function encodeHex(str) {
            var _local4 = "";
            var _local2 = 0;
            while (_local2 < str.length) {
                _local4 = _local4 + pad(toHex(str.charCodeAt(_local2) & 255), 2, "0");
                _local2++;
            }
            return(_local4);
        }
        function decodeHex(str) {
            var _local5 = "";
            var _local3 = "";
            var _local2 = 0;
            while (_local2 < str.length) {
                _local3 = _local3 + str.charAt(_local2);
                if (_local3.length == 2) {
                    _local5 = _local5 + ntos(parseInt("0x" + _local3));
                    _local3 = "";
                }
                _local2++;
            }
            return(_local5);
        }
        static var _EndOfInput = -1;
        static var _Chars = new Array("A", "B", "C", "D", "E", "F", "G", "H", "I", "J", "K", "L", "M", "N", "O", "P", "Q", "R", "S", "T", "U", "V", "W", "X", "Y", "Z", "a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l", "m", "n", "o", "p", "q", "r", "s", "t", "u", "v", "w", "x", "y", "z", "0", "1", "2", "3", "4", "5", "6", "7", "8", "9", "+", "/");
        static var _CharsReverseLookupInited = InitReverseChars();
        static var _Digits = new Array("0", "1", "2", "3", "4", "5", "6", "7", "8", "9", "a", "b", "c", "d", "e", "f");
    }
﻿
//----------------------------------------------------------------------
//Instance of Symbol 222 MovieClip "player2Controls" in Frame 19
//----------------------------------------------------------------------
onClipEvent (load) {
    gotoAndStop (2);
    playerName.text = "Player 2";
    activateText.text = "Press M";
}